/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using intdash.Client;
using intdash.Model;

namespace intdash.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthOAuth2ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List JSON Web Keys
        /// </summary>
        /// <remarks>
        /// JSON Web Keysのリストを取得します。 [RFC7517:JSON Web Key](https://tools.ietf.org/html/rfc7517)
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OAuth2JWKs</returns>
        OAuth2JWKs AuthOauth2JwksGet();

        /// <summary>
        /// List JSON Web Keys
        /// </summary>
        /// <remarks>
        /// JSON Web Keysのリストを取得します。 [RFC7517:JSON Web Key](https://tools.ietf.org/html/rfc7517)
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OAuth2JWKs</returns>
        ApiResponse<OAuth2JWKs> AuthOauth2JwksGetWithHttpInfo();
        /// <summary>
        /// Token Endpoint
        /// </summary>
        /// <remarks>
        /// OAuth2のアクセストークンを取得します。 [RFC6749:The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">グラントタイプ (optional)</param>
        /// <param name="refreshToken">認可時に発行されたリフレッシュトークン。grant_typeが &#x60;refresh_token&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="tenantUuid">テナントのUUID。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 grant_typeが &#x60;password&#x60; で、テナントUUIDを省略した場合は、デフォルトのテナントが使用されます。 (optional, default to &quot;00000000-0000-0000-0000-000000000000&quot;)</param>
        /// <param name="username">ユーザーの名前。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="password">パスワード。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="clientId">OAuth2クライアントのID (optional)</param>
        /// <param name="clientSecret">OAuth2のクライアントシークレット。 OAuth2クライアントの &#x60;token_endpoint_auth_method&#x60; が &#x60;client_secret_post&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="clientCertification">OAuth2のクライアント証明書。 OAuth2クライアントの &#x60;token_endpoint_auth_method&#x60; が &#x60;tls_client_auth&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="redirectUri">認可後のリダイレクト先URI。 grant_typeが &#x60;authorization_code&#x60; の場合にだけ必要です。 (optional)</param>
        /// <param name="codeVerifier">PKCE code verifier.  * 使用可能な文字:  &#x60;[a-Z] / [0-9] / \\\&quot;-\\\&quot; / \\\&quot;.\\\&quot; / \\\&quot;_\\\&quot; / \\\&quot;~\\\&quot;&#x60;  * 長さ: 43文字以上、128文字以下 (optional)</param>
        /// <param name="code">認可コード (optional)</param>
        /// <returns>IssueToken200Response</returns>
        IssueToken200Response IssueToken(string grantType = default(string), string refreshToken = default(string), string tenantUuid = default(string), string username = default(string), string password = default(string), string clientId = default(string), string clientSecret = default(string), string clientCertification = default(string), string redirectUri = default(string), string codeVerifier = default(string), string code = default(string));

        /// <summary>
        /// Token Endpoint
        /// </summary>
        /// <remarks>
        /// OAuth2のアクセストークンを取得します。 [RFC6749:The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">グラントタイプ (optional)</param>
        /// <param name="refreshToken">認可時に発行されたリフレッシュトークン。grant_typeが &#x60;refresh_token&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="tenantUuid">テナントのUUID。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 grant_typeが &#x60;password&#x60; で、テナントUUIDを省略した場合は、デフォルトのテナントが使用されます。 (optional, default to &quot;00000000-0000-0000-0000-000000000000&quot;)</param>
        /// <param name="username">ユーザーの名前。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="password">パスワード。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="clientId">OAuth2クライアントのID (optional)</param>
        /// <param name="clientSecret">OAuth2のクライアントシークレット。 OAuth2クライアントの &#x60;token_endpoint_auth_method&#x60; が &#x60;client_secret_post&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="clientCertification">OAuth2のクライアント証明書。 OAuth2クライアントの &#x60;token_endpoint_auth_method&#x60; が &#x60;tls_client_auth&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="redirectUri">認可後のリダイレクト先URI。 grant_typeが &#x60;authorization_code&#x60; の場合にだけ必要です。 (optional)</param>
        /// <param name="codeVerifier">PKCE code verifier.  * 使用可能な文字:  &#x60;[a-Z] / [0-9] / \\\&quot;-\\\&quot; / \\\&quot;.\\\&quot; / \\\&quot;_\\\&quot; / \\\&quot;~\\\&quot;&#x60;  * 長さ: 43文字以上、128文字以下 (optional)</param>
        /// <param name="code">認可コード (optional)</param>
        /// <returns>ApiResponse of IssueToken200Response</returns>
        ApiResponse<IssueToken200Response> IssueTokenWithHttpInfo(string grantType = default(string), string refreshToken = default(string), string tenantUuid = default(string), string username = default(string), string password = default(string), string clientId = default(string), string clientSecret = default(string), string clientCertification = default(string), string redirectUri = default(string), string codeVerifier = default(string), string code = default(string));
        /// <summary>
        /// Authorization Endpoint
        /// </summary>
        /// <remarks>
        /// OAuth2認可エンドポイント。 [RFC6749:The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントID</param>
        /// <param name="responseType">OAuth2のresponse_type。 &#x60;code&#x60; のみサポートされています。</param>
        /// <param name="redirectUri">認可後のリダイレクト先URI</param>
        /// <param name="state">CSRF対策のためのstate</param>
        /// <param name="codeChallenge">PKCEコードチャレンジ。 &#x60;code_verifier&#x60; から計算したSHA-256ハッシュを、Base64 URLエンコードしたもの。 (optional)</param>
        /// <param name="codeChallengeMethod">PKCEコードチャレンジの方式。 &#x60;S256&#x60; （SHA-256）のみサポートされます。 (optional)</param>
        /// <returns></returns>
        void Oauth2Authorization(string clientId, string responseType, string redirectUri, string state, string codeChallenge = default(string), string codeChallengeMethod = default(string));

        /// <summary>
        /// Authorization Endpoint
        /// </summary>
        /// <remarks>
        /// OAuth2認可エンドポイント。 [RFC6749:The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントID</param>
        /// <param name="responseType">OAuth2のresponse_type。 &#x60;code&#x60; のみサポートされています。</param>
        /// <param name="redirectUri">認可後のリダイレクト先URI</param>
        /// <param name="state">CSRF対策のためのstate</param>
        /// <param name="codeChallenge">PKCEコードチャレンジ。 &#x60;code_verifier&#x60; から計算したSHA-256ハッシュを、Base64 URLエンコードしたもの。 (optional)</param>
        /// <param name="codeChallengeMethod">PKCEコードチャレンジの方式。 &#x60;S256&#x60; （SHA-256）のみサポートされます。 (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Oauth2AuthorizationWithHttpInfo(string clientId, string responseType, string redirectUri, string state, string codeChallenge = default(string), string codeChallengeMethod = default(string));
        /// <summary>
        /// Revoke Token
        /// </summary>
        /// <remarks>
        /// トークンを無効化します。 このエンドポイントをコールしてからトークンが無効化されるまで、通常数秒程度かかります。 [RFC7009:OAuth 2.0 Token Revocation](https://tools.ietf.org/html/rfc7009)
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントID</param>
        /// <param name="tokenTypeHint">OAuth2トークンタイプについてのヒント (optional, default to refresh_token)</param>
        /// <param name="token">無効化したいリフレッシュトークンまたはアクセストークン。 指定を省略した場合、サーバーは、cookieの &#x60;_bearer_token&#x60; に指定されたアクセストークン、または、Authorizationヘッダーに指定されたアクセストークン（ &#x60;Bearer&#x60; トークン）を無効化します。 (optional)</param>
        /// <returns></returns>
        void ReovokeToken(string clientId, string tokenTypeHint = default(string), string token = default(string));

        /// <summary>
        /// Revoke Token
        /// </summary>
        /// <remarks>
        /// トークンを無効化します。 このエンドポイントをコールしてからトークンが無効化されるまで、通常数秒程度かかります。 [RFC7009:OAuth 2.0 Token Revocation](https://tools.ietf.org/html/rfc7009)
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントID</param>
        /// <param name="tokenTypeHint">OAuth2トークンタイプについてのヒント (optional, default to refresh_token)</param>
        /// <param name="token">無効化したいリフレッシュトークンまたはアクセストークン。 指定を省略した場合、サーバーは、cookieの &#x60;_bearer_token&#x60; に指定されたアクセストークン、または、Authorizationヘッダーに指定されたアクセストークン（ &#x60;Bearer&#x60; トークン）を無効化します。 (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReovokeTokenWithHttpInfo(string clientId, string tokenTypeHint = default(string), string token = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthOAuth2ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List JSON Web Keys
        /// </summary>
        /// <remarks>
        /// JSON Web Keysのリストを取得します。 [RFC7517:JSON Web Key](https://tools.ietf.org/html/rfc7517)
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2JWKs</returns>
        System.Threading.Tasks.Task<OAuth2JWKs> AuthOauth2JwksGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List JSON Web Keys
        /// </summary>
        /// <remarks>
        /// JSON Web Keysのリストを取得します。 [RFC7517:JSON Web Key](https://tools.ietf.org/html/rfc7517)
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2JWKs)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2JWKs>> AuthOauth2JwksGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Token Endpoint
        /// </summary>
        /// <remarks>
        /// OAuth2のアクセストークンを取得します。 [RFC6749:The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">グラントタイプ (optional)</param>
        /// <param name="refreshToken">認可時に発行されたリフレッシュトークン。grant_typeが &#x60;refresh_token&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="tenantUuid">テナントのUUID。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 grant_typeが &#x60;password&#x60; で、テナントUUIDを省略した場合は、デフォルトのテナントが使用されます。 (optional, default to &quot;00000000-0000-0000-0000-000000000000&quot;)</param>
        /// <param name="username">ユーザーの名前。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="password">パスワード。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="clientId">OAuth2クライアントのID (optional)</param>
        /// <param name="clientSecret">OAuth2のクライアントシークレット。 OAuth2クライアントの &#x60;token_endpoint_auth_method&#x60; が &#x60;client_secret_post&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="clientCertification">OAuth2のクライアント証明書。 OAuth2クライアントの &#x60;token_endpoint_auth_method&#x60; が &#x60;tls_client_auth&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="redirectUri">認可後のリダイレクト先URI。 grant_typeが &#x60;authorization_code&#x60; の場合にだけ必要です。 (optional)</param>
        /// <param name="codeVerifier">PKCE code verifier.  * 使用可能な文字:  &#x60;[a-Z] / [0-9] / \\\&quot;-\\\&quot; / \\\&quot;.\\\&quot; / \\\&quot;_\\\&quot; / \\\&quot;~\\\&quot;&#x60;  * 長さ: 43文字以上、128文字以下 (optional)</param>
        /// <param name="code">認可コード (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IssueToken200Response</returns>
        System.Threading.Tasks.Task<IssueToken200Response> IssueTokenAsync(string grantType = default(string), string refreshToken = default(string), string tenantUuid = default(string), string username = default(string), string password = default(string), string clientId = default(string), string clientSecret = default(string), string clientCertification = default(string), string redirectUri = default(string), string codeVerifier = default(string), string code = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Token Endpoint
        /// </summary>
        /// <remarks>
        /// OAuth2のアクセストークンを取得します。 [RFC6749:The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">グラントタイプ (optional)</param>
        /// <param name="refreshToken">認可時に発行されたリフレッシュトークン。grant_typeが &#x60;refresh_token&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="tenantUuid">テナントのUUID。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 grant_typeが &#x60;password&#x60; で、テナントUUIDを省略した場合は、デフォルトのテナントが使用されます。 (optional, default to &quot;00000000-0000-0000-0000-000000000000&quot;)</param>
        /// <param name="username">ユーザーの名前。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="password">パスワード。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="clientId">OAuth2クライアントのID (optional)</param>
        /// <param name="clientSecret">OAuth2のクライアントシークレット。 OAuth2クライアントの &#x60;token_endpoint_auth_method&#x60; が &#x60;client_secret_post&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="clientCertification">OAuth2のクライアント証明書。 OAuth2クライアントの &#x60;token_endpoint_auth_method&#x60; が &#x60;tls_client_auth&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="redirectUri">認可後のリダイレクト先URI。 grant_typeが &#x60;authorization_code&#x60; の場合にだけ必要です。 (optional)</param>
        /// <param name="codeVerifier">PKCE code verifier.  * 使用可能な文字:  &#x60;[a-Z] / [0-9] / \\\&quot;-\\\&quot; / \\\&quot;.\\\&quot; / \\\&quot;_\\\&quot; / \\\&quot;~\\\&quot;&#x60;  * 長さ: 43文字以上、128文字以下 (optional)</param>
        /// <param name="code">認可コード (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IssueToken200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssueToken200Response>> IssueTokenWithHttpInfoAsync(string grantType = default(string), string refreshToken = default(string), string tenantUuid = default(string), string username = default(string), string password = default(string), string clientId = default(string), string clientSecret = default(string), string clientCertification = default(string), string redirectUri = default(string), string codeVerifier = default(string), string code = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Authorization Endpoint
        /// </summary>
        /// <remarks>
        /// OAuth2認可エンドポイント。 [RFC6749:The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントID</param>
        /// <param name="responseType">OAuth2のresponse_type。 &#x60;code&#x60; のみサポートされています。</param>
        /// <param name="redirectUri">認可後のリダイレクト先URI</param>
        /// <param name="state">CSRF対策のためのstate</param>
        /// <param name="codeChallenge">PKCEコードチャレンジ。 &#x60;code_verifier&#x60; から計算したSHA-256ハッシュを、Base64 URLエンコードしたもの。 (optional)</param>
        /// <param name="codeChallengeMethod">PKCEコードチャレンジの方式。 &#x60;S256&#x60; （SHA-256）のみサポートされます。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Oauth2AuthorizationAsync(string clientId, string responseType, string redirectUri, string state, string codeChallenge = default(string), string codeChallengeMethod = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Authorization Endpoint
        /// </summary>
        /// <remarks>
        /// OAuth2認可エンドポイント。 [RFC6749:The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントID</param>
        /// <param name="responseType">OAuth2のresponse_type。 &#x60;code&#x60; のみサポートされています。</param>
        /// <param name="redirectUri">認可後のリダイレクト先URI</param>
        /// <param name="state">CSRF対策のためのstate</param>
        /// <param name="codeChallenge">PKCEコードチャレンジ。 &#x60;code_verifier&#x60; から計算したSHA-256ハッシュを、Base64 URLエンコードしたもの。 (optional)</param>
        /// <param name="codeChallengeMethod">PKCEコードチャレンジの方式。 &#x60;S256&#x60; （SHA-256）のみサポートされます。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Oauth2AuthorizationWithHttpInfoAsync(string clientId, string responseType, string redirectUri, string state, string codeChallenge = default(string), string codeChallengeMethod = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Revoke Token
        /// </summary>
        /// <remarks>
        /// トークンを無効化します。 このエンドポイントをコールしてからトークンが無効化されるまで、通常数秒程度かかります。 [RFC7009:OAuth 2.0 Token Revocation](https://tools.ietf.org/html/rfc7009)
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントID</param>
        /// <param name="tokenTypeHint">OAuth2トークンタイプについてのヒント (optional, default to refresh_token)</param>
        /// <param name="token">無効化したいリフレッシュトークンまたはアクセストークン。 指定を省略した場合、サーバーは、cookieの &#x60;_bearer_token&#x60; に指定されたアクセストークン、または、Authorizationヘッダーに指定されたアクセストークン（ &#x60;Bearer&#x60; トークン）を無効化します。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReovokeTokenAsync(string clientId, string tokenTypeHint = default(string), string token = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Revoke Token
        /// </summary>
        /// <remarks>
        /// トークンを無効化します。 このエンドポイントをコールしてからトークンが無効化されるまで、通常数秒程度かかります。 [RFC7009:OAuth 2.0 Token Revocation](https://tools.ietf.org/html/rfc7009)
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントID</param>
        /// <param name="tokenTypeHint">OAuth2トークンタイプについてのヒント (optional, default to refresh_token)</param>
        /// <param name="token">無効化したいリフレッシュトークンまたはアクセストークン。 指定を省略した場合、サーバーは、cookieの &#x60;_bearer_token&#x60; に指定されたアクセストークン、または、Authorizationヘッダーに指定されたアクセストークン（ &#x60;Bearer&#x60; トークン）を無効化します。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReovokeTokenWithHttpInfoAsync(string clientId, string tokenTypeHint = default(string), string token = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthOAuth2Api : IAuthOAuth2ApiSync, IAuthOAuth2ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthOAuth2Api : IDisposable, IAuthOAuth2Api
    {
        private intdash.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthOAuth2Api"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AuthOAuth2Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthOAuth2Api"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AuthOAuth2Api(string basePath)
        {
            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                new intdash.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new intdash.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthOAuth2Api"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AuthOAuth2Api(intdash.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new intdash.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthOAuth2Api"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthOAuth2Api(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthOAuth2Api"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthOAuth2Api(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                new intdash.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new intdash.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthOAuth2Api"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthOAuth2Api(HttpClient client, intdash.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new intdash.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthOAuth2Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AuthOAuth2Api(intdash.Client.ISynchronousClient client, intdash.Client.IAsynchronousClient asyncClient, intdash.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public intdash.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public intdash.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public intdash.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public intdash.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public intdash.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List JSON Web Keys JSON Web Keysのリストを取得します。 [RFC7517:JSON Web Key](https://tools.ietf.org/html/rfc7517)
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OAuth2JWKs</returns>
        public OAuth2JWKs AuthOauth2JwksGet()
        {
            intdash.Client.ApiResponse<OAuth2JWKs> localVarResponse = AuthOauth2JwksGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List JSON Web Keys JSON Web Keysのリストを取得します。 [RFC7517:JSON Web Key](https://tools.ietf.org/html/rfc7517)
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OAuth2JWKs</returns>
        public intdash.Client.ApiResponse<OAuth2JWKs> AuthOauth2JwksGetWithHttpInfo()
        {
            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/jwk-set+json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OAuth2JWKs>("/auth/oauth2/jwks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthOauth2JwksGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List JSON Web Keys JSON Web Keysのリストを取得します。 [RFC7517:JSON Web Key](https://tools.ietf.org/html/rfc7517)
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2JWKs</returns>
        public async System.Threading.Tasks.Task<OAuth2JWKs> AuthOauth2JwksGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<OAuth2JWKs> localVarResponse = await AuthOauth2JwksGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List JSON Web Keys JSON Web Keysのリストを取得します。 [RFC7517:JSON Web Key](https://tools.ietf.org/html/rfc7517)
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2JWKs)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<OAuth2JWKs>> AuthOauth2JwksGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/jwk-set+json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OAuth2JWKs>("/auth/oauth2/jwks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthOauth2JwksGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Token Endpoint OAuth2のアクセストークンを取得します。 [RFC6749:The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">グラントタイプ (optional)</param>
        /// <param name="refreshToken">認可時に発行されたリフレッシュトークン。grant_typeが &#x60;refresh_token&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="tenantUuid">テナントのUUID。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 grant_typeが &#x60;password&#x60; で、テナントUUIDを省略した場合は、デフォルトのテナントが使用されます。 (optional, default to &quot;00000000-0000-0000-0000-000000000000&quot;)</param>
        /// <param name="username">ユーザーの名前。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="password">パスワード。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="clientId">OAuth2クライアントのID (optional)</param>
        /// <param name="clientSecret">OAuth2のクライアントシークレット。 OAuth2クライアントの &#x60;token_endpoint_auth_method&#x60; が &#x60;client_secret_post&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="clientCertification">OAuth2のクライアント証明書。 OAuth2クライアントの &#x60;token_endpoint_auth_method&#x60; が &#x60;tls_client_auth&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="redirectUri">認可後のリダイレクト先URI。 grant_typeが &#x60;authorization_code&#x60; の場合にだけ必要です。 (optional)</param>
        /// <param name="codeVerifier">PKCE code verifier.  * 使用可能な文字:  &#x60;[a-Z] / [0-9] / \\\&quot;-\\\&quot; / \\\&quot;.\\\&quot; / \\\&quot;_\\\&quot; / \\\&quot;~\\\&quot;&#x60;  * 長さ: 43文字以上、128文字以下 (optional)</param>
        /// <param name="code">認可コード (optional)</param>
        /// <returns>IssueToken200Response</returns>
        public IssueToken200Response IssueToken(string grantType = default(string), string refreshToken = default(string), string tenantUuid = default(string), string username = default(string), string password = default(string), string clientId = default(string), string clientSecret = default(string), string clientCertification = default(string), string redirectUri = default(string), string codeVerifier = default(string), string code = default(string))
        {
            intdash.Client.ApiResponse<IssueToken200Response> localVarResponse = IssueTokenWithHttpInfo(grantType, refreshToken, tenantUuid, username, password, clientId, clientSecret, clientCertification, redirectUri, codeVerifier, code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Token Endpoint OAuth2のアクセストークンを取得します。 [RFC6749:The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">グラントタイプ (optional)</param>
        /// <param name="refreshToken">認可時に発行されたリフレッシュトークン。grant_typeが &#x60;refresh_token&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="tenantUuid">テナントのUUID。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 grant_typeが &#x60;password&#x60; で、テナントUUIDを省略した場合は、デフォルトのテナントが使用されます。 (optional, default to &quot;00000000-0000-0000-0000-000000000000&quot;)</param>
        /// <param name="username">ユーザーの名前。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="password">パスワード。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="clientId">OAuth2クライアントのID (optional)</param>
        /// <param name="clientSecret">OAuth2のクライアントシークレット。 OAuth2クライアントの &#x60;token_endpoint_auth_method&#x60; が &#x60;client_secret_post&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="clientCertification">OAuth2のクライアント証明書。 OAuth2クライアントの &#x60;token_endpoint_auth_method&#x60; が &#x60;tls_client_auth&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="redirectUri">認可後のリダイレクト先URI。 grant_typeが &#x60;authorization_code&#x60; の場合にだけ必要です。 (optional)</param>
        /// <param name="codeVerifier">PKCE code verifier.  * 使用可能な文字:  &#x60;[a-Z] / [0-9] / \\\&quot;-\\\&quot; / \\\&quot;.\\\&quot; / \\\&quot;_\\\&quot; / \\\&quot;~\\\&quot;&#x60;  * 長さ: 43文字以上、128文字以下 (optional)</param>
        /// <param name="code">認可コード (optional)</param>
        /// <returns>ApiResponse of IssueToken200Response</returns>
        public intdash.Client.ApiResponse<IssueToken200Response> IssueTokenWithHttpInfo(string grantType = default(string), string refreshToken = default(string), string tenantUuid = default(string), string username = default(string), string password = default(string), string clientId = default(string), string clientSecret = default(string), string clientCertification = default(string), string redirectUri = default(string), string codeVerifier = default(string), string code = default(string))
        {
            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (grantType != null)
            {
                localVarRequestOptions.FormParameters.Add("grant_type", intdash.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            }
            if (refreshToken != null)
            {
                localVarRequestOptions.FormParameters.Add("refresh_token", intdash.Client.ClientUtils.ParameterToString(refreshToken)); // form parameter
            }
            if (tenantUuid != null)
            {
                localVarRequestOptions.FormParameters.Add("tenant_uuid", intdash.Client.ClientUtils.ParameterToString(tenantUuid)); // form parameter
            }
            if (username != null)
            {
                localVarRequestOptions.FormParameters.Add("username", intdash.Client.ClientUtils.ParameterToString(username)); // form parameter
            }
            if (password != null)
            {
                localVarRequestOptions.FormParameters.Add("password", intdash.Client.ClientUtils.ParameterToString(password)); // form parameter
            }
            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", intdash.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", intdash.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }
            if (clientCertification != null)
            {
                localVarRequestOptions.FormParameters.Add("client_certification", intdash.Client.ClientUtils.ParameterToString(clientCertification)); // form parameter
            }
            if (redirectUri != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_uri", intdash.Client.ClientUtils.ParameterToString(redirectUri)); // form parameter
            }
            if (codeVerifier != null)
            {
                localVarRequestOptions.FormParameters.Add("code_verifier", intdash.Client.ClientUtils.ParameterToString(codeVerifier)); // form parameter
            }
            if (code != null)
            {
                localVarRequestOptions.FormParameters.Add("code", intdash.Client.ClientUtils.ParameterToString(code)); // form parameter
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IssueToken200Response>("/auth/oauth2/token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssueToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Token Endpoint OAuth2のアクセストークンを取得します。 [RFC6749:The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">グラントタイプ (optional)</param>
        /// <param name="refreshToken">認可時に発行されたリフレッシュトークン。grant_typeが &#x60;refresh_token&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="tenantUuid">テナントのUUID。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 grant_typeが &#x60;password&#x60; で、テナントUUIDを省略した場合は、デフォルトのテナントが使用されます。 (optional, default to &quot;00000000-0000-0000-0000-000000000000&quot;)</param>
        /// <param name="username">ユーザーの名前。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="password">パスワード。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="clientId">OAuth2クライアントのID (optional)</param>
        /// <param name="clientSecret">OAuth2のクライアントシークレット。 OAuth2クライアントの &#x60;token_endpoint_auth_method&#x60; が &#x60;client_secret_post&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="clientCertification">OAuth2のクライアント証明書。 OAuth2クライアントの &#x60;token_endpoint_auth_method&#x60; が &#x60;tls_client_auth&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="redirectUri">認可後のリダイレクト先URI。 grant_typeが &#x60;authorization_code&#x60; の場合にだけ必要です。 (optional)</param>
        /// <param name="codeVerifier">PKCE code verifier.  * 使用可能な文字:  &#x60;[a-Z] / [0-9] / \\\&quot;-\\\&quot; / \\\&quot;.\\\&quot; / \\\&quot;_\\\&quot; / \\\&quot;~\\\&quot;&#x60;  * 長さ: 43文字以上、128文字以下 (optional)</param>
        /// <param name="code">認可コード (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IssueToken200Response</returns>
        public async System.Threading.Tasks.Task<IssueToken200Response> IssueTokenAsync(string grantType = default(string), string refreshToken = default(string), string tenantUuid = default(string), string username = default(string), string password = default(string), string clientId = default(string), string clientSecret = default(string), string clientCertification = default(string), string redirectUri = default(string), string codeVerifier = default(string), string code = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<IssueToken200Response> localVarResponse = await IssueTokenWithHttpInfoAsync(grantType, refreshToken, tenantUuid, username, password, clientId, clientSecret, clientCertification, redirectUri, codeVerifier, code, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Token Endpoint OAuth2のアクセストークンを取得します。 [RFC6749:The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">グラントタイプ (optional)</param>
        /// <param name="refreshToken">認可時に発行されたリフレッシュトークン。grant_typeが &#x60;refresh_token&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="tenantUuid">テナントのUUID。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 grant_typeが &#x60;password&#x60; で、テナントUUIDを省略した場合は、デフォルトのテナントが使用されます。 (optional, default to &quot;00000000-0000-0000-0000-000000000000&quot;)</param>
        /// <param name="username">ユーザーの名前。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="password">パスワード。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="clientId">OAuth2クライアントのID (optional)</param>
        /// <param name="clientSecret">OAuth2のクライアントシークレット。 OAuth2クライアントの &#x60;token_endpoint_auth_method&#x60; が &#x60;client_secret_post&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="clientCertification">OAuth2のクライアント証明書。 OAuth2クライアントの &#x60;token_endpoint_auth_method&#x60; が &#x60;tls_client_auth&#x60; の場合にだけ指定します。 (optional)</param>
        /// <param name="redirectUri">認可後のリダイレクト先URI。 grant_typeが &#x60;authorization_code&#x60; の場合にだけ必要です。 (optional)</param>
        /// <param name="codeVerifier">PKCE code verifier.  * 使用可能な文字:  &#x60;[a-Z] / [0-9] / \\\&quot;-\\\&quot; / \\\&quot;.\\\&quot; / \\\&quot;_\\\&quot; / \\\&quot;~\\\&quot;&#x60;  * 長さ: 43文字以上、128文字以下 (optional)</param>
        /// <param name="code">認可コード (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IssueToken200Response)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<IssueToken200Response>> IssueTokenWithHttpInfoAsync(string grantType = default(string), string refreshToken = default(string), string tenantUuid = default(string), string username = default(string), string password = default(string), string clientId = default(string), string clientSecret = default(string), string clientCertification = default(string), string redirectUri = default(string), string codeVerifier = default(string), string code = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (grantType != null)
            {
                localVarRequestOptions.FormParameters.Add("grant_type", intdash.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            }
            if (refreshToken != null)
            {
                localVarRequestOptions.FormParameters.Add("refresh_token", intdash.Client.ClientUtils.ParameterToString(refreshToken)); // form parameter
            }
            if (tenantUuid != null)
            {
                localVarRequestOptions.FormParameters.Add("tenant_uuid", intdash.Client.ClientUtils.ParameterToString(tenantUuid)); // form parameter
            }
            if (username != null)
            {
                localVarRequestOptions.FormParameters.Add("username", intdash.Client.ClientUtils.ParameterToString(username)); // form parameter
            }
            if (password != null)
            {
                localVarRequestOptions.FormParameters.Add("password", intdash.Client.ClientUtils.ParameterToString(password)); // form parameter
            }
            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", intdash.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", intdash.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }
            if (clientCertification != null)
            {
                localVarRequestOptions.FormParameters.Add("client_certification", intdash.Client.ClientUtils.ParameterToString(clientCertification)); // form parameter
            }
            if (redirectUri != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_uri", intdash.Client.ClientUtils.ParameterToString(redirectUri)); // form parameter
            }
            if (codeVerifier != null)
            {
                localVarRequestOptions.FormParameters.Add("code_verifier", intdash.Client.ClientUtils.ParameterToString(codeVerifier)); // form parameter
            }
            if (code != null)
            {
                localVarRequestOptions.FormParameters.Add("code", intdash.Client.ClientUtils.ParameterToString(code)); // form parameter
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<IssueToken200Response>("/auth/oauth2/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssueToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authorization Endpoint OAuth2認可エンドポイント。 [RFC6749:The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントID</param>
        /// <param name="responseType">OAuth2のresponse_type。 &#x60;code&#x60; のみサポートされています。</param>
        /// <param name="redirectUri">認可後のリダイレクト先URI</param>
        /// <param name="state">CSRF対策のためのstate</param>
        /// <param name="codeChallenge">PKCEコードチャレンジ。 &#x60;code_verifier&#x60; から計算したSHA-256ハッシュを、Base64 URLエンコードしたもの。 (optional)</param>
        /// <param name="codeChallengeMethod">PKCEコードチャレンジの方式。 &#x60;S256&#x60; （SHA-256）のみサポートされます。 (optional)</param>
        /// <returns></returns>
        public void Oauth2Authorization(string clientId, string responseType, string redirectUri, string state, string codeChallenge = default(string), string codeChallengeMethod = default(string))
        {
            Oauth2AuthorizationWithHttpInfo(clientId, responseType, redirectUri, state, codeChallenge, codeChallengeMethod);
        }

        /// <summary>
        /// Authorization Endpoint OAuth2認可エンドポイント。 [RFC6749:The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントID</param>
        /// <param name="responseType">OAuth2のresponse_type。 &#x60;code&#x60; のみサポートされています。</param>
        /// <param name="redirectUri">認可後のリダイレクト先URI</param>
        /// <param name="state">CSRF対策のためのstate</param>
        /// <param name="codeChallenge">PKCEコードチャレンジ。 &#x60;code_verifier&#x60; から計算したSHA-256ハッシュを、Base64 URLエンコードしたもの。 (optional)</param>
        /// <param name="codeChallengeMethod">PKCEコードチャレンジの方式。 &#x60;S256&#x60; （SHA-256）のみサポートされます。 (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> Oauth2AuthorizationWithHttpInfo(string clientId, string responseType, string redirectUri, string state, string codeChallenge = default(string), string codeChallengeMethod = default(string))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'clientId' when calling AuthOAuth2Api->Oauth2Authorization");

            // verify the required parameter 'responseType' is set
            if (responseType == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'responseType' when calling AuthOAuth2Api->Oauth2Authorization");

            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'redirectUri' when calling AuthOAuth2Api->Oauth2Authorization");

            // verify the required parameter 'state' is set
            if (state == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'state' when calling AuthOAuth2Api->Oauth2Authorization");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "client_id", clientId));
            localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "response_type", responseType));
            localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "redirect_uri", redirectUri));
            localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            if (codeChallenge != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "code_challenge", codeChallenge));
            }
            if (codeChallengeMethod != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "code_challenge_method", codeChallengeMethod));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/oauth2/authorization", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Oauth2Authorization", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authorization Endpoint OAuth2認可エンドポイント。 [RFC6749:The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントID</param>
        /// <param name="responseType">OAuth2のresponse_type。 &#x60;code&#x60; のみサポートされています。</param>
        /// <param name="redirectUri">認可後のリダイレクト先URI</param>
        /// <param name="state">CSRF対策のためのstate</param>
        /// <param name="codeChallenge">PKCEコードチャレンジ。 &#x60;code_verifier&#x60; から計算したSHA-256ハッシュを、Base64 URLエンコードしたもの。 (optional)</param>
        /// <param name="codeChallengeMethod">PKCEコードチャレンジの方式。 &#x60;S256&#x60; （SHA-256）のみサポートされます。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Oauth2AuthorizationAsync(string clientId, string responseType, string redirectUri, string state, string codeChallenge = default(string), string codeChallengeMethod = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await Oauth2AuthorizationWithHttpInfoAsync(clientId, responseType, redirectUri, state, codeChallenge, codeChallengeMethod, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Authorization Endpoint OAuth2認可エンドポイント。 [RFC6749:The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントID</param>
        /// <param name="responseType">OAuth2のresponse_type。 &#x60;code&#x60; のみサポートされています。</param>
        /// <param name="redirectUri">認可後のリダイレクト先URI</param>
        /// <param name="state">CSRF対策のためのstate</param>
        /// <param name="codeChallenge">PKCEコードチャレンジ。 &#x60;code_verifier&#x60; から計算したSHA-256ハッシュを、Base64 URLエンコードしたもの。 (optional)</param>
        /// <param name="codeChallengeMethod">PKCEコードチャレンジの方式。 &#x60;S256&#x60; （SHA-256）のみサポートされます。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> Oauth2AuthorizationWithHttpInfoAsync(string clientId, string responseType, string redirectUri, string state, string codeChallenge = default(string), string codeChallengeMethod = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'clientId' when calling AuthOAuth2Api->Oauth2Authorization");

            // verify the required parameter 'responseType' is set
            if (responseType == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'responseType' when calling AuthOAuth2Api->Oauth2Authorization");

            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'redirectUri' when calling AuthOAuth2Api->Oauth2Authorization");

            // verify the required parameter 'state' is set
            if (state == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'state' when calling AuthOAuth2Api->Oauth2Authorization");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "client_id", clientId));
            localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "response_type", responseType));
            localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "redirect_uri", redirectUri));
            localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            if (codeChallenge != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "code_challenge", codeChallenge));
            }
            if (codeChallengeMethod != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "code_challenge_method", codeChallengeMethod));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/oauth2/authorization", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Oauth2Authorization", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke Token トークンを無効化します。 このエンドポイントをコールしてからトークンが無効化されるまで、通常数秒程度かかります。 [RFC7009:OAuth 2.0 Token Revocation](https://tools.ietf.org/html/rfc7009)
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントID</param>
        /// <param name="tokenTypeHint">OAuth2トークンタイプについてのヒント (optional, default to refresh_token)</param>
        /// <param name="token">無効化したいリフレッシュトークンまたはアクセストークン。 指定を省略した場合、サーバーは、cookieの &#x60;_bearer_token&#x60; に指定されたアクセストークン、または、Authorizationヘッダーに指定されたアクセストークン（ &#x60;Bearer&#x60; トークン）を無効化します。 (optional)</param>
        /// <returns></returns>
        public void ReovokeToken(string clientId, string tokenTypeHint = default(string), string token = default(string))
        {
            ReovokeTokenWithHttpInfo(clientId, tokenTypeHint, token);
        }

        /// <summary>
        /// Revoke Token トークンを無効化します。 このエンドポイントをコールしてからトークンが無効化されるまで、通常数秒程度かかります。 [RFC7009:OAuth 2.0 Token Revocation](https://tools.ietf.org/html/rfc7009)
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントID</param>
        /// <param name="tokenTypeHint">OAuth2トークンタイプについてのヒント (optional, default to refresh_token)</param>
        /// <param name="token">無効化したいリフレッシュトークンまたはアクセストークン。 指定を省略した場合、サーバーは、cookieの &#x60;_bearer_token&#x60; に指定されたアクセストークン、または、Authorizationヘッダーに指定されたアクセストークン（ &#x60;Bearer&#x60; トークン）を無効化します。 (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> ReovokeTokenWithHttpInfo(string clientId, string tokenTypeHint = default(string), string token = default(string))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'clientId' when calling AuthOAuth2Api->ReovokeToken");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("client_id", intdash.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            if (tokenTypeHint != null)
            {
                localVarRequestOptions.FormParameters.Add("token_type_hint", intdash.Client.ClientUtils.ParameterToString(tokenTypeHint)); // form parameter
            }
            if (token != null)
            {
                localVarRequestOptions.FormParameters.Add("token", intdash.Client.ClientUtils.ParameterToString(token)); // form parameter
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/oauth2/revocation", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReovokeToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke Token トークンを無効化します。 このエンドポイントをコールしてからトークンが無効化されるまで、通常数秒程度かかります。 [RFC7009:OAuth 2.0 Token Revocation](https://tools.ietf.org/html/rfc7009)
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントID</param>
        /// <param name="tokenTypeHint">OAuth2トークンタイプについてのヒント (optional, default to refresh_token)</param>
        /// <param name="token">無効化したいリフレッシュトークンまたはアクセストークン。 指定を省略した場合、サーバーは、cookieの &#x60;_bearer_token&#x60; に指定されたアクセストークン、または、Authorizationヘッダーに指定されたアクセストークン（ &#x60;Bearer&#x60; トークン）を無効化します。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReovokeTokenAsync(string clientId, string tokenTypeHint = default(string), string token = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ReovokeTokenWithHttpInfoAsync(clientId, tokenTypeHint, token, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Revoke Token トークンを無効化します。 このエンドポイントをコールしてからトークンが無効化されるまで、通常数秒程度かかります。 [RFC7009:OAuth 2.0 Token Revocation](https://tools.ietf.org/html/rfc7009)
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントID</param>
        /// <param name="tokenTypeHint">OAuth2トークンタイプについてのヒント (optional, default to refresh_token)</param>
        /// <param name="token">無効化したいリフレッシュトークンまたはアクセストークン。 指定を省略した場合、サーバーは、cookieの &#x60;_bearer_token&#x60; に指定されたアクセストークン、または、Authorizationヘッダーに指定されたアクセストークン（ &#x60;Bearer&#x60; トークン）を無効化します。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> ReovokeTokenWithHttpInfoAsync(string clientId, string tokenTypeHint = default(string), string token = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'clientId' when calling AuthOAuth2Api->ReovokeToken");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("client_id", intdash.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            if (tokenTypeHint != null)
            {
                localVarRequestOptions.FormParameters.Add("token_type_hint", intdash.Client.ClientUtils.ParameterToString(tokenTypeHint)); // form parameter
            }
            if (token != null)
            {
                localVarRequestOptions.FormParameters.Add("token", intdash.Client.ClientUtils.ParameterToString(token)); // form parameter
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/oauth2/revocation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReovokeToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
