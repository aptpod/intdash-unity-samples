/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using intdash.Client;
using intdash.Model;

namespace intdash.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeasMeasurementMarkersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Measurement Marker by Measurement UUID
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerPostRequest"> (optional)</param>
        /// <returns>MeasurementMarker</returns>
        [Obsolete]
        MeasurementMarker CreateMeasurementMarker(string measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest = default(MeasurementMarkerPostRequest));

        /// <summary>
        /// Create Measurement Marker by Measurement UUID
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerPostRequest"> (optional)</param>
        /// <returns>ApiResponse of MeasurementMarker</returns>
        [Obsolete]
        ApiResponse<MeasurementMarker> CreateMeasurementMarkerWithHttpInfo(string measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest = default(MeasurementMarkerPostRequest));
        /// <summary>
        /// Create Project Measurement Marker by Measurement UUID
        /// </summary>
        /// <remarks>
        /// 計測マーカーを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerPostRequest"> (optional)</param>
        /// <returns>MeasurementMarker</returns>
        MeasurementMarker CreateProjectMeasurementMarker(string projectUuid, string measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest = default(MeasurementMarkerPostRequest));

        /// <summary>
        /// Create Project Measurement Marker by Measurement UUID
        /// </summary>
        /// <remarks>
        /// 計測マーカーを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerPostRequest"> (optional)</param>
        /// <returns>ApiResponse of MeasurementMarker</returns>
        ApiResponse<MeasurementMarker> CreateProjectMeasurementMarkerWithHttpInfo(string projectUuid, string measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest = default(MeasurementMarkerPostRequest));
        /// <summary>
        /// Delete Measurement Marker
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns></returns>
        [Obsolete]
        void DeleteMeasurementMarker(string measurementMarkerUuid);

        /// <summary>
        /// Delete Measurement Marker
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> DeleteMeasurementMarkerWithHttpInfo(string measurementMarkerUuid);
        /// <summary>
        /// Delete Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns></returns>
        [Obsolete]
        void DeleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(string measurementUuid, string measurementMarkerUuid);

        /// <summary>
        /// Delete Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> DeleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(string measurementUuid, string measurementMarkerUuid);
        /// <summary>
        /// Delete Measurement Markers by Measurement UUID
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns></returns>
        [Obsolete]
        void DeleteMeasurementMarkers(string measurementUuid);

        /// <summary>
        /// Delete Measurement Markers by Measurement UUID
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> DeleteMeasurementMarkersWithHttpInfo(string measurementUuid);
        /// <summary>
        /// Delete Project Measurement Marker
        /// </summary>
        /// <remarks>
        /// 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns></returns>
        void DeleteProjectMeasurementMarker(string projectUuid, string measurementMarkerUuid);

        /// <summary>
        /// Delete Project Measurement Marker
        /// </summary>
        /// <remarks>
        /// 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectMeasurementMarkerWithHttpInfo(string projectUuid, string measurementMarkerUuid);
        /// <summary>
        /// Delete Project Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns></returns>
        void DeleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(string projectUuid, string measurementUuid, string measurementMarkerUuid);

        /// <summary>
        /// Delete Project Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(string projectUuid, string measurementUuid, string measurementMarkerUuid);
        /// <summary>
        /// Delete Project Measurement Markers by Measurement UUID
        /// </summary>
        /// <remarks>
        /// 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns></returns>
        void DeleteProjectMeasurementMarkers(string projectUuid, string measurementUuid);

        /// <summary>
        /// Delete Project Measurement Markers by Measurement UUID
        /// </summary>
        /// <remarks>
        /// 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectMeasurementMarkersWithHttpInfo(string projectUuid, string measurementUuid);
        /// <summary>
        /// Get Measurement Marker
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>MeasurementMarker</returns>
        [Obsolete]
        MeasurementMarker GetMeasurementMarker(string measurementMarkerUuid);

        /// <summary>
        /// Get Measurement Marker
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>ApiResponse of MeasurementMarker</returns>
        [Obsolete]
        ApiResponse<MeasurementMarker> GetMeasurementMarkerWithHttpInfo(string measurementMarkerUuid);
        /// <summary>
        /// Get Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>MeasurementMarker</returns>
        [Obsolete]
        MeasurementMarker GetMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(string measurementUuid, string measurementMarkerUuid);

        /// <summary>
        /// Get Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>ApiResponse of MeasurementMarker</returns>
        [Obsolete]
        ApiResponse<MeasurementMarker> GetMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(string measurementUuid, string measurementMarkerUuid);
        /// <summary>
        /// List Measurement Markers by Measurement UUID
        /// </summary>
        /// <remarks>
        /// (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>MeasurementMarkersWithoutPage</returns>
        [Obsolete]
        MeasurementMarkersWithoutPage GetMeasurementMarkersWithMeasurementUUID(string measurementUuid);

        /// <summary>
        /// List Measurement Markers by Measurement UUID
        /// </summary>
        /// <remarks>
        /// (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of MeasurementMarkersWithoutPage</returns>
        [Obsolete]
        ApiResponse<MeasurementMarkersWithoutPage> GetMeasurementMarkersWithMeasurementUUIDWithHttpInfo(string measurementUuid);
        /// <summary>
        /// Get Project Measurement Marker
        /// </summary>
        /// <remarks>
        /// 計測マーカーを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>MeasurementMarker</returns>
        MeasurementMarker GetProjectMeasurementMarker(string projectUuid, string measurementMarkerUuid);

        /// <summary>
        /// Get Project Measurement Marker
        /// </summary>
        /// <remarks>
        /// 計測マーカーを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>ApiResponse of MeasurementMarker</returns>
        ApiResponse<MeasurementMarker> GetProjectMeasurementMarkerWithHttpInfo(string projectUuid, string measurementMarkerUuid);
        /// <summary>
        /// Get Project Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>MeasurementMarker</returns>
        [Obsolete]
        MeasurementMarker GetProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(string projectUuid, string measurementUuid, string measurementMarkerUuid);

        /// <summary>
        /// Get Project Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>ApiResponse of MeasurementMarker</returns>
        [Obsolete]
        ApiResponse<MeasurementMarker> GetProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(string projectUuid, string measurementUuid, string measurementMarkerUuid);
        /// <summary>
        /// List Project Measurement Markers by Measurement UUID
        /// </summary>
        /// <remarks>
        /// (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>MeasurementMarkersWithoutPage</returns>
        [Obsolete]
        MeasurementMarkersWithoutPage GetProjectMeasurementMarkersWithMeasurementUUID(string projectUuid, string measurementUuid);

        /// <summary>
        /// List Project Measurement Markers by Measurement UUID
        /// </summary>
        /// <remarks>
        /// (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of MeasurementMarkersWithoutPage</returns>
        [Obsolete]
        ApiResponse<MeasurementMarkersWithoutPage> GetProjectMeasurementMarkersWithMeasurementUUIDWithHttpInfo(string projectUuid, string measurementUuid);
        /// <summary>
        /// List Measurement Markers
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers&#x60; を使用してください） 計測マーカーのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">計測マーカーのUUID (optional)</param>
        /// <param name="name">計測マーカーの名前 (optional)</param>
        /// <param name="startUnixMicro">Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)</param>
        /// <param name="endUnixMicro">Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)</param>
        /// <param name="tagKey">タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | - -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- - |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)</param>
        /// <param name="tagKey2">タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>MeasurementMarkers</returns>
        [Obsolete]
        MeasurementMarkers ListMeasurementMarkers(List<string> uuid = default(List<string>), List<string> name = default(List<string>), long? startUnixMicro = default(long?), long? endUnixMicro = default(long?), List<string> tagKey = default(List<string>), List<string> tagKey2 = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string));

        /// <summary>
        /// List Measurement Markers
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers&#x60; を使用してください） 計測マーカーのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">計測マーカーのUUID (optional)</param>
        /// <param name="name">計測マーカーの名前 (optional)</param>
        /// <param name="startUnixMicro">Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)</param>
        /// <param name="endUnixMicro">Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)</param>
        /// <param name="tagKey">タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | - -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- - |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)</param>
        /// <param name="tagKey2">タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>ApiResponse of MeasurementMarkers</returns>
        [Obsolete]
        ApiResponse<MeasurementMarkers> ListMeasurementMarkersWithHttpInfo(List<string> uuid = default(List<string>), List<string> name = default(List<string>), long? startUnixMicro = default(long?), long? endUnixMicro = default(long?), List<string> tagKey = default(List<string>), List<string> tagKey2 = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string));
        /// <summary>
        /// List Project Measurement Markers
        /// </summary>
        /// <remarks>
        /// 計測マーカーのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">計測マーカーのUUID (optional)</param>
        /// <param name="name">計測マーカーの名前 (optional)</param>
        /// <param name="startUnixMicro">Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)</param>
        /// <param name="endUnixMicro">Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)</param>
        /// <param name="tagKey">タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | - -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- - |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)</param>
        /// <param name="tagKey2">タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>MeasurementMarkers</returns>
        MeasurementMarkers ListProjectMeasurementMarkers(string projectUuid, List<string> uuid = default(List<string>), List<string> name = default(List<string>), long? startUnixMicro = default(long?), long? endUnixMicro = default(long?), List<string> tagKey = default(List<string>), List<string> tagKey2 = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string));

        /// <summary>
        /// List Project Measurement Markers
        /// </summary>
        /// <remarks>
        /// 計測マーカーのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">計測マーカーのUUID (optional)</param>
        /// <param name="name">計測マーカーの名前 (optional)</param>
        /// <param name="startUnixMicro">Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)</param>
        /// <param name="endUnixMicro">Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)</param>
        /// <param name="tagKey">タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | - -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- - |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)</param>
        /// <param name="tagKey2">タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>ApiResponse of MeasurementMarkers</returns>
        ApiResponse<MeasurementMarkers> ListProjectMeasurementMarkersWithHttpInfo(string projectUuid, List<string> uuid = default(List<string>), List<string> name = default(List<string>), long? startUnixMicro = default(long?), long? endUnixMicro = default(long?), List<string> tagKey = default(List<string>), List<string> tagKey2 = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string));
        /// <summary>
        /// Update Measurement Marker
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <returns>MeasurementMarker</returns>
        [Obsolete]
        MeasurementMarker UpdateMeasurementMarker(string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest));

        /// <summary>
        /// Update Measurement Marker
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <returns>ApiResponse of MeasurementMarker</returns>
        [Obsolete]
        ApiResponse<MeasurementMarker> UpdateMeasurementMarkerWithHttpInfo(string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest));
        /// <summary>
        /// Replace Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーの情報を更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <returns>MeasurementMarker</returns>
        [Obsolete]
        MeasurementMarker UpdateMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(string measurementUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest));

        /// <summary>
        /// Replace Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーの情報を更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <returns>ApiResponse of MeasurementMarker</returns>
        [Obsolete]
        ApiResponse<MeasurementMarker> UpdateMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(string measurementUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest));
        /// <summary>
        /// Update Project Measurement Marker
        /// </summary>
        /// <remarks>
        /// 計測マーカーを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <returns>MeasurementMarker</returns>
        MeasurementMarker UpdateProjectMeasurementMarker(string projectUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest));

        /// <summary>
        /// Update Project Measurement Marker
        /// </summary>
        /// <remarks>
        /// 計測マーカーを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <returns>ApiResponse of MeasurementMarker</returns>
        ApiResponse<MeasurementMarker> UpdateProjectMeasurementMarkerWithHttpInfo(string projectUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest));
        /// <summary>
        /// Replace Project Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// 計測マーカーの情報を更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <returns>MeasurementMarker</returns>
        MeasurementMarker UpdateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(string projectUuid, string measurementUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest));

        /// <summary>
        /// Replace Project Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// 計測マーカーの情報を更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <returns>ApiResponse of MeasurementMarker</returns>
        ApiResponse<MeasurementMarker> UpdateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(string projectUuid, string measurementUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeasMeasurementMarkersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Measurement Marker by Measurement UUID
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarker</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MeasurementMarker> CreateMeasurementMarkerAsync(string measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest = default(MeasurementMarkerPostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Measurement Marker by Measurement UUID
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarker)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MeasurementMarker>> CreateMeasurementMarkerWithHttpInfoAsync(string measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest = default(MeasurementMarkerPostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Project Measurement Marker by Measurement UUID
        /// </summary>
        /// <remarks>
        /// 計測マーカーを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarker</returns>
        System.Threading.Tasks.Task<MeasurementMarker> CreateProjectMeasurementMarkerAsync(string projectUuid, string measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest = default(MeasurementMarkerPostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Project Measurement Marker by Measurement UUID
        /// </summary>
        /// <remarks>
        /// 計測マーカーを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarker)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeasurementMarker>> CreateProjectMeasurementMarkerWithHttpInfoAsync(string projectUuid, string measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest = default(MeasurementMarkerPostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Measurement Marker
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task DeleteMeasurementMarkerAsync(string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Measurement Marker
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMeasurementMarkerWithHttpInfoAsync(string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task DeleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDAsync(string measurementUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfoAsync(string measurementUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Measurement Markers by Measurement UUID
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task DeleteMeasurementMarkersAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Measurement Markers by Measurement UUID
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMeasurementMarkersWithHttpInfoAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Project Measurement Marker
        /// </summary>
        /// <remarks>
        /// 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectMeasurementMarkerAsync(string projectUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Project Measurement Marker
        /// </summary>
        /// <remarks>
        /// 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectMeasurementMarkerWithHttpInfoAsync(string projectUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Project Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDAsync(string projectUuid, string measurementUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Project Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfoAsync(string projectUuid, string measurementUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Project Measurement Markers by Measurement UUID
        /// </summary>
        /// <remarks>
        /// 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectMeasurementMarkersAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Project Measurement Markers by Measurement UUID
        /// </summary>
        /// <remarks>
        /// 計測マーカーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectMeasurementMarkersWithHttpInfoAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Measurement Marker
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarker</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MeasurementMarker> GetMeasurementMarkerAsync(string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Measurement Marker
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarker)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MeasurementMarker>> GetMeasurementMarkerWithHttpInfoAsync(string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarker</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MeasurementMarker> GetMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDAsync(string measurementUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarker)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MeasurementMarker>> GetMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfoAsync(string measurementUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Measurement Markers by Measurement UUID
        /// </summary>
        /// <remarks>
        /// (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarkersWithoutPage</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MeasurementMarkersWithoutPage> GetMeasurementMarkersWithMeasurementUUIDAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Measurement Markers by Measurement UUID
        /// </summary>
        /// <remarks>
        /// (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarkersWithoutPage)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MeasurementMarkersWithoutPage>> GetMeasurementMarkersWithMeasurementUUIDWithHttpInfoAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Project Measurement Marker
        /// </summary>
        /// <remarks>
        /// 計測マーカーを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarker</returns>
        System.Threading.Tasks.Task<MeasurementMarker> GetProjectMeasurementMarkerAsync(string projectUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Project Measurement Marker
        /// </summary>
        /// <remarks>
        /// 計測マーカーを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarker)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeasurementMarker>> GetProjectMeasurementMarkerWithHttpInfoAsync(string projectUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Project Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarker</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MeasurementMarker> GetProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDAsync(string projectUuid, string measurementUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Project Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarker)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MeasurementMarker>> GetProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfoAsync(string projectUuid, string measurementUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Project Measurement Markers by Measurement UUID
        /// </summary>
        /// <remarks>
        /// (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarkersWithoutPage</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MeasurementMarkersWithoutPage> GetProjectMeasurementMarkersWithMeasurementUUIDAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Project Measurement Markers by Measurement UUID
        /// </summary>
        /// <remarks>
        /// (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarkersWithoutPage)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MeasurementMarkersWithoutPage>> GetProjectMeasurementMarkersWithMeasurementUUIDWithHttpInfoAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Measurement Markers
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers&#x60; を使用してください） 計測マーカーのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">計測マーカーのUUID (optional)</param>
        /// <param name="name">計測マーカーの名前 (optional)</param>
        /// <param name="startUnixMicro">Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)</param>
        /// <param name="endUnixMicro">Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)</param>
        /// <param name="tagKey">タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | - -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- - |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)</param>
        /// <param name="tagKey2">タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarkers</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MeasurementMarkers> ListMeasurementMarkersAsync(List<string> uuid = default(List<string>), List<string> name = default(List<string>), long? startUnixMicro = default(long?), long? endUnixMicro = default(long?), List<string> tagKey = default(List<string>), List<string> tagKey2 = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Measurement Markers
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers&#x60; を使用してください） 計測マーカーのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">計測マーカーのUUID (optional)</param>
        /// <param name="name">計測マーカーの名前 (optional)</param>
        /// <param name="startUnixMicro">Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)</param>
        /// <param name="endUnixMicro">Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)</param>
        /// <param name="tagKey">タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | - -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- - |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)</param>
        /// <param name="tagKey2">タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarkers)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MeasurementMarkers>> ListMeasurementMarkersWithHttpInfoAsync(List<string> uuid = default(List<string>), List<string> name = default(List<string>), long? startUnixMicro = default(long?), long? endUnixMicro = default(long?), List<string> tagKey = default(List<string>), List<string> tagKey2 = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Project Measurement Markers
        /// </summary>
        /// <remarks>
        /// 計測マーカーのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">計測マーカーのUUID (optional)</param>
        /// <param name="name">計測マーカーの名前 (optional)</param>
        /// <param name="startUnixMicro">Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)</param>
        /// <param name="endUnixMicro">Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)</param>
        /// <param name="tagKey">タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | - -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- - |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)</param>
        /// <param name="tagKey2">タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarkers</returns>
        System.Threading.Tasks.Task<MeasurementMarkers> ListProjectMeasurementMarkersAsync(string projectUuid, List<string> uuid = default(List<string>), List<string> name = default(List<string>), long? startUnixMicro = default(long?), long? endUnixMicro = default(long?), List<string> tagKey = default(List<string>), List<string> tagKey2 = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Project Measurement Markers
        /// </summary>
        /// <remarks>
        /// 計測マーカーのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">計測マーカーのUUID (optional)</param>
        /// <param name="name">計測マーカーの名前 (optional)</param>
        /// <param name="startUnixMicro">Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)</param>
        /// <param name="endUnixMicro">Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)</param>
        /// <param name="tagKey">タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | - -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- - |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)</param>
        /// <param name="tagKey2">タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarkers)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeasurementMarkers>> ListProjectMeasurementMarkersWithHttpInfoAsync(string projectUuid, List<string> uuid = default(List<string>), List<string> name = default(List<string>), long? startUnixMicro = default(long?), long? endUnixMicro = default(long?), List<string> tagKey = default(List<string>), List<string> tagKey2 = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Measurement Marker
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarker</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MeasurementMarker> UpdateMeasurementMarkerAsync(string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Measurement Marker
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarker)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MeasurementMarker>> UpdateMeasurementMarkerWithHttpInfoAsync(string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーの情報を更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarker</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MeasurementMarker> UpdateMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDAsync(string measurementUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーの情報を更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarker)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MeasurementMarker>> UpdateMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfoAsync(string measurementUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Project Measurement Marker
        /// </summary>
        /// <remarks>
        /// 計測マーカーを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarker</returns>
        System.Threading.Tasks.Task<MeasurementMarker> UpdateProjectMeasurementMarkerAsync(string projectUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Project Measurement Marker
        /// </summary>
        /// <remarks>
        /// 計測マーカーを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarker)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeasurementMarker>> UpdateProjectMeasurementMarkerWithHttpInfoAsync(string projectUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace Project Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// 計測マーカーの情報を更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarker</returns>
        System.Threading.Tasks.Task<MeasurementMarker> UpdateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDAsync(string projectUuid, string measurementUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace Project Measurement Marker using Measurement UUID
        /// </summary>
        /// <remarks>
        /// 計測マーカーの情報を更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarker)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeasurementMarker>> UpdateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfoAsync(string projectUuid, string measurementUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeasMeasurementMarkersApi : IMeasMeasurementMarkersApiSync, IMeasMeasurementMarkersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MeasMeasurementMarkersApi : IDisposable, IMeasMeasurementMarkersApi
    {
        private intdash.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasMeasurementMarkersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public MeasMeasurementMarkersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasMeasurementMarkersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public MeasMeasurementMarkersApi(string basePath)
        {
            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                new intdash.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new intdash.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasMeasurementMarkersApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public MeasMeasurementMarkersApi(intdash.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new intdash.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasMeasurementMarkersApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MeasMeasurementMarkersApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasMeasurementMarkersApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MeasMeasurementMarkersApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                new intdash.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new intdash.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasMeasurementMarkersApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MeasMeasurementMarkersApi(HttpClient client, intdash.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new intdash.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasMeasurementMarkersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public MeasMeasurementMarkersApi(intdash.Client.ISynchronousClient client, intdash.Client.IAsynchronousClient asyncClient, intdash.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public intdash.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public intdash.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public intdash.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public intdash.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public intdash.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Measurement Marker by Measurement UUID （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerPostRequest"> (optional)</param>
        /// <returns>MeasurementMarker</returns>
        [Obsolete]
        public MeasurementMarker CreateMeasurementMarker(string measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest = default(MeasurementMarkerPostRequest))
        {
            intdash.Client.ApiResponse<MeasurementMarker> localVarResponse = CreateMeasurementMarkerWithHttpInfo(measurementUuid, measurementMarkerPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Measurement Marker by Measurement UUID （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerPostRequest"> (optional)</param>
        /// <returns>ApiResponse of MeasurementMarker</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MeasurementMarker> CreateMeasurementMarkerWithHttpInfo(string measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest = default(MeasurementMarkerPostRequest))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->CreateMeasurementMarker");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.Data = measurementMarkerPostRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MeasurementMarker>("/v1/measurements/{measurement_uuid}/markers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMeasurementMarker", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Measurement Marker by Measurement UUID （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarker</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MeasurementMarker> CreateMeasurementMarkerAsync(string measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest = default(MeasurementMarkerPostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementMarker> localVarResponse = await CreateMeasurementMarkerWithHttpInfoAsync(measurementUuid, measurementMarkerPostRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Measurement Marker by Measurement UUID （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarker)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementMarker>> CreateMeasurementMarkerWithHttpInfoAsync(string measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest = default(MeasurementMarkerPostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->CreateMeasurementMarker");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.Data = measurementMarkerPostRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MeasurementMarker>("/v1/measurements/{measurement_uuid}/markers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMeasurementMarker", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Project Measurement Marker by Measurement UUID 計測マーカーを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerPostRequest"> (optional)</param>
        /// <returns>MeasurementMarker</returns>
        public MeasurementMarker CreateProjectMeasurementMarker(string projectUuid, string measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest = default(MeasurementMarkerPostRequest))
        {
            intdash.Client.ApiResponse<MeasurementMarker> localVarResponse = CreateProjectMeasurementMarkerWithHttpInfo(projectUuid, measurementUuid, measurementMarkerPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Project Measurement Marker by Measurement UUID 計測マーカーを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerPostRequest"> (optional)</param>
        /// <returns>ApiResponse of MeasurementMarker</returns>
        public intdash.Client.ApiResponse<MeasurementMarker> CreateProjectMeasurementMarkerWithHttpInfo(string projectUuid, string measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest = default(MeasurementMarkerPostRequest))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementMarkersApi->CreateProjectMeasurementMarker");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->CreateProjectMeasurementMarker");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.Data = measurementMarkerPostRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MeasurementMarker>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProjectMeasurementMarker", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Project Measurement Marker by Measurement UUID 計測マーカーを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarker</returns>
        public async System.Threading.Tasks.Task<MeasurementMarker> CreateProjectMeasurementMarkerAsync(string projectUuid, string measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest = default(MeasurementMarkerPostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementMarker> localVarResponse = await CreateProjectMeasurementMarkerWithHttpInfoAsync(projectUuid, measurementUuid, measurementMarkerPostRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Project Measurement Marker by Measurement UUID 計測マーカーを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarker)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementMarker>> CreateProjectMeasurementMarkerWithHttpInfoAsync(string projectUuid, string measurementUuid, MeasurementMarkerPostRequest measurementMarkerPostRequest = default(MeasurementMarkerPostRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementMarkersApi->CreateProjectMeasurementMarker");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->CreateProjectMeasurementMarker");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.Data = measurementMarkerPostRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MeasurementMarker>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProjectMeasurementMarker", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Measurement Marker （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns></returns>
        [Obsolete]
        public void DeleteMeasurementMarker(string measurementMarkerUuid)
        {
            DeleteMeasurementMarkerWithHttpInfo(measurementMarkerUuid);
        }

        /// <summary>
        /// Delete Measurement Marker （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Object> DeleteMeasurementMarkerWithHttpInfo(string measurementMarkerUuid)
        {
            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->DeleteMeasurementMarker");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/measurements/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMeasurementMarker", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Measurement Marker （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task DeleteMeasurementMarkerAsync(string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteMeasurementMarkerWithHttpInfoAsync(measurementMarkerUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Measurement Marker （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> DeleteMeasurementMarkerWithHttpInfoAsync(string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->DeleteMeasurementMarker");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/measurements/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMeasurementMarker", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Measurement Marker using Measurement UUID （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns></returns>
        [Obsolete]
        public void DeleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(string measurementUuid, string measurementMarkerUuid)
        {
            DeleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(measurementUuid, measurementMarkerUuid);
        }

        /// <summary>
        /// Delete Measurement Marker using Measurement UUID （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Object> DeleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(string measurementUuid, string measurementMarkerUuid)
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->DeleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->DeleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Measurement Marker using Measurement UUID （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task DeleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDAsync(string measurementUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfoAsync(measurementUuid, measurementMarkerUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Measurement Marker using Measurement UUID （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> DeleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfoAsync(string measurementUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->DeleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->DeleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Measurement Markers by Measurement UUID （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns></returns>
        [Obsolete]
        public void DeleteMeasurementMarkers(string measurementUuid)
        {
            DeleteMeasurementMarkersWithHttpInfo(measurementUuid);
        }

        /// <summary>
        /// Delete Measurement Markers by Measurement UUID （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Object> DeleteMeasurementMarkersWithHttpInfo(string measurementUuid)
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->DeleteMeasurementMarkers");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/measurements/{measurement_uuid}/markers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMeasurementMarkers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Measurement Markers by Measurement UUID （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task DeleteMeasurementMarkersAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteMeasurementMarkersWithHttpInfoAsync(measurementUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Measurement Markers by Measurement UUID （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers&#x60; を使用してください） 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> DeleteMeasurementMarkersWithHttpInfoAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->DeleteMeasurementMarkers");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/measurements/{measurement_uuid}/markers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMeasurementMarkers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Project Measurement Marker 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns></returns>
        public void DeleteProjectMeasurementMarker(string projectUuid, string measurementMarkerUuid)
        {
            DeleteProjectMeasurementMarkerWithHttpInfo(projectUuid, measurementMarkerUuid);
        }

        /// <summary>
        /// Delete Project Measurement Marker 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> DeleteProjectMeasurementMarkerWithHttpInfo(string projectUuid, string measurementMarkerUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementMarkersApi->DeleteProjectMeasurementMarker");

            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->DeleteProjectMeasurementMarker");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/projects/{project_uuid}/measurements/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectMeasurementMarker", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Project Measurement Marker 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectMeasurementMarkerAsync(string projectUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProjectMeasurementMarkerWithHttpInfoAsync(projectUuid, measurementMarkerUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Project Measurement Marker 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> DeleteProjectMeasurementMarkerWithHttpInfoAsync(string projectUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementMarkersApi->DeleteProjectMeasurementMarker");

            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->DeleteProjectMeasurementMarker");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/projects/{project_uuid}/measurements/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectMeasurementMarker", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Project Measurement Marker using Measurement UUID 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns></returns>
        public void DeleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(string projectUuid, string measurementUuid, string measurementMarkerUuid)
        {
            DeleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(projectUuid, measurementUuid, measurementMarkerUuid);
        }

        /// <summary>
        /// Delete Project Measurement Marker using Measurement UUID 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> DeleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(string projectUuid, string measurementUuid, string measurementMarkerUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementMarkersApi->DeleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->DeleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->DeleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Project Measurement Marker using Measurement UUID 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDAsync(string projectUuid, string measurementUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfoAsync(projectUuid, measurementUuid, measurementMarkerUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Project Measurement Marker using Measurement UUID 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> DeleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfoAsync(string projectUuid, string measurementUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementMarkersApi->DeleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->DeleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->DeleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Project Measurement Markers by Measurement UUID 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns></returns>
        public void DeleteProjectMeasurementMarkers(string projectUuid, string measurementUuid)
        {
            DeleteProjectMeasurementMarkersWithHttpInfo(projectUuid, measurementUuid);
        }

        /// <summary>
        /// Delete Project Measurement Markers by Measurement UUID 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> DeleteProjectMeasurementMarkersWithHttpInfo(string projectUuid, string measurementUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementMarkersApi->DeleteProjectMeasurementMarkers");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->DeleteProjectMeasurementMarkers");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectMeasurementMarkers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Project Measurement Markers by Measurement UUID 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectMeasurementMarkersAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProjectMeasurementMarkersWithHttpInfoAsync(projectUuid, measurementUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Project Measurement Markers by Measurement UUID 計測マーカーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> DeleteProjectMeasurementMarkersWithHttpInfoAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementMarkersApi->DeleteProjectMeasurementMarkers");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->DeleteProjectMeasurementMarkers");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectMeasurementMarkers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Measurement Marker （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>MeasurementMarker</returns>
        [Obsolete]
        public MeasurementMarker GetMeasurementMarker(string measurementMarkerUuid)
        {
            intdash.Client.ApiResponse<MeasurementMarker> localVarResponse = GetMeasurementMarkerWithHttpInfo(measurementMarkerUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Measurement Marker （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>ApiResponse of MeasurementMarker</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MeasurementMarker> GetMeasurementMarkerWithHttpInfo(string measurementMarkerUuid)
        {
            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->GetMeasurementMarker");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeasurementMarker>("/v1/measurements/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeasurementMarker", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Measurement Marker （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarker</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MeasurementMarker> GetMeasurementMarkerAsync(string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementMarker> localVarResponse = await GetMeasurementMarkerWithHttpInfoAsync(measurementMarkerUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Measurement Marker （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarker)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementMarker>> GetMeasurementMarkerWithHttpInfoAsync(string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->GetMeasurementMarker");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeasurementMarker>("/v1/measurements/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeasurementMarker", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Measurement Marker using Measurement UUID **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>MeasurementMarker</returns>
        [Obsolete]
        public MeasurementMarker GetMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(string measurementUuid, string measurementMarkerUuid)
        {
            intdash.Client.ApiResponse<MeasurementMarker> localVarResponse = GetMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(measurementUuid, measurementMarkerUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Measurement Marker using Measurement UUID **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>ApiResponse of MeasurementMarker</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MeasurementMarker> GetMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(string measurementUuid, string measurementMarkerUuid)
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->GetMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->GetMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeasurementMarker>("/v1/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeasurementMarkerWithMeasurementUUIDAndMarkerUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Measurement Marker using Measurement UUID **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarker</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MeasurementMarker> GetMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDAsync(string measurementUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementMarker> localVarResponse = await GetMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfoAsync(measurementUuid, measurementMarkerUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Measurement Marker using Measurement UUID **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarker)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementMarker>> GetMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfoAsync(string measurementUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->GetMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->GetMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeasurementMarker>("/v1/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeasurementMarkerWithMeasurementUUIDAndMarkerUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Measurement Markers by Measurement UUID (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>MeasurementMarkersWithoutPage</returns>
        [Obsolete]
        public MeasurementMarkersWithoutPage GetMeasurementMarkersWithMeasurementUUID(string measurementUuid)
        {
            intdash.Client.ApiResponse<MeasurementMarkersWithoutPage> localVarResponse = GetMeasurementMarkersWithMeasurementUUIDWithHttpInfo(measurementUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Measurement Markers by Measurement UUID (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of MeasurementMarkersWithoutPage</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MeasurementMarkersWithoutPage> GetMeasurementMarkersWithMeasurementUUIDWithHttpInfo(string measurementUuid)
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->GetMeasurementMarkersWithMeasurementUUID");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeasurementMarkersWithoutPage>("/v1/measurements/{measurement_uuid}/markers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeasurementMarkersWithMeasurementUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Measurement Markers by Measurement UUID (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarkersWithoutPage</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MeasurementMarkersWithoutPage> GetMeasurementMarkersWithMeasurementUUIDAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementMarkersWithoutPage> localVarResponse = await GetMeasurementMarkersWithMeasurementUUIDWithHttpInfoAsync(measurementUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Measurement Markers by Measurement UUID (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarkersWithoutPage)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementMarkersWithoutPage>> GetMeasurementMarkersWithMeasurementUUIDWithHttpInfoAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->GetMeasurementMarkersWithMeasurementUUID");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeasurementMarkersWithoutPage>("/v1/measurements/{measurement_uuid}/markers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeasurementMarkersWithMeasurementUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project Measurement Marker 計測マーカーを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>MeasurementMarker</returns>
        public MeasurementMarker GetProjectMeasurementMarker(string projectUuid, string measurementMarkerUuid)
        {
            intdash.Client.ApiResponse<MeasurementMarker> localVarResponse = GetProjectMeasurementMarkerWithHttpInfo(projectUuid, measurementMarkerUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project Measurement Marker 計測マーカーを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>ApiResponse of MeasurementMarker</returns>
        public intdash.Client.ApiResponse<MeasurementMarker> GetProjectMeasurementMarkerWithHttpInfo(string projectUuid, string measurementMarkerUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementMarkersApi->GetProjectMeasurementMarker");

            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->GetProjectMeasurementMarker");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeasurementMarker>("/v1/projects/{project_uuid}/measurements/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectMeasurementMarker", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project Measurement Marker 計測マーカーを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarker</returns>
        public async System.Threading.Tasks.Task<MeasurementMarker> GetProjectMeasurementMarkerAsync(string projectUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementMarker> localVarResponse = await GetProjectMeasurementMarkerWithHttpInfoAsync(projectUuid, measurementMarkerUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project Measurement Marker 計測マーカーを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarker)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementMarker>> GetProjectMeasurementMarkerWithHttpInfoAsync(string projectUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementMarkersApi->GetProjectMeasurementMarker");

            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->GetProjectMeasurementMarker");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeasurementMarker>("/v1/projects/{project_uuid}/measurements/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectMeasurementMarker", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project Measurement Marker using Measurement UUID **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>MeasurementMarker</returns>
        [Obsolete]
        public MeasurementMarker GetProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(string projectUuid, string measurementUuid, string measurementMarkerUuid)
        {
            intdash.Client.ApiResponse<MeasurementMarker> localVarResponse = GetProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(projectUuid, measurementUuid, measurementMarkerUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project Measurement Marker using Measurement UUID **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>ApiResponse of MeasurementMarker</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MeasurementMarker> GetProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(string projectUuid, string measurementUuid, string measurementMarkerUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementMarkersApi->GetProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->GetProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->GetProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeasurementMarker>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project Measurement Marker using Measurement UUID **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarker</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MeasurementMarker> GetProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDAsync(string projectUuid, string measurementUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementMarker> localVarResponse = await GetProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfoAsync(projectUuid, measurementUuid, measurementMarkerUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project Measurement Marker using Measurement UUID **Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarker)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementMarker>> GetProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfoAsync(string projectUuid, string measurementUuid, string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementMarkersApi->GetProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->GetProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->GetProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeasurementMarker>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Project Measurement Markers by Measurement UUID (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>MeasurementMarkersWithoutPage</returns>
        [Obsolete]
        public MeasurementMarkersWithoutPage GetProjectMeasurementMarkersWithMeasurementUUID(string projectUuid, string measurementUuid)
        {
            intdash.Client.ApiResponse<MeasurementMarkersWithoutPage> localVarResponse = GetProjectMeasurementMarkersWithMeasurementUUIDWithHttpInfo(projectUuid, measurementUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Project Measurement Markers by Measurement UUID (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of MeasurementMarkersWithoutPage</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MeasurementMarkersWithoutPage> GetProjectMeasurementMarkersWithMeasurementUUIDWithHttpInfo(string projectUuid, string measurementUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementMarkersApi->GetProjectMeasurementMarkersWithMeasurementUUID");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->GetProjectMeasurementMarkersWithMeasurementUUID");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeasurementMarkersWithoutPage>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectMeasurementMarkersWithMeasurementUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Project Measurement Markers by Measurement UUID (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarkersWithoutPage</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MeasurementMarkersWithoutPage> GetProjectMeasurementMarkersWithMeasurementUUIDAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementMarkersWithoutPage> localVarResponse = await GetProjectMeasurementMarkersWithMeasurementUUIDWithHttpInfoAsync(projectUuid, measurementUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Project Measurement Markers by Measurement UUID (**Deprecated** このエンドポイントではなく、 &#x60;GET /measurements/{measurement_uuid}&#x60; を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarkersWithoutPage)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementMarkersWithoutPage>> GetProjectMeasurementMarkersWithMeasurementUUIDWithHttpInfoAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementMarkersApi->GetProjectMeasurementMarkersWithMeasurementUUID");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->GetProjectMeasurementMarkersWithMeasurementUUID");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeasurementMarkersWithoutPage>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectMeasurementMarkersWithMeasurementUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Measurement Markers （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers&#x60; を使用してください） 計測マーカーのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">計測マーカーのUUID (optional)</param>
        /// <param name="name">計測マーカーの名前 (optional)</param>
        /// <param name="startUnixMicro">Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)</param>
        /// <param name="endUnixMicro">Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)</param>
        /// <param name="tagKey">タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | - -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- - |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)</param>
        /// <param name="tagKey2">タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>MeasurementMarkers</returns>
        [Obsolete]
        public MeasurementMarkers ListMeasurementMarkers(List<string> uuid = default(List<string>), List<string> name = default(List<string>), long? startUnixMicro = default(long?), long? endUnixMicro = default(long?), List<string> tagKey = default(List<string>), List<string> tagKey2 = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string))
        {
            intdash.Client.ApiResponse<MeasurementMarkers> localVarResponse = ListMeasurementMarkersWithHttpInfo(uuid, name, startUnixMicro, endUnixMicro, tagKey, tagKey2, limit, sort, page, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Measurement Markers （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers&#x60; を使用してください） 計測マーカーのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">計測マーカーのUUID (optional)</param>
        /// <param name="name">計測マーカーの名前 (optional)</param>
        /// <param name="startUnixMicro">Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)</param>
        /// <param name="endUnixMicro">Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)</param>
        /// <param name="tagKey">タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | - -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- - |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)</param>
        /// <param name="tagKey2">タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>ApiResponse of MeasurementMarkers</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MeasurementMarkers> ListMeasurementMarkersWithHttpInfo(List<string> uuid = default(List<string>), List<string> name = default(List<string>), long? startUnixMicro = default(long?), long? endUnixMicro = default(long?), List<string> tagKey = default(List<string>), List<string> tagKey2 = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string))
        {
            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "uuid", uuid));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "name", name));
            }
            if (startUnixMicro != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "start_unix_micro", startUnixMicro));
            }
            if (endUnixMicro != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "end_unix_micro", endUnixMicro));
            }
            if (tagKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "tag.&lt;key&gt;", tagKey));
            }
            if (tagKey2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "!tag.&lt;key&gt;", tagKey2));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeasurementMarkers>("/v1/measurements/markers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMeasurementMarkers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Measurement Markers （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers&#x60; を使用してください） 計測マーカーのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">計測マーカーのUUID (optional)</param>
        /// <param name="name">計測マーカーの名前 (optional)</param>
        /// <param name="startUnixMicro">Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)</param>
        /// <param name="endUnixMicro">Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)</param>
        /// <param name="tagKey">タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | - -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- - |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)</param>
        /// <param name="tagKey2">タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarkers</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MeasurementMarkers> ListMeasurementMarkersAsync(List<string> uuid = default(List<string>), List<string> name = default(List<string>), long? startUnixMicro = default(long?), long? endUnixMicro = default(long?), List<string> tagKey = default(List<string>), List<string> tagKey2 = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementMarkers> localVarResponse = await ListMeasurementMarkersWithHttpInfoAsync(uuid, name, startUnixMicro, endUnixMicro, tagKey, tagKey2, limit, sort, page, order, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Measurement Markers （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers&#x60; を使用してください） 計測マーカーのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">計測マーカーのUUID (optional)</param>
        /// <param name="name">計測マーカーの名前 (optional)</param>
        /// <param name="startUnixMicro">Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)</param>
        /// <param name="endUnixMicro">Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)</param>
        /// <param name="tagKey">タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | - -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- - |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)</param>
        /// <param name="tagKey2">タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarkers)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementMarkers>> ListMeasurementMarkersWithHttpInfoAsync(List<string> uuid = default(List<string>), List<string> name = default(List<string>), long? startUnixMicro = default(long?), long? endUnixMicro = default(long?), List<string> tagKey = default(List<string>), List<string> tagKey2 = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "uuid", uuid));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "name", name));
            }
            if (startUnixMicro != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "start_unix_micro", startUnixMicro));
            }
            if (endUnixMicro != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "end_unix_micro", endUnixMicro));
            }
            if (tagKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "tag.&lt;key&gt;", tagKey));
            }
            if (tagKey2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "!tag.&lt;key&gt;", tagKey2));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeasurementMarkers>("/v1/measurements/markers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMeasurementMarkers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Project Measurement Markers 計測マーカーのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">計測マーカーのUUID (optional)</param>
        /// <param name="name">計測マーカーの名前 (optional)</param>
        /// <param name="startUnixMicro">Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)</param>
        /// <param name="endUnixMicro">Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)</param>
        /// <param name="tagKey">タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | - -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- - |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)</param>
        /// <param name="tagKey2">タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>MeasurementMarkers</returns>
        public MeasurementMarkers ListProjectMeasurementMarkers(string projectUuid, List<string> uuid = default(List<string>), List<string> name = default(List<string>), long? startUnixMicro = default(long?), long? endUnixMicro = default(long?), List<string> tagKey = default(List<string>), List<string> tagKey2 = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string))
        {
            intdash.Client.ApiResponse<MeasurementMarkers> localVarResponse = ListProjectMeasurementMarkersWithHttpInfo(projectUuid, uuid, name, startUnixMicro, endUnixMicro, tagKey, tagKey2, limit, sort, page, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Project Measurement Markers 計測マーカーのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">計測マーカーのUUID (optional)</param>
        /// <param name="name">計測マーカーの名前 (optional)</param>
        /// <param name="startUnixMicro">Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)</param>
        /// <param name="endUnixMicro">Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)</param>
        /// <param name="tagKey">タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | - -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- - |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)</param>
        /// <param name="tagKey2">タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>ApiResponse of MeasurementMarkers</returns>
        public intdash.Client.ApiResponse<MeasurementMarkers> ListProjectMeasurementMarkersWithHttpInfo(string projectUuid, List<string> uuid = default(List<string>), List<string> name = default(List<string>), long? startUnixMicro = default(long?), long? endUnixMicro = default(long?), List<string> tagKey = default(List<string>), List<string> tagKey2 = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementMarkersApi->ListProjectMeasurementMarkers");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "uuid", uuid));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "name", name));
            }
            if (startUnixMicro != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "start_unix_micro", startUnixMicro));
            }
            if (endUnixMicro != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "end_unix_micro", endUnixMicro));
            }
            if (tagKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "tag.&lt;key&gt;", tagKey));
            }
            if (tagKey2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "!tag.&lt;key&gt;", tagKey2));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeasurementMarkers>("/v1/projects/{project_uuid}/measurements/markers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProjectMeasurementMarkers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Project Measurement Markers 計測マーカーのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">計測マーカーのUUID (optional)</param>
        /// <param name="name">計測マーカーの名前 (optional)</param>
        /// <param name="startUnixMicro">Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)</param>
        /// <param name="endUnixMicro">Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)</param>
        /// <param name="tagKey">タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | - -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- - |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)</param>
        /// <param name="tagKey2">タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarkers</returns>
        public async System.Threading.Tasks.Task<MeasurementMarkers> ListProjectMeasurementMarkersAsync(string projectUuid, List<string> uuid = default(List<string>), List<string> name = default(List<string>), long? startUnixMicro = default(long?), long? endUnixMicro = default(long?), List<string> tagKey = default(List<string>), List<string> tagKey2 = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementMarkers> localVarResponse = await ListProjectMeasurementMarkersWithHttpInfoAsync(projectUuid, uuid, name, startUnixMicro, endUnixMicro, tagKey, tagKey2, limit, sort, page, order, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Project Measurement Markers 計測マーカーのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">計測マーカーのUUID (optional)</param>
        /// <param name="name">計測マーカーの名前 (optional)</param>
        /// <param name="startUnixMicro">Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)</param>
        /// <param name="endUnixMicro">Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)</param>
        /// <param name="tagKey">タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | - -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- - |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)</param>
        /// <param name="tagKey2">タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarkers)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementMarkers>> ListProjectMeasurementMarkersWithHttpInfoAsync(string projectUuid, List<string> uuid = default(List<string>), List<string> name = default(List<string>), long? startUnixMicro = default(long?), long? endUnixMicro = default(long?), List<string> tagKey = default(List<string>), List<string> tagKey2 = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementMarkersApi->ListProjectMeasurementMarkers");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "uuid", uuid));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "name", name));
            }
            if (startUnixMicro != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "start_unix_micro", startUnixMicro));
            }
            if (endUnixMicro != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "end_unix_micro", endUnixMicro));
            }
            if (tagKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "tag.&lt;key&gt;", tagKey));
            }
            if (tagKey2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "!tag.&lt;key&gt;", tagKey2));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeasurementMarkers>("/v1/projects/{project_uuid}/measurements/markers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProjectMeasurementMarkers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Measurement Marker （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <returns>MeasurementMarker</returns>
        [Obsolete]
        public MeasurementMarker UpdateMeasurementMarker(string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest))
        {
            intdash.Client.ApiResponse<MeasurementMarker> localVarResponse = UpdateMeasurementMarkerWithHttpInfo(measurementMarkerUuid, measurementMarkerPutRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Measurement Marker （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <returns>ApiResponse of MeasurementMarker</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MeasurementMarker> UpdateMeasurementMarkerWithHttpInfo(string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest))
        {
            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->UpdateMeasurementMarker");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter
            localVarRequestOptions.Data = measurementMarkerPutRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<MeasurementMarker>("/v1/measurements/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeasurementMarker", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Measurement Marker （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarker</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MeasurementMarker> UpdateMeasurementMarkerAsync(string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementMarker> localVarResponse = await UpdateMeasurementMarkerWithHttpInfoAsync(measurementMarkerUuid, measurementMarkerPutRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Measurement Marker （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}&#x60; を使用してください） 計測マーカーを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarker)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementMarker>> UpdateMeasurementMarkerWithHttpInfoAsync(string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->UpdateMeasurementMarker");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter
            localVarRequestOptions.Data = measurementMarkerPutRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<MeasurementMarker>("/v1/measurements/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeasurementMarker", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Measurement Marker using Measurement UUID （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーの情報を更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <returns>MeasurementMarker</returns>
        [Obsolete]
        public MeasurementMarker UpdateMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(string measurementUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest))
        {
            intdash.Client.ApiResponse<MeasurementMarker> localVarResponse = UpdateMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(measurementUuid, measurementMarkerUuid, measurementMarkerPutRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Measurement Marker using Measurement UUID （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーの情報を更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <returns>ApiResponse of MeasurementMarker</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MeasurementMarker> UpdateMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(string measurementUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->UpdateMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->UpdateMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter
            localVarRequestOptions.Data = measurementMarkerPutRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<MeasurementMarker>("/v1/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeasurementMarkerWithMeasurementUUIDAndMarkerUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Measurement Marker using Measurement UUID （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーの情報を更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarker</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MeasurementMarker> UpdateMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDAsync(string measurementUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementMarker> localVarResponse = await UpdateMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfoAsync(measurementUuid, measurementMarkerUuid, measurementMarkerPutRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Measurement Marker using Measurement UUID （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/markers/{Measurement_marker_uuid}&#x60; を使用してください） 計測マーカーの情報を更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarker)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementMarker>> UpdateMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfoAsync(string measurementUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->UpdateMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->UpdateMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter
            localVarRequestOptions.Data = measurementMarkerPutRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<MeasurementMarker>("/v1/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeasurementMarkerWithMeasurementUUIDAndMarkerUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Project Measurement Marker 計測マーカーを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <returns>MeasurementMarker</returns>
        public MeasurementMarker UpdateProjectMeasurementMarker(string projectUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest))
        {
            intdash.Client.ApiResponse<MeasurementMarker> localVarResponse = UpdateProjectMeasurementMarkerWithHttpInfo(projectUuid, measurementMarkerUuid, measurementMarkerPutRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Project Measurement Marker 計測マーカーを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <returns>ApiResponse of MeasurementMarker</returns>
        public intdash.Client.ApiResponse<MeasurementMarker> UpdateProjectMeasurementMarkerWithHttpInfo(string projectUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementMarkersApi->UpdateProjectMeasurementMarker");

            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->UpdateProjectMeasurementMarker");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter
            localVarRequestOptions.Data = measurementMarkerPutRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<MeasurementMarker>("/v1/projects/{project_uuid}/measurements/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProjectMeasurementMarker", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Project Measurement Marker 計測マーカーを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarker</returns>
        public async System.Threading.Tasks.Task<MeasurementMarker> UpdateProjectMeasurementMarkerAsync(string projectUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementMarker> localVarResponse = await UpdateProjectMeasurementMarkerWithHttpInfoAsync(projectUuid, measurementMarkerUuid, measurementMarkerPutRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Project Measurement Marker 計測マーカーを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarker)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementMarker>> UpdateProjectMeasurementMarkerWithHttpInfoAsync(string projectUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementMarkersApi->UpdateProjectMeasurementMarker");

            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->UpdateProjectMeasurementMarker");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter
            localVarRequestOptions.Data = measurementMarkerPutRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<MeasurementMarker>("/v1/projects/{project_uuid}/measurements/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProjectMeasurementMarker", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Project Measurement Marker using Measurement UUID 計測マーカーの情報を更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <returns>MeasurementMarker</returns>
        public MeasurementMarker UpdateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(string projectUuid, string measurementUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest))
        {
            intdash.Client.ApiResponse<MeasurementMarker> localVarResponse = UpdateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(projectUuid, measurementUuid, measurementMarkerUuid, measurementMarkerPutRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Project Measurement Marker using Measurement UUID 計測マーカーの情報を更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <returns>ApiResponse of MeasurementMarker</returns>
        public intdash.Client.ApiResponse<MeasurementMarker> UpdateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfo(string projectUuid, string measurementUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementMarkersApi->UpdateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->UpdateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->UpdateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter
            localVarRequestOptions.Data = measurementMarkerPutRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<MeasurementMarker>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Project Measurement Marker using Measurement UUID 計測マーカーの情報を更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementMarker</returns>
        public async System.Threading.Tasks.Task<MeasurementMarker> UpdateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDAsync(string projectUuid, string measurementUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementMarker> localVarResponse = await UpdateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfoAsync(projectUuid, measurementUuid, measurementMarkerUuid, measurementMarkerPutRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Project Measurement Marker using Measurement UUID 計測マーカーの情報を更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="measurementMarkerPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementMarker)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementMarker>> UpdateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithHttpInfoAsync(string projectUuid, string measurementUuid, string measurementMarkerUuid, MeasurementMarkerPutRequest measurementMarkerPutRequest = default(MeasurementMarkerPutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementMarkersApi->UpdateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementMarkersApi->UpdateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");

            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementMarkersApi->UpdateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter
            localVarRequestOptions.Data = measurementMarkerPutRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<MeasurementMarker>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
