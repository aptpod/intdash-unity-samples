/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using FileParameter = intdash.Client.FileParameter;
using OpenAPIDateConverter = intdash.Client.OpenAPIDateConverter;
using System.Reflection;

namespace intdash.Model
{
    /// <summary>
    /// MeasurementMarkerPutRequest
    /// </summary>
    [JsonConverter(typeof(MeasurementMarkerPutRequestJsonConverter))]
    [DataContract(Name = "MeasurementMarkerPutRequest")]
    public partial class MeasurementMarkerPutRequest : AbstractOpenAPISchema, IEquatable<MeasurementMarkerPutRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MeasurementMarkerPutRequest" /> class
        /// with the <see cref="MeasurementMarkerPutRequestPoint" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MeasurementMarkerPutRequestPoint.</param>
        public MeasurementMarkerPutRequest(MeasurementMarkerPutRequestPoint actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasurementMarkerPutRequest" /> class
        /// with the <see cref="MeasurementMarkerPutRequestRange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MeasurementMarkerPutRequestRange.</param>
        public MeasurementMarkerPutRequest(MeasurementMarkerPutRequestRange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(MeasurementMarkerPutRequestPoint))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MeasurementMarkerPutRequestRange))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: MeasurementMarkerPutRequestPoint, MeasurementMarkerPutRequestRange");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `MeasurementMarkerPutRequestPoint`. If the actual instance is not `MeasurementMarkerPutRequestPoint`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MeasurementMarkerPutRequestPoint</returns>
        public MeasurementMarkerPutRequestPoint GetMeasurementMarkerPutRequestPoint()
        {
            return (MeasurementMarkerPutRequestPoint)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MeasurementMarkerPutRequestRange`. If the actual instance is not `MeasurementMarkerPutRequestRange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MeasurementMarkerPutRequestRange</returns>
        public MeasurementMarkerPutRequestRange GetMeasurementMarkerPutRequestRange()
        {
            return (MeasurementMarkerPutRequestRange)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MeasurementMarkerPutRequest {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, MeasurementMarkerPutRequest.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of MeasurementMarkerPutRequest
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of MeasurementMarkerPutRequest</returns>
        public static MeasurementMarkerPutRequest FromJson(string jsonString)
        {
            MeasurementMarkerPutRequest newMeasurementMarkerPutRequest = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newMeasurementMarkerPutRequest;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(MeasurementMarkerPutRequestPoint).GetProperty("AdditionalProperties") == null)
                {
                    newMeasurementMarkerPutRequest = new MeasurementMarkerPutRequest(JsonConvert.DeserializeObject<MeasurementMarkerPutRequestPoint>(jsonString, MeasurementMarkerPutRequest.SerializerSettings));
                }
                else
                {
                    newMeasurementMarkerPutRequest = new MeasurementMarkerPutRequest(JsonConvert.DeserializeObject<MeasurementMarkerPutRequestPoint>(jsonString, MeasurementMarkerPutRequest.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("MeasurementMarkerPutRequestPoint");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MeasurementMarkerPutRequestPoint: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(MeasurementMarkerPutRequestRange).GetProperty("AdditionalProperties") == null)
                {
                    newMeasurementMarkerPutRequest = new MeasurementMarkerPutRequest(JsonConvert.DeserializeObject<MeasurementMarkerPutRequestRange>(jsonString, MeasurementMarkerPutRequest.SerializerSettings));
                }
                else
                {
                    newMeasurementMarkerPutRequest = new MeasurementMarkerPutRequest(JsonConvert.DeserializeObject<MeasurementMarkerPutRequestRange>(jsonString, MeasurementMarkerPutRequest.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("MeasurementMarkerPutRequestRange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MeasurementMarkerPutRequestRange: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newMeasurementMarkerPutRequest;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MeasurementMarkerPutRequest);
        }

        /// <summary>
        /// Returns true if MeasurementMarkerPutRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MeasurementMarkerPutRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeasurementMarkerPutRequest input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

    }

    /// <summary>
    /// Custom JSON converter for MeasurementMarkerPutRequest
    /// </summary>
    public class MeasurementMarkerPutRequestJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(MeasurementMarkerPutRequest).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return MeasurementMarkerPutRequest.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
