/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = intdash.Client.FileParameter;
using OpenAPIDateConverter = intdash.Client.OpenAPIDateConverter;

namespace intdash.Model
{
    /// <summary>
    /// Member
    /// </summary>
    [DataContract(Name = "Member")]
    public partial class Member : IEquatable<Member>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Member" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Member() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Member" /> class.
        /// </summary>
        /// <param name="userUuid">メンバーのユーザーUUID (required).</param>
        /// <param name="name">メンバーの名前 (required).</param>
        /// <param name="emails">emails (required).</param>
        /// <param name="inheritedRoleUuids">親グループから継承されたメンバーのロールUUID (required).</param>
        /// <param name="roleUuids">メンバーのロールUUID (required).</param>
        /// <param name="isOwner">&#x60;true&#x60; の場合、このメンバーはオーナーです。 (required).</param>
        /// <param name="createdAt">作成日時 (required).</param>
        /// <param name="updatedAt">最終更新日時 (required).</param>
        public Member(string userUuid = default(string), string name = default(string), List<UserEmail> emails = default(List<UserEmail>), List<string> inheritedRoleUuids = default(List<string>), List<string> roleUuids = default(List<string>), bool isOwner = default(bool), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime))
        {
            // to ensure "userUuid" is required (not null)
            if (userUuid == null)
            {
                throw new ArgumentNullException("userUuid is a required property for Member and cannot be null");
            }
            this.UserUuid = userUuid;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Member and cannot be null");
            }
            this.Name = name;
            // to ensure "emails" is required (not null)
            if (emails == null)
            {
                throw new ArgumentNullException("emails is a required property for Member and cannot be null");
            }
            this.Emails = emails;
            // to ensure "inheritedRoleUuids" is required (not null)
            if (inheritedRoleUuids == null)
            {
                throw new ArgumentNullException("inheritedRoleUuids is a required property for Member and cannot be null");
            }
            this.InheritedRoleUuids = inheritedRoleUuids;
            // to ensure "roleUuids" is required (not null)
            if (roleUuids == null)
            {
                throw new ArgumentNullException("roleUuids is a required property for Member and cannot be null");
            }
            this.RoleUuids = roleUuids;
            this.IsOwner = isOwner;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// メンバーのユーザーUUID
        /// </summary>
        /// <value>メンバーのユーザーUUID</value>
        [DataMember(Name = "user_uuid", IsRequired = true, EmitDefaultValue = true)]
        public string UserUuid { get; set; }

        /// <summary>
        /// メンバーの名前
        /// </summary>
        /// <value>メンバーの名前</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Emails
        /// </summary>
        [DataMember(Name = "emails", IsRequired = true, EmitDefaultValue = true)]
        public List<UserEmail> Emails { get; set; }

        /// <summary>
        /// 親グループから継承されたメンバーのロールUUID
        /// </summary>
        /// <value>親グループから継承されたメンバーのロールUUID</value>
        [DataMember(Name = "inherited_role_uuids", IsRequired = true, EmitDefaultValue = true)]
        public List<string> InheritedRoleUuids { get; set; }

        /// <summary>
        /// メンバーのロールUUID
        /// </summary>
        /// <value>メンバーのロールUUID</value>
        [DataMember(Name = "role_uuids", IsRequired = true, EmitDefaultValue = true)]
        public List<string> RoleUuids { get; set; }

        /// <summary>
        /// &#x60;true&#x60; の場合、このメンバーはオーナーです。
        /// </summary>
        /// <value>&#x60;true&#x60; の場合、このメンバーはオーナーです。</value>
        [DataMember(Name = "is_owner", IsRequired = true, EmitDefaultValue = true)]
        public bool IsOwner { get; set; }

        /// <summary>
        /// 作成日時
        /// </summary>
        /// <value>作成日時</value>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// 最終更新日時
        /// </summary>
        /// <value>最終更新日時</value>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Member {\n");
            sb.Append("  UserUuid: ").Append(UserUuid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Emails: ").Append(Emails).Append("\n");
            sb.Append("  InheritedRoleUuids: ").Append(InheritedRoleUuids).Append("\n");
            sb.Append("  RoleUuids: ").Append(RoleUuids).Append("\n");
            sb.Append("  IsOwner: ").Append(IsOwner).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Member);
        }

        /// <summary>
        /// Returns true if Member instances are equal
        /// </summary>
        /// <param name="input">Instance of Member to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Member input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserUuid == input.UserUuid ||
                    (this.UserUuid != null &&
                    this.UserUuid.Equals(input.UserUuid))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Emails == input.Emails ||
                    this.Emails != null &&
                    input.Emails != null &&
                    this.Emails.SequenceEqual(input.Emails)
                ) && 
                (
                    this.InheritedRoleUuids == input.InheritedRoleUuids ||
                    this.InheritedRoleUuids != null &&
                    input.InheritedRoleUuids != null &&
                    this.InheritedRoleUuids.SequenceEqual(input.InheritedRoleUuids)
                ) && 
                (
                    this.RoleUuids == input.RoleUuids ||
                    this.RoleUuids != null &&
                    input.RoleUuids != null &&
                    this.RoleUuids.SequenceEqual(input.RoleUuids)
                ) && 
                (
                    this.IsOwner == input.IsOwner ||
                    this.IsOwner.Equals(input.IsOwner)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserUuid != null)
                {
                    hashCode = (hashCode * 59) + this.UserUuid.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Emails != null)
                {
                    hashCode = (hashCode * 59) + this.Emails.GetHashCode();
                }
                if (this.InheritedRoleUuids != null)
                {
                    hashCode = (hashCode * 59) + this.InheritedRoleUuids.GetHashCode();
                }
                if (this.RoleUuids != null)
                {
                    hashCode = (hashCode * 59) + this.RoleUuids.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsOwner.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
