/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = intdash.Client.FileParameter;
using OpenAPIDateConverter = intdash.Client.OpenAPIDateConverter;

namespace intdash.Model
{
    /// <summary>
    /// SignalConversionOptionNumFloatingPoint
    /// </summary>
    [DataContract(Name = "SignalConversionOptionNumFloatingPoint")]
    public partial class SignalConversionOptionNumFloatingPoint : IEquatable<SignalConversionOptionNumFloatingPoint>
    {
        /// <summary>
        /// エンディアン
        /// </summary>
        /// <value>エンディアン</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EndianEnum
        {
            /// <summary>
            /// Enum Big for value: big
            /// </summary>
            [EnumMember(Value = "big")]
            Big = 1,

            /// <summary>
            /// Enum Little for value: little
            /// </summary>
            [EnumMember(Value = "little")]
            Little = 2

        }


        /// <summary>
        /// エンディアン
        /// </summary>
        /// <value>エンディアン</value>
        [DataMember(Name = "endian", IsRequired = true, EmitDefaultValue = true)]
        public EndianEnum Endian { get; set; }
        /// <summary>
        /// Defines Precision
        /// </summary>
        public enum PrecisionEnum
        {
            /// <summary>
            /// Enum NUMBER_32 for value: 32
            /// </summary>
            NUMBER_32 = 32,

            /// <summary>
            /// Enum NUMBER_64 for value: 64
            /// </summary>
            NUMBER_64 = 64

        }


        /// <summary>
        /// Gets or Sets Precision
        /// </summary>
        [DataMember(Name = "precision", IsRequired = true, EmitDefaultValue = true)]
        public PrecisionEnum Precision { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignalConversionOptionNumFloatingPoint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignalConversionOptionNumFloatingPoint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignalConversionOptionNumFloatingPoint" /> class.
        /// </summary>
        /// <param name="startbyte">開始バイト位置 (required).</param>
        /// <param name="endian">エンディアン (required).</param>
        /// <param name="precision">precision (required).</param>
        public SignalConversionOptionNumFloatingPoint(int startbyte = default(int), EndianEnum endian = default(EndianEnum), PrecisionEnum precision = default(PrecisionEnum))
        {
            this.Startbyte = startbyte;
            this.Endian = endian;
            this.Precision = precision;
        }

        /// <summary>
        /// 開始バイト位置
        /// </summary>
        /// <value>開始バイト位置</value>
        [DataMember(Name = "startbyte", IsRequired = true, EmitDefaultValue = true)]
        public int Startbyte { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignalConversionOptionNumFloatingPoint {\n");
            sb.Append("  Startbyte: ").Append(Startbyte).Append("\n");
            sb.Append("  Endian: ").Append(Endian).Append("\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignalConversionOptionNumFloatingPoint);
        }

        /// <summary>
        /// Returns true if SignalConversionOptionNumFloatingPoint instances are equal
        /// </summary>
        /// <param name="input">Instance of SignalConversionOptionNumFloatingPoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignalConversionOptionNumFloatingPoint input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Startbyte == input.Startbyte ||
                    this.Startbyte.Equals(input.Startbyte)
                ) && 
                (
                    this.Endian == input.Endian ||
                    this.Endian.Equals(input.Endian)
                ) && 
                (
                    this.Precision == input.Precision ||
                    this.Precision.Equals(input.Precision)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Startbyte.GetHashCode();
                hashCode = (hashCode * 59) + this.Endian.GetHashCode();
                hashCode = (hashCode * 59) + this.Precision.GetHashCode();
                return hashCode;
            }
        }

    }

}
