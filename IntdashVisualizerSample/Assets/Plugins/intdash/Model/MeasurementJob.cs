/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = intdash.Client.FileParameter;
using OpenAPIDateConverter = intdash.Client.OpenAPIDateConverter;

namespace intdash.Model
{
    /// <summary>
    /// MeasurementJob
    /// </summary>
    [DataContract(Name = "MeasurementJob")]
    public partial class MeasurementJob : IEquatable<MeasurementJob>
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public MeasurementJobStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MeasurementJob" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MeasurementJob() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MeasurementJob" /> class.
        /// </summary>
        /// <param name="uuid">ジョブのUUID (required).</param>
        /// <param name="measUuid">計測のUUID (required).</param>
        /// <param name="measurement">measurement (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="message">ジョブの結果を表すメッセージ。 ジョブのステータスが &#x60;failed&#x60; の場合、メッセージが以下の形式で表示されます。  &#x60;&lt;row_number&gt;:&lt;column_number&gt;:&lt;column_name&gt;:&lt;cell_value&gt;:&lt;error_message&gt;&#x60;  行番号や列番号が不明の場合は &#x60;0&#x60; が出力されます。 * ex.1 &#x60;2:1:time:1539263580:A time must be after the base_time\\: BaseTime&#x3D;2018-10-11 13\\:13\\:03 +0000 UTC&#x60; * ex.2 &#x60;4:0:::Wrong number of fields&#x60; * ex.3 &#x60;0:0:::Unexpected Error&#x60;  &#x60;:&#x60; と &#x60;\\&#x60; はエスケープされ、 &#x60;\\:&#x60; と &#x60;\\\\&#x60; として出力されます。 (required).</param>
        /// <param name="fileName">ジョブの対象のファイル名。 同じ日に同じ名前のファイルがアップロードされた場合は、ランダムな接頭辞が付与されます。 (required).</param>
        /// <param name="createdAt">ジョブの作成日時 (required).</param>
        /// <param name="updatedAt">ジョブの最終更新日時 (required).</param>
        public MeasurementJob(string uuid = default(string), string measUuid = default(string), Measurement measurement = default(Measurement), MeasurementJobStatus status = default(MeasurementJobStatus), string message = default(string), string fileName = default(string), string createdAt = default(string), string updatedAt = default(string))
        {
            // to ensure "uuid" is required (not null)
            if (uuid == null)
            {
                throw new ArgumentNullException("uuid is a required property for MeasurementJob and cannot be null");
            }
            this.Uuid = uuid;
            // to ensure "measUuid" is required (not null)
            if (measUuid == null)
            {
                throw new ArgumentNullException("measUuid is a required property for MeasurementJob and cannot be null");
            }
            this.MeasUuid = measUuid;
            // to ensure "measurement" is required (not null)
            if (measurement == null)
            {
                throw new ArgumentNullException("measurement is a required property for MeasurementJob and cannot be null");
            }
            this.Measurement = measurement;
            this.Status = status;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for MeasurementJob and cannot be null");
            }
            this.Message = message;
            // to ensure "fileName" is required (not null)
            if (fileName == null)
            {
                throw new ArgumentNullException("fileName is a required property for MeasurementJob and cannot be null");
            }
            this.FileName = fileName;
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new ArgumentNullException("createdAt is a required property for MeasurementJob and cannot be null");
            }
            this.CreatedAt = createdAt;
            // to ensure "updatedAt" is required (not null)
            if (updatedAt == null)
            {
                throw new ArgumentNullException("updatedAt is a required property for MeasurementJob and cannot be null");
            }
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// ジョブのUUID
        /// </summary>
        /// <value>ジョブのUUID</value>
        [DataMember(Name = "uuid", IsRequired = true, EmitDefaultValue = true)]
        public string Uuid { get; set; }

        /// <summary>
        /// 計測のUUID
        /// </summary>
        /// <value>計測のUUID</value>
        [DataMember(Name = "meas_uuid", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string MeasUuid { get; set; }

        /// <summary>
        /// Gets or Sets Measurement
        /// </summary>
        [DataMember(Name = "measurement", IsRequired = true, EmitDefaultValue = true)]
        public Measurement Measurement { get; set; }

        /// <summary>
        /// ジョブの結果を表すメッセージ。 ジョブのステータスが &#x60;failed&#x60; の場合、メッセージが以下の形式で表示されます。  &#x60;&lt;row_number&gt;:&lt;column_number&gt;:&lt;column_name&gt;:&lt;cell_value&gt;:&lt;error_message&gt;&#x60;  行番号や列番号が不明の場合は &#x60;0&#x60; が出力されます。 * ex.1 &#x60;2:1:time:1539263580:A time must be after the base_time\\: BaseTime&#x3D;2018-10-11 13\\:13\\:03 +0000 UTC&#x60; * ex.2 &#x60;4:0:::Wrong number of fields&#x60; * ex.3 &#x60;0:0:::Unexpected Error&#x60;  &#x60;:&#x60; と &#x60;\\&#x60; はエスケープされ、 &#x60;\\:&#x60; と &#x60;\\\\&#x60; として出力されます。
        /// </summary>
        /// <value>ジョブの結果を表すメッセージ。 ジョブのステータスが &#x60;failed&#x60; の場合、メッセージが以下の形式で表示されます。  &#x60;&lt;row_number&gt;:&lt;column_number&gt;:&lt;column_name&gt;:&lt;cell_value&gt;:&lt;error_message&gt;&#x60;  行番号や列番号が不明の場合は &#x60;0&#x60; が出力されます。 * ex.1 &#x60;2:1:time:1539263580:A time must be after the base_time\\: BaseTime&#x3D;2018-10-11 13\\:13\\:03 +0000 UTC&#x60; * ex.2 &#x60;4:0:::Wrong number of fields&#x60; * ex.3 &#x60;0:0:::Unexpected Error&#x60;  &#x60;:&#x60; と &#x60;\\&#x60; はエスケープされ、 &#x60;\\:&#x60; と &#x60;\\\\&#x60; として出力されます。</value>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// ジョブの対象のファイル名。 同じ日に同じ名前のファイルがアップロードされた場合は、ランダムな接頭辞が付与されます。
        /// </summary>
        /// <value>ジョブの対象のファイル名。 同じ日に同じ名前のファイルがアップロードされた場合は、ランダムな接頭辞が付与されます。</value>
        [DataMember(Name = "file_name", IsRequired = true, EmitDefaultValue = true)]
        public string FileName { get; set; }

        /// <summary>
        /// ジョブの作成日時
        /// </summary>
        /// <value>ジョブの作成日時</value>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// ジョブの最終更新日時
        /// </summary>
        /// <value>ジョブの最終更新日時</value>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MeasurementJob {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  MeasUuid: ").Append(MeasUuid).Append("\n");
            sb.Append("  Measurement: ").Append(Measurement).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MeasurementJob);
        }

        /// <summary>
        /// Returns true if MeasurementJob instances are equal
        /// </summary>
        /// <param name="input">Instance of MeasurementJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeasurementJob input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.MeasUuid == input.MeasUuid ||
                    (this.MeasUuid != null &&
                    this.MeasUuid.Equals(input.MeasUuid))
                ) && 
                (
                    this.Measurement == input.Measurement ||
                    (this.Measurement != null &&
                    this.Measurement.Equals(input.Measurement))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.MeasUuid != null)
                {
                    hashCode = (hashCode * 59) + this.MeasUuid.GetHashCode();
                }
                if (this.Measurement != null)
                {
                    hashCode = (hashCode * 59) + this.Measurement.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
