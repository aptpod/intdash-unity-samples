/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = intdash.Client.FileParameter;
using OpenAPIDateConverter = intdash.Client.OpenAPIDateConverter;

namespace intdash.Model
{
    /// <summary>
    /// Video
    /// </summary>
    [DataContract(Name = "Video")]
    public partial class Video : IEquatable<Video>
    {

        /// <summary>
        /// Gets or Sets Codec
        /// </summary>
        [DataMember(Name = "codec", IsRequired = true, EmitDefaultValue = true)]
        public VideoCodecs Codec { get; set; }

        /// <summary>
        /// Gets or Sets SourceDataType
        /// </summary>
        [DataMember(Name = "source_data_type", IsRequired = true, EmitDefaultValue = true)]
        public VideoSourceDataType SourceDataType { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public VideoStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Video" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Video() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Video" /> class.
        /// </summary>
        /// <param name="uuid">動画（video）のUUID (required).</param>
        /// <param name="measurementUuid">計測のUUID (required).</param>
        /// <param name="measurement">measurement.</param>
        /// <param name="edgeUuid">エッジのUUID (required).</param>
        /// <param name="channel">チャンネル (required).</param>
        /// <param name="codec">codec (required).</param>
        /// <param name="sourceDataType">sourceDataType (required).</param>
        /// <param name="offsetTime">計測開始からのオフセット（マイクロ秒） (required).</param>
        /// <param name="duration">長さ（マイクロ秒） (required).</param>
        /// <param name="fps">フレームレート（fps） (required).</param>
        /// <param name="width">動画の幅 (required).</param>
        /// <param name="height">動画の高さ (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="hls">hls.</param>
        /// <param name="mp4s">この動画を変換して作成されたMP4のリスト (required).</param>
        /// <param name="jpegs">この動画を変換して作成されたJPEGのリスト (required).</param>
        /// <param name="createdAt">作成された日時 (required).</param>
        /// <param name="updatedAt">最終更新日時 (required).</param>
        public Video(Guid uuid = default(Guid), Guid measurementUuid = default(Guid), MediaMeasurement measurement = default(MediaMeasurement), Guid edgeUuid = default(Guid), int channel = default(int), VideoCodecs codec = default(VideoCodecs), VideoSourceDataType sourceDataType = default(VideoSourceDataType), int offsetTime = default(int), int duration = default(int), decimal fps = default(decimal), int width = default(int), int height = default(int), VideoStatus status = default(VideoStatus), Playlist hls = default(Playlist), List<MP4> mp4s = default(List<MP4>), List<Jpeg> jpegs = default(List<Jpeg>), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime))
        {
            this.Uuid = uuid;
            this.MeasurementUuid = measurementUuid;
            this.EdgeUuid = edgeUuid;
            this.Channel = channel;
            this.Codec = codec;
            this.SourceDataType = sourceDataType;
            this.OffsetTime = offsetTime;
            this.Duration = duration;
            this.Fps = fps;
            this.Width = width;
            this.Height = height;
            this.Status = status;
            // to ensure "mp4s" is required (not null)
            if (mp4s == null)
            {
                throw new ArgumentNullException("mp4s is a required property for Video and cannot be null");
            }
            this.Mp4s = mp4s;
            // to ensure "jpegs" is required (not null)
            if (jpegs == null)
            {
                throw new ArgumentNullException("jpegs is a required property for Video and cannot be null");
            }
            this.Jpegs = jpegs;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.Measurement = measurement;
            this.Hls = hls;
        }

        /// <summary>
        /// 動画（video）のUUID
        /// </summary>
        /// <value>動画（video）のUUID</value>
        [DataMember(Name = "uuid", IsRequired = true, EmitDefaultValue = true)]
        public Guid Uuid { get; set; }

        /// <summary>
        /// 計測のUUID
        /// </summary>
        /// <value>計測のUUID</value>
        [DataMember(Name = "measurement_uuid", IsRequired = true, EmitDefaultValue = true)]
        public Guid MeasurementUuid { get; set; }

        /// <summary>
        /// Gets or Sets Measurement
        /// </summary>
        [DataMember(Name = "measurement", EmitDefaultValue = false)]
        public MediaMeasurement Measurement { get; set; }

        /// <summary>
        /// エッジのUUID
        /// </summary>
        /// <value>エッジのUUID</value>
        [DataMember(Name = "edge_uuid", IsRequired = true, EmitDefaultValue = true)]
        public Guid EdgeUuid { get; set; }

        /// <summary>
        /// チャンネル
        /// </summary>
        /// <value>チャンネル</value>
        [DataMember(Name = "channel", IsRequired = true, EmitDefaultValue = true)]
        public int Channel { get; set; }

        /// <summary>
        /// 計測開始からのオフセット（マイクロ秒）
        /// </summary>
        /// <value>計測開始からのオフセット（マイクロ秒）</value>
        [DataMember(Name = "offset_time", IsRequired = true, EmitDefaultValue = true)]
        public int OffsetTime { get; set; }

        /// <summary>
        /// 長さ（マイクロ秒）
        /// </summary>
        /// <value>長さ（マイクロ秒）</value>
        [DataMember(Name = "duration", IsRequired = true, EmitDefaultValue = true)]
        public int Duration { get; set; }

        /// <summary>
        /// フレームレート（fps）
        /// </summary>
        /// <value>フレームレート（fps）</value>
        [DataMember(Name = "fps", IsRequired = true, EmitDefaultValue = true)]
        public decimal Fps { get; set; }

        /// <summary>
        /// 動画の幅
        /// </summary>
        /// <value>動画の幅</value>
        [DataMember(Name = "width", IsRequired = true, EmitDefaultValue = true)]
        public int Width { get; set; }

        /// <summary>
        /// 動画の高さ
        /// </summary>
        /// <value>動画の高さ</value>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = true)]
        public int Height { get; set; }

        /// <summary>
        /// Gets or Sets Hls
        /// </summary>
        [DataMember(Name = "hls", EmitDefaultValue = false)]
        public Playlist Hls { get; set; }

        /// <summary>
        /// この動画を変換して作成されたMP4のリスト
        /// </summary>
        /// <value>この動画を変換して作成されたMP4のリスト</value>
        [DataMember(Name = "mp4s", IsRequired = true, EmitDefaultValue = true)]
        public List<MP4> Mp4s { get; set; }

        /// <summary>
        /// この動画を変換して作成されたJPEGのリスト
        /// </summary>
        /// <value>この動画を変換して作成されたJPEGのリスト</value>
        [DataMember(Name = "jpegs", IsRequired = true, EmitDefaultValue = true)]
        public List<Jpeg> Jpegs { get; set; }

        /// <summary>
        /// 作成された日時
        /// </summary>
        /// <value>作成された日時</value>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// 最終更新日時
        /// </summary>
        /// <value>最終更新日時</value>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Video {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  MeasurementUuid: ").Append(MeasurementUuid).Append("\n");
            sb.Append("  Measurement: ").Append(Measurement).Append("\n");
            sb.Append("  EdgeUuid: ").Append(EdgeUuid).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Codec: ").Append(Codec).Append("\n");
            sb.Append("  SourceDataType: ").Append(SourceDataType).Append("\n");
            sb.Append("  OffsetTime: ").Append(OffsetTime).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Fps: ").Append(Fps).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Hls: ").Append(Hls).Append("\n");
            sb.Append("  Mp4s: ").Append(Mp4s).Append("\n");
            sb.Append("  Jpegs: ").Append(Jpegs).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Video);
        }

        /// <summary>
        /// Returns true if Video instances are equal
        /// </summary>
        /// <param name="input">Instance of Video to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Video input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.MeasurementUuid == input.MeasurementUuid ||
                    (this.MeasurementUuid != null &&
                    this.MeasurementUuid.Equals(input.MeasurementUuid))
                ) && 
                (
                    this.Measurement == input.Measurement ||
                    (this.Measurement != null &&
                    this.Measurement.Equals(input.Measurement))
                ) && 
                (
                    this.EdgeUuid == input.EdgeUuid ||
                    (this.EdgeUuid != null &&
                    this.EdgeUuid.Equals(input.EdgeUuid))
                ) && 
                (
                    this.Channel == input.Channel ||
                    this.Channel.Equals(input.Channel)
                ) && 
                (
                    this.Codec == input.Codec ||
                    this.Codec.Equals(input.Codec)
                ) && 
                (
                    this.SourceDataType == input.SourceDataType ||
                    this.SourceDataType.Equals(input.SourceDataType)
                ) && 
                (
                    this.OffsetTime == input.OffsetTime ||
                    this.OffsetTime.Equals(input.OffsetTime)
                ) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                ) && 
                (
                    this.Fps == input.Fps ||
                    this.Fps.Equals(input.Fps)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Hls == input.Hls ||
                    (this.Hls != null &&
                    this.Hls.Equals(input.Hls))
                ) && 
                (
                    this.Mp4s == input.Mp4s ||
                    this.Mp4s != null &&
                    input.Mp4s != null &&
                    this.Mp4s.SequenceEqual(input.Mp4s)
                ) && 
                (
                    this.Jpegs == input.Jpegs ||
                    this.Jpegs != null &&
                    input.Jpegs != null &&
                    this.Jpegs.SequenceEqual(input.Jpegs)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.MeasurementUuid != null)
                {
                    hashCode = (hashCode * 59) + this.MeasurementUuid.GetHashCode();
                }
                if (this.Measurement != null)
                {
                    hashCode = (hashCode * 59) + this.Measurement.GetHashCode();
                }
                if (this.EdgeUuid != null)
                {
                    hashCode = (hashCode * 59) + this.EdgeUuid.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Channel.GetHashCode();
                hashCode = (hashCode * 59) + this.Codec.GetHashCode();
                hashCode = (hashCode * 59) + this.SourceDataType.GetHashCode();
                hashCode = (hashCode * 59) + this.OffsetTime.GetHashCode();
                hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                hashCode = (hashCode * 59) + this.Fps.GetHashCode();
                hashCode = (hashCode * 59) + this.Width.GetHashCode();
                hashCode = (hashCode * 59) + this.Height.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Hls != null)
                {
                    hashCode = (hashCode * 59) + this.Hls.GetHashCode();
                }
                if (this.Mp4s != null)
                {
                    hashCode = (hashCode * 59) + this.Mp4s.GetHashCode();
                }
                if (this.Jpegs != null)
                {
                    hashCode = (hashCode * 59) + this.Jpegs.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
