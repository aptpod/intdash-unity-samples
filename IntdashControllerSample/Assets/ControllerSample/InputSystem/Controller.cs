//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/ControllerSample/InputSystem/Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControllerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControllerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controller"",
    ""maps"": [
        {
            ""name"": ""Controller"",
            ""id"": ""ff712ca2-ad86-490d-aea8-cb9d3480c89f"",
            ""actions"": [
                {
                    ""name"": ""Steering"",
                    ""type"": ""Value"",
                    ""id"": ""f4f7749b-e799-4aa9-85d3-9bffc0f46289"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Accel"",
                    ""type"": ""Value"",
                    ""id"": ""77054643-9cbd-4348-85b8-a176f1cac143"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Footbrake"",
                    ""type"": ""Value"",
                    ""id"": ""f8212b61-61b4-475a-8051-7b4ed077d24d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Handbrake"",
                    ""type"": ""Button"",
                    ""id"": ""c55252b7-9924-4fed-b7ee-94ee018e543d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""921b51e6-f8a7-4452-b854-5f503314873e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accel"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""c5be7e9f-3863-411c-a3fc-bd23197e19a6"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""3a0ef8c5-6af7-4a65-a3f6-e934514e4e3e"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keybord"",
                    ""id"": ""a1d701bd-78a2-48b3-a841-546fdb11550f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accel"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""d68f1530-a051-4bee-a960-2a1018fee405"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""6a3fcd96-2df6-47bc-b8b2-a7f486b93ba2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keybord"",
                    ""id"": ""962d41e4-a0c5-475c-bd86-ea7bd61efc14"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""1a7be0db-a07a-454b-b829-1c487318f910"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""79325398-5b63-4005-8772-295356e1f335"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""ad67f347-940a-4b75-b511-1c1cc0d4c04a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""120761f1-7453-4bb5-a371-d1c322c57f11"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""bf782396-da60-49bc-bf43-3e6a3049f151"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c977a140-dadf-423c-989c-0a53f315ce40"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Footbrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""656c5641-7adc-4eee-a737-0fdf48b672e9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Footbrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33bd0a69-714b-4348-8eae-4ba8c3cbb35e"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Handbrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c4890be-ed94-410d-868d-f127e63d9e50"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Handbrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Controller
        m_Controller = asset.FindActionMap("Controller", throwIfNotFound: true);
        m_Controller_Steering = m_Controller.FindAction("Steering", throwIfNotFound: true);
        m_Controller_Accel = m_Controller.FindAction("Accel", throwIfNotFound: true);
        m_Controller_Footbrake = m_Controller.FindAction("Footbrake", throwIfNotFound: true);
        m_Controller_Handbrake = m_Controller.FindAction("Handbrake", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controller
    private readonly InputActionMap m_Controller;
    private IControllerActions m_ControllerActionsCallbackInterface;
    private readonly InputAction m_Controller_Steering;
    private readonly InputAction m_Controller_Accel;
    private readonly InputAction m_Controller_Footbrake;
    private readonly InputAction m_Controller_Handbrake;
    public struct ControllerActions
    {
        private @ControllerInputs m_Wrapper;
        public ControllerActions(@ControllerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Steering => m_Wrapper.m_Controller_Steering;
        public InputAction @Accel => m_Wrapper.m_Controller_Accel;
        public InputAction @Footbrake => m_Wrapper.m_Controller_Footbrake;
        public InputAction @Handbrake => m_Wrapper.m_Controller_Handbrake;
        public InputActionMap Get() { return m_Wrapper.m_Controller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerActions set) { return set.Get(); }
        public void SetCallbacks(IControllerActions instance)
        {
            if (m_Wrapper.m_ControllerActionsCallbackInterface != null)
            {
                @Steering.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnSteering;
                @Steering.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnSteering;
                @Steering.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnSteering;
                @Accel.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAccel;
                @Accel.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAccel;
                @Accel.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAccel;
                @Footbrake.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnFootbrake;
                @Footbrake.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnFootbrake;
                @Footbrake.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnFootbrake;
                @Handbrake.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnHandbrake;
                @Handbrake.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnHandbrake;
                @Handbrake.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnHandbrake;
            }
            m_Wrapper.m_ControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Steering.started += instance.OnSteering;
                @Steering.performed += instance.OnSteering;
                @Steering.canceled += instance.OnSteering;
                @Accel.started += instance.OnAccel;
                @Accel.performed += instance.OnAccel;
                @Accel.canceled += instance.OnAccel;
                @Footbrake.started += instance.OnFootbrake;
                @Footbrake.performed += instance.OnFootbrake;
                @Footbrake.canceled += instance.OnFootbrake;
                @Handbrake.started += instance.OnHandbrake;
                @Handbrake.performed += instance.OnHandbrake;
                @Handbrake.canceled += instance.OnHandbrake;
            }
        }
    }
    public ControllerActions @Controller => new ControllerActions(this);
    public interface IControllerActions
    {
        void OnSteering(InputAction.CallbackContext context);
        void OnAccel(InputAction.CallbackContext context);
        void OnFootbrake(InputAction.CallbackContext context);
        void OnHandbrake(InputAction.CallbackContext context);
    }
}
