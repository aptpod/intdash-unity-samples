/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using intdash.Client;
using intdash.Model;

namespace intdash.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMediaVideosApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel Creating JPEG
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からJPEGデータへの変換をキャンセルします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns>Jpeg</returns>
        [Obsolete]
        Jpeg CancelCreatingJpeg(string videoUuid, string jpegUuid);

        /// <summary>
        /// Cancel Creating JPEG
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からJPEGデータへの変換をキャンセルします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns>ApiResponse of Jpeg</returns>
        [Obsolete]
        ApiResponse<Jpeg> CancelCreatingJpegWithHttpInfo(string videoUuid, string jpegUuid);
        /// <summary>
        /// Cancel Creating MP4
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からMP4データへの変換をキャンセルします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns>MP4</returns>
        [Obsolete]
        MP4 CancelCreatingMP4(string videoUuid, string mp4Uuid);

        /// <summary>
        /// Cancel Creating MP4
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からMP4データへの変換をキャンセルします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns>ApiResponse of MP4</returns>
        [Obsolete]
        ApiResponse<MP4> CancelCreatingMP4WithHttpInfo(string videoUuid, string mp4Uuid);
        /// <summary>
        /// Cancel Creating Project JPEG
        /// </summary>
        /// <remarks>
        /// 動画（video）からJPEGデータへの変換をキャンセルします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns>Jpeg</returns>
        Jpeg CancelCreatingProjectJpeg(string projectUuid, string videoUuid, string jpegUuid);

        /// <summary>
        /// Cancel Creating Project JPEG
        /// </summary>
        /// <remarks>
        /// 動画（video）からJPEGデータへの変換をキャンセルします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns>ApiResponse of Jpeg</returns>
        ApiResponse<Jpeg> CancelCreatingProjectJpegWithHttpInfo(string projectUuid, string videoUuid, string jpegUuid);
        /// <summary>
        /// Cancel Creating Project MP4
        /// </summary>
        /// <remarks>
        /// 動画（video）からMP4データへの変換をキャンセルします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns>MP4</returns>
        MP4 CancelCreatingProjectMP4(string projectUuid, string videoUuid, string mp4Uuid);

        /// <summary>
        /// Cancel Creating Project MP4
        /// </summary>
        /// <remarks>
        /// 動画（video）からMP4データへの変換をキャンセルします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns>ApiResponse of MP4</returns>
        ApiResponse<MP4> CancelCreatingProjectMP4WithHttpInfo(string projectUuid, string videoUuid, string mp4Uuid);
        /// <summary>
        /// Create JPEG
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してJPEGデータを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createJpegRequest"> (optional)</param>
        /// <returns>Jpeg</returns>
        [Obsolete]
        Jpeg CreateJpeg(string videoUuid, CreateJpegRequest createJpegRequest = default(CreateJpegRequest));

        /// <summary>
        /// Create JPEG
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してJPEGデータを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createJpegRequest"> (optional)</param>
        /// <returns>ApiResponse of Jpeg</returns>
        [Obsolete]
        ApiResponse<Jpeg> CreateJpegWithHttpInfo(string videoUuid, CreateJpegRequest createJpegRequest = default(CreateJpegRequest));
        /// <summary>
        /// Create MP4
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してMP4データを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createMP4Request"> (optional)</param>
        /// <returns>MP4</returns>
        [Obsolete]
        MP4 CreateMP4(string videoUuid, CreateMP4Request createMP4Request = default(CreateMP4Request));

        /// <summary>
        /// Create MP4
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してMP4データを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createMP4Request"> (optional)</param>
        /// <returns>ApiResponse of MP4</returns>
        [Obsolete]
        ApiResponse<MP4> CreateMP4WithHttpInfo(string videoUuid, CreateMP4Request createMP4Request = default(CreateMP4Request));
        /// <summary>
        /// Create Project JPEG
        /// </summary>
        /// <remarks>
        /// 動画（video）を変換してJPEGデータを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createJpegRequest"> (optional)</param>
        /// <returns>Jpeg</returns>
        Jpeg CreateProjectJpeg(string projectUuid, string videoUuid, CreateJpegRequest createJpegRequest = default(CreateJpegRequest));

        /// <summary>
        /// Create Project JPEG
        /// </summary>
        /// <remarks>
        /// 動画（video）を変換してJPEGデータを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createJpegRequest"> (optional)</param>
        /// <returns>ApiResponse of Jpeg</returns>
        ApiResponse<Jpeg> CreateProjectJpegWithHttpInfo(string projectUuid, string videoUuid, CreateJpegRequest createJpegRequest = default(CreateJpegRequest));
        /// <summary>
        /// Create Project MP4
        /// </summary>
        /// <remarks>
        /// 動画（video）を変換してMP4データを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createMP4Request"> (optional)</param>
        /// <returns>MP4</returns>
        MP4 CreateProjectMP4(string projectUuid, string videoUuid, CreateMP4Request createMP4Request = default(CreateMP4Request));

        /// <summary>
        /// Create Project MP4
        /// </summary>
        /// <remarks>
        /// 動画（video）を変換してMP4データを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createMP4Request"> (optional)</param>
        /// <returns>ApiResponse of MP4</returns>
        ApiResponse<MP4> CreateProjectMP4WithHttpInfo(string projectUuid, string videoUuid, CreateMP4Request createMP4Request = default(CreateMP4Request));
        /// <summary>
        /// Delete JPEG
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns></returns>
        [Obsolete]
        void DeleteJpeg(string videoUuid, string jpegUuid);

        /// <summary>
        /// Delete JPEG
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> DeleteJpegWithHttpInfo(string videoUuid, string jpegUuid);
        /// <summary>
        /// Delete MP4
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns></returns>
        [Obsolete]
        void DeleteMP4(string videoUuid, string mp4Uuid);

        /// <summary>
        /// Delete MP4
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> DeleteMP4WithHttpInfo(string videoUuid, string mp4Uuid);
        /// <summary>
        /// Delete Project JPEG
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたJPEGデータを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns></returns>
        void DeleteProjectJpeg(string projectUuid, string videoUuid, string jpegUuid);

        /// <summary>
        /// Delete Project JPEG
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたJPEGデータを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectJpegWithHttpInfo(string projectUuid, string videoUuid, string jpegUuid);
        /// <summary>
        /// Delete Project MP4
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたMP4データを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns></returns>
        void DeleteProjectMP4(string projectUuid, string videoUuid, string mp4Uuid);

        /// <summary>
        /// Delete Project MP4
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたMP4データを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectMP4WithHttpInfo(string projectUuid, string videoUuid, string mp4Uuid);
        /// <summary>
        /// Get JPEG
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns>Jpeg</returns>
        [Obsolete]
        Jpeg GetJpeg(string videoUuid, string jpegUuid);

        /// <summary>
        /// Get JPEG
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns>ApiResponse of Jpeg</returns>
        [Obsolete]
        ApiResponse<Jpeg> GetJpegWithHttpInfo(string videoUuid, string jpegUuid);
        /// <summary>
        /// Get JPEG as zip
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） JPEGデータをZIPファイルにまとめた形で取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="indexes">取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)</param>
        /// <returns>FileParameter</returns>
        [Obsolete]
        FileParameter GetJpegAsZip(string videoUuid, string jpegUuid, List<int> indexes = default(List<int>));

        /// <summary>
        /// Get JPEG as zip
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） JPEGデータをZIPファイルにまとめた形で取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="indexes">取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)</param>
        /// <returns>ApiResponse of FileParameter</returns>
        [Obsolete]
        ApiResponse<FileParameter> GetJpegAsZipWithHttpInfo(string videoUuid, string jpegUuid, List<int> indexes = default(List<int>));
        /// <summary>
        /// List JPEGs
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>Jpegs</returns>
        [Obsolete]
        Jpegs GetJpegs(string videoUuid);

        /// <summary>
        /// List JPEGs
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>ApiResponse of Jpegs</returns>
        [Obsolete]
        ApiResponse<Jpegs> GetJpegsWithHttpInfo(string videoUuid);
        /// <summary>
        /// Get MP4
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データの情報を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns>MP4</returns>
        [Obsolete]
        MP4 GetMP4(string videoUuid, string mp4Uuid);

        /// <summary>
        /// Get MP4
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データの情報を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns>ApiResponse of MP4</returns>
        [Obsolete]
        ApiResponse<MP4> GetMP4WithHttpInfo(string videoUuid, string mp4Uuid);
        /// <summary>
        /// List MP4s
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>MP4s</returns>
        [Obsolete]
        MP4s GetMP4s(string videoUuid);

        /// <summary>
        /// List MP4s
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>ApiResponse of MP4s</returns>
        [Obsolete]
        ApiResponse<MP4s> GetMP4sWithHttpInfo(string videoUuid);
        /// <summary>
        /// Get Project JPEG
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns>Jpeg</returns>
        Jpeg GetProjectJpeg(string projectUuid, string videoUuid, string jpegUuid);

        /// <summary>
        /// Get Project JPEG
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns>ApiResponse of Jpeg</returns>
        ApiResponse<Jpeg> GetProjectJpegWithHttpInfo(string projectUuid, string videoUuid, string jpegUuid);
        /// <summary>
        /// Get Project JPEG as zip
        /// </summary>
        /// <remarks>
        /// JPEGデータをZIPファイルにまとめた形で取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="indexes">取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)</param>
        /// <returns>FileParameter</returns>
        FileParameter GetProjectJpegAsZip(string projectUuid, string videoUuid, string jpegUuid, List<int> indexes = default(List<int>));

        /// <summary>
        /// Get Project JPEG as zip
        /// </summary>
        /// <remarks>
        /// JPEGデータをZIPファイルにまとめた形で取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="indexes">取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> GetProjectJpegAsZipWithHttpInfo(string projectUuid, string videoUuid, string jpegUuid, List<int> indexes = default(List<int>));
        /// <summary>
        /// List Project JPEGs
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたJPEGデータのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>Jpegs</returns>
        Jpegs GetProjectJpegs(string projectUuid, string videoUuid);

        /// <summary>
        /// List Project JPEGs
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたJPEGデータのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>ApiResponse of Jpegs</returns>
        ApiResponse<Jpegs> GetProjectJpegsWithHttpInfo(string projectUuid, string videoUuid);
        /// <summary>
        /// Get Project MP4
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたMP4データの情報を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns>MP4</returns>
        MP4 GetProjectMP4(string projectUuid, string videoUuid, string mp4Uuid);

        /// <summary>
        /// Get Project MP4
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたMP4データの情報を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns>ApiResponse of MP4</returns>
        ApiResponse<MP4> GetProjectMP4WithHttpInfo(string projectUuid, string videoUuid, string mp4Uuid);
        /// <summary>
        /// List Project MP4s
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたMP4データのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>MP4s</returns>
        MP4s GetProjectMP4s(string projectUuid, string videoUuid);

        /// <summary>
        /// List Project MP4s
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたMP4データのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>ApiResponse of MP4s</returns>
        ApiResponse<MP4s> GetProjectMP4sWithHttpInfo(string projectUuid, string videoUuid);
        /// <summary>
        /// Get Project Video
        /// </summary>
        /// <remarks>
        /// 動画を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>Video</returns>
        Video GetProjectVideo(string projectUuid, string videoUuid);

        /// <summary>
        /// Get Project Video
        /// </summary>
        /// <remarks>
        /// 動画を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>ApiResponse of Video</returns>
        ApiResponse<Video> GetProjectVideoWithHttpInfo(string projectUuid, string videoUuid);
        /// <summary>
        /// List Project Videos
        /// </summary>
        /// <remarks>
        /// 動画（video）のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">動画（video）のUUID (optional)</param>
        /// <param name="measUuid">計測のUUID (optional)</param>
        /// <param name="channel">チャンネル (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to &quot;create_at+&quot;)</param>
        /// <param name="page">取得するページ番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 100)</param>
        /// <returns>Videos</returns>
        Videos GetProjectVideos(string projectUuid, string uuid = default(string), string measUuid = default(string), int? channel = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// List Project Videos
        /// </summary>
        /// <remarks>
        /// 動画（video）のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">動画（video）のUUID (optional)</param>
        /// <param name="measUuid">計測のUUID (optional)</param>
        /// <param name="channel">チャンネル (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to &quot;create_at+&quot;)</param>
        /// <param name="page">取得するページ番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 100)</param>
        /// <returns>ApiResponse of Videos</returns>
        ApiResponse<Videos> GetProjectVideosWithHttpInfo(string projectUuid, string uuid = default(string), string measUuid = default(string), int? channel = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Get Video
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>Video</returns>
        [Obsolete]
        Video GetVideo(string videoUuid);

        /// <summary>
        /// Get Video
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>ApiResponse of Video</returns>
        [Obsolete]
        ApiResponse<Video> GetVideoWithHttpInfo(string videoUuid);
        /// <summary>
        /// List Videos
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">動画（video）のUUID (optional)</param>
        /// <param name="measUuid">計測のUUID (optional)</param>
        /// <param name="channel">チャンネル (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to &quot;create_at+&quot;)</param>
        /// <param name="page">取得するページ番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 100)</param>
        /// <returns>Videos</returns>
        [Obsolete]
        Videos GetVideos(string uuid = default(string), string measUuid = default(string), int? channel = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// List Videos
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">動画（video）のUUID (optional)</param>
        /// <param name="measUuid">計測のUUID (optional)</param>
        /// <param name="channel">チャンネル (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to &quot;create_at+&quot;)</param>
        /// <param name="page">取得するページ番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 100)</param>
        /// <returns>ApiResponse of Videos</returns>
        [Obsolete]
        ApiResponse<Videos> GetVideosWithHttpInfo(string uuid = default(string), string measUuid = default(string), int? channel = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMediaVideosApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel Creating JPEG
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からJPEGデータへの変換をキャンセルします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Jpeg</returns>
        [Obsolete]
        System.Threading.Tasks.Task<Jpeg> CancelCreatingJpegAsync(string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel Creating JPEG
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からJPEGデータへの変換をキャンセルします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Jpeg)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Jpeg>> CancelCreatingJpegWithHttpInfoAsync(string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel Creating MP4
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からMP4データへの変換をキャンセルします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MP4</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MP4> CancelCreatingMP4Async(string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel Creating MP4
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からMP4データへの変換をキャンセルします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MP4)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MP4>> CancelCreatingMP4WithHttpInfoAsync(string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel Creating Project JPEG
        /// </summary>
        /// <remarks>
        /// 動画（video）からJPEGデータへの変換をキャンセルします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Jpeg</returns>
        System.Threading.Tasks.Task<Jpeg> CancelCreatingProjectJpegAsync(string projectUuid, string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel Creating Project JPEG
        /// </summary>
        /// <remarks>
        /// 動画（video）からJPEGデータへの変換をキャンセルします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Jpeg)</returns>
        System.Threading.Tasks.Task<ApiResponse<Jpeg>> CancelCreatingProjectJpegWithHttpInfoAsync(string projectUuid, string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel Creating Project MP4
        /// </summary>
        /// <remarks>
        /// 動画（video）からMP4データへの変換をキャンセルします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MP4</returns>
        System.Threading.Tasks.Task<MP4> CancelCreatingProjectMP4Async(string projectUuid, string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel Creating Project MP4
        /// </summary>
        /// <remarks>
        /// 動画（video）からMP4データへの変換をキャンセルします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MP4)</returns>
        System.Threading.Tasks.Task<ApiResponse<MP4>> CancelCreatingProjectMP4WithHttpInfoAsync(string projectUuid, string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create JPEG
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してJPEGデータを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createJpegRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Jpeg</returns>
        [Obsolete]
        System.Threading.Tasks.Task<Jpeg> CreateJpegAsync(string videoUuid, CreateJpegRequest createJpegRequest = default(CreateJpegRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create JPEG
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してJPEGデータを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createJpegRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Jpeg)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Jpeg>> CreateJpegWithHttpInfoAsync(string videoUuid, CreateJpegRequest createJpegRequest = default(CreateJpegRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create MP4
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してMP4データを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createMP4Request"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MP4</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MP4> CreateMP4Async(string videoUuid, CreateMP4Request createMP4Request = default(CreateMP4Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create MP4
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してMP4データを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createMP4Request"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MP4)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MP4>> CreateMP4WithHttpInfoAsync(string videoUuid, CreateMP4Request createMP4Request = default(CreateMP4Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Project JPEG
        /// </summary>
        /// <remarks>
        /// 動画（video）を変換してJPEGデータを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createJpegRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Jpeg</returns>
        System.Threading.Tasks.Task<Jpeg> CreateProjectJpegAsync(string projectUuid, string videoUuid, CreateJpegRequest createJpegRequest = default(CreateJpegRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Project JPEG
        /// </summary>
        /// <remarks>
        /// 動画（video）を変換してJPEGデータを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createJpegRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Jpeg)</returns>
        System.Threading.Tasks.Task<ApiResponse<Jpeg>> CreateProjectJpegWithHttpInfoAsync(string projectUuid, string videoUuid, CreateJpegRequest createJpegRequest = default(CreateJpegRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Project MP4
        /// </summary>
        /// <remarks>
        /// 動画（video）を変換してMP4データを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createMP4Request"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MP4</returns>
        System.Threading.Tasks.Task<MP4> CreateProjectMP4Async(string projectUuid, string videoUuid, CreateMP4Request createMP4Request = default(CreateMP4Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Project MP4
        /// </summary>
        /// <remarks>
        /// 動画（video）を変換してMP4データを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createMP4Request"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MP4)</returns>
        System.Threading.Tasks.Task<ApiResponse<MP4>> CreateProjectMP4WithHttpInfoAsync(string projectUuid, string videoUuid, CreateMP4Request createMP4Request = default(CreateMP4Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete JPEG
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task DeleteJpegAsync(string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete JPEG
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJpegWithHttpInfoAsync(string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete MP4
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task DeleteMP4Async(string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete MP4
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMP4WithHttpInfoAsync(string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Project JPEG
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたJPEGデータを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectJpegAsync(string projectUuid, string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Project JPEG
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたJPEGデータを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectJpegWithHttpInfoAsync(string projectUuid, string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Project MP4
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたMP4データを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectMP4Async(string projectUuid, string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Project MP4
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたMP4データを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectMP4WithHttpInfoAsync(string projectUuid, string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get JPEG
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Jpeg</returns>
        [Obsolete]
        System.Threading.Tasks.Task<Jpeg> GetJpegAsync(string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get JPEG
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Jpeg)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Jpeg>> GetJpegWithHttpInfoAsync(string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get JPEG as zip
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） JPEGデータをZIPファイルにまとめた形で取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="indexes">取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        [Obsolete]
        System.Threading.Tasks.Task<FileParameter> GetJpegAsZipAsync(string videoUuid, string jpegUuid, List<int> indexes = default(List<int>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get JPEG as zip
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） JPEGデータをZIPファイルにまとめた形で取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="indexes">取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetJpegAsZipWithHttpInfoAsync(string videoUuid, string jpegUuid, List<int> indexes = default(List<int>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List JPEGs
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Jpegs</returns>
        [Obsolete]
        System.Threading.Tasks.Task<Jpegs> GetJpegsAsync(string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List JPEGs
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Jpegs)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Jpegs>> GetJpegsWithHttpInfoAsync(string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get MP4
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データの情報を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MP4</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MP4> GetMP4Async(string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get MP4
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データの情報を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MP4)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MP4>> GetMP4WithHttpInfoAsync(string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List MP4s
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MP4s</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MP4s> GetMP4sAsync(string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List MP4s
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MP4s)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MP4s>> GetMP4sWithHttpInfoAsync(string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Project JPEG
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Jpeg</returns>
        System.Threading.Tasks.Task<Jpeg> GetProjectJpegAsync(string projectUuid, string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Project JPEG
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Jpeg)</returns>
        System.Threading.Tasks.Task<ApiResponse<Jpeg>> GetProjectJpegWithHttpInfoAsync(string projectUuid, string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Project JPEG as zip
        /// </summary>
        /// <remarks>
        /// JPEGデータをZIPファイルにまとめた形で取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="indexes">取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> GetProjectJpegAsZipAsync(string projectUuid, string videoUuid, string jpegUuid, List<int> indexes = default(List<int>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Project JPEG as zip
        /// </summary>
        /// <remarks>
        /// JPEGデータをZIPファイルにまとめた形で取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="indexes">取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetProjectJpegAsZipWithHttpInfoAsync(string projectUuid, string videoUuid, string jpegUuid, List<int> indexes = default(List<int>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Project JPEGs
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたJPEGデータのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Jpegs</returns>
        System.Threading.Tasks.Task<Jpegs> GetProjectJpegsAsync(string projectUuid, string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Project JPEGs
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたJPEGデータのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Jpegs)</returns>
        System.Threading.Tasks.Task<ApiResponse<Jpegs>> GetProjectJpegsWithHttpInfoAsync(string projectUuid, string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Project MP4
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたMP4データの情報を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MP4</returns>
        System.Threading.Tasks.Task<MP4> GetProjectMP4Async(string projectUuid, string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Project MP4
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたMP4データの情報を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MP4)</returns>
        System.Threading.Tasks.Task<ApiResponse<MP4>> GetProjectMP4WithHttpInfoAsync(string projectUuid, string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Project MP4s
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたMP4データのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MP4s</returns>
        System.Threading.Tasks.Task<MP4s> GetProjectMP4sAsync(string projectUuid, string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Project MP4s
        /// </summary>
        /// <remarks>
        /// 動画（video）から変換されたMP4データのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MP4s)</returns>
        System.Threading.Tasks.Task<ApiResponse<MP4s>> GetProjectMP4sWithHttpInfoAsync(string projectUuid, string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Project Video
        /// </summary>
        /// <remarks>
        /// 動画を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Video</returns>
        System.Threading.Tasks.Task<Video> GetProjectVideoAsync(string projectUuid, string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Project Video
        /// </summary>
        /// <remarks>
        /// 動画を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Video)</returns>
        System.Threading.Tasks.Task<ApiResponse<Video>> GetProjectVideoWithHttpInfoAsync(string projectUuid, string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Project Videos
        /// </summary>
        /// <remarks>
        /// 動画（video）のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">動画（video）のUUID (optional)</param>
        /// <param name="measUuid">計測のUUID (optional)</param>
        /// <param name="channel">チャンネル (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to &quot;create_at+&quot;)</param>
        /// <param name="page">取得するページ番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Videos</returns>
        System.Threading.Tasks.Task<Videos> GetProjectVideosAsync(string projectUuid, string uuid = default(string), string measUuid = default(string), int? channel = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Project Videos
        /// </summary>
        /// <remarks>
        /// 動画（video）のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">動画（video）のUUID (optional)</param>
        /// <param name="measUuid">計測のUUID (optional)</param>
        /// <param name="channel">チャンネル (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to &quot;create_at+&quot;)</param>
        /// <param name="page">取得するページ番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Videos)</returns>
        System.Threading.Tasks.Task<ApiResponse<Videos>> GetProjectVideosWithHttpInfoAsync(string projectUuid, string uuid = default(string), string measUuid = default(string), int? channel = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Video
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Video</returns>
        [Obsolete]
        System.Threading.Tasks.Task<Video> GetVideoAsync(string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Video
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Video)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Video>> GetVideoWithHttpInfoAsync(string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Videos
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">動画（video）のUUID (optional)</param>
        /// <param name="measUuid">計測のUUID (optional)</param>
        /// <param name="channel">チャンネル (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to &quot;create_at+&quot;)</param>
        /// <param name="page">取得するページ番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Videos</returns>
        [Obsolete]
        System.Threading.Tasks.Task<Videos> GetVideosAsync(string uuid = default(string), string measUuid = default(string), int? channel = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Videos
        /// </summary>
        /// <remarks>
        /// （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">動画（video）のUUID (optional)</param>
        /// <param name="measUuid">計測のUUID (optional)</param>
        /// <param name="channel">チャンネル (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to &quot;create_at+&quot;)</param>
        /// <param name="page">取得するページ番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Videos)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Videos>> GetVideosWithHttpInfoAsync(string uuid = default(string), string measUuid = default(string), int? channel = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMediaVideosApi : IMediaVideosApiSync, IMediaVideosApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MediaVideosApi : IDisposable, IMediaVideosApi
    {
        private intdash.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaVideosApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public MediaVideosApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaVideosApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public MediaVideosApi(string basePath)
        {
            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                new intdash.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new intdash.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaVideosApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public MediaVideosApi(intdash.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new intdash.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaVideosApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MediaVideosApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaVideosApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MediaVideosApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                new intdash.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new intdash.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaVideosApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MediaVideosApi(HttpClient client, intdash.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new intdash.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaVideosApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public MediaVideosApi(intdash.Client.ISynchronousClient client, intdash.Client.IAsynchronousClient asyncClient, intdash.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public intdash.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public intdash.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public intdash.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public intdash.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public intdash.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel Creating JPEG （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からJPEGデータへの変換をキャンセルします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns>Jpeg</returns>
        [Obsolete]
        public Jpeg CancelCreatingJpeg(string videoUuid, string jpegUuid)
        {
            intdash.Client.ApiResponse<Jpeg> localVarResponse = CancelCreatingJpegWithHttpInfo(videoUuid, jpegUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Creating JPEG （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からJPEGデータへの変換をキャンセルします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns>ApiResponse of Jpeg</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Jpeg> CancelCreatingJpegWithHttpInfo(string videoUuid, string jpegUuid)
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->CancelCreatingJpeg");

            // verify the required parameter 'jpegUuid' is set
            if (jpegUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'jpegUuid' when calling MediaVideosApi->CancelCreatingJpeg");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("jpeg_uuid", intdash.Client.ClientUtils.ParameterToString(jpegUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Jpeg>("/media/videos/{video_uuid}/jpegs/{jpeg_uuid}/cancel_convert", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelCreatingJpeg", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Creating JPEG （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からJPEGデータへの変換をキャンセルします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Jpeg</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Jpeg> CancelCreatingJpegAsync(string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Jpeg> localVarResponse = await CancelCreatingJpegWithHttpInfoAsync(videoUuid, jpegUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Creating JPEG （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からJPEGデータへの変換をキャンセルします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Jpeg)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Jpeg>> CancelCreatingJpegWithHttpInfoAsync(string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->CancelCreatingJpeg");

            // verify the required parameter 'jpegUuid' is set
            if (jpegUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'jpegUuid' when calling MediaVideosApi->CancelCreatingJpeg");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("jpeg_uuid", intdash.Client.ClientUtils.ParameterToString(jpegUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Jpeg>("/media/videos/{video_uuid}/jpegs/{jpeg_uuid}/cancel_convert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelCreatingJpeg", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Creating MP4 （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からMP4データへの変換をキャンセルします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns>MP4</returns>
        [Obsolete]
        public MP4 CancelCreatingMP4(string videoUuid, string mp4Uuid)
        {
            intdash.Client.ApiResponse<MP4> localVarResponse = CancelCreatingMP4WithHttpInfo(videoUuid, mp4Uuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Creating MP4 （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からMP4データへの変換をキャンセルします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns>ApiResponse of MP4</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MP4> CancelCreatingMP4WithHttpInfo(string videoUuid, string mp4Uuid)
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->CancelCreatingMP4");

            // verify the required parameter 'mp4Uuid' is set
            if (mp4Uuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'mp4Uuid' when calling MediaVideosApi->CancelCreatingMP4");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("mp4_uuid", intdash.Client.ClientUtils.ParameterToString(mp4Uuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<MP4>("/media/videos/{video_uuid}/mp4s/{mp4_uuid}/cancel_convert", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelCreatingMP4", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Creating MP4 （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からMP4データへの変換をキャンセルします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MP4</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MP4> CancelCreatingMP4Async(string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MP4> localVarResponse = await CancelCreatingMP4WithHttpInfoAsync(videoUuid, mp4Uuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Creating MP4 （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）からMP4データへの変換をキャンセルします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MP4)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MP4>> CancelCreatingMP4WithHttpInfoAsync(string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->CancelCreatingMP4");

            // verify the required parameter 'mp4Uuid' is set
            if (mp4Uuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'mp4Uuid' when calling MediaVideosApi->CancelCreatingMP4");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("mp4_uuid", intdash.Client.ClientUtils.ParameterToString(mp4Uuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<MP4>("/media/videos/{video_uuid}/mp4s/{mp4_uuid}/cancel_convert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelCreatingMP4", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Creating Project JPEG 動画（video）からJPEGデータへの変換をキャンセルします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns>Jpeg</returns>
        public Jpeg CancelCreatingProjectJpeg(string projectUuid, string videoUuid, string jpegUuid)
        {
            intdash.Client.ApiResponse<Jpeg> localVarResponse = CancelCreatingProjectJpegWithHttpInfo(projectUuid, videoUuid, jpegUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Creating Project JPEG 動画（video）からJPEGデータへの変換をキャンセルします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns>ApiResponse of Jpeg</returns>
        public intdash.Client.ApiResponse<Jpeg> CancelCreatingProjectJpegWithHttpInfo(string projectUuid, string videoUuid, string jpegUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->CancelCreatingProjectJpeg");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->CancelCreatingProjectJpeg");

            // verify the required parameter 'jpegUuid' is set
            if (jpegUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'jpegUuid' when calling MediaVideosApi->CancelCreatingProjectJpeg");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("jpeg_uuid", intdash.Client.ClientUtils.ParameterToString(jpegUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Jpeg>("/media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}/cancel_convert", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelCreatingProjectJpeg", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Creating Project JPEG 動画（video）からJPEGデータへの変換をキャンセルします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Jpeg</returns>
        public async System.Threading.Tasks.Task<Jpeg> CancelCreatingProjectJpegAsync(string projectUuid, string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Jpeg> localVarResponse = await CancelCreatingProjectJpegWithHttpInfoAsync(projectUuid, videoUuid, jpegUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Creating Project JPEG 動画（video）からJPEGデータへの変換をキャンセルします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Jpeg)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Jpeg>> CancelCreatingProjectJpegWithHttpInfoAsync(string projectUuid, string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->CancelCreatingProjectJpeg");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->CancelCreatingProjectJpeg");

            // verify the required parameter 'jpegUuid' is set
            if (jpegUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'jpegUuid' when calling MediaVideosApi->CancelCreatingProjectJpeg");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("jpeg_uuid", intdash.Client.ClientUtils.ParameterToString(jpegUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Jpeg>("/media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}/cancel_convert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelCreatingProjectJpeg", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Creating Project MP4 動画（video）からMP4データへの変換をキャンセルします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns>MP4</returns>
        public MP4 CancelCreatingProjectMP4(string projectUuid, string videoUuid, string mp4Uuid)
        {
            intdash.Client.ApiResponse<MP4> localVarResponse = CancelCreatingProjectMP4WithHttpInfo(projectUuid, videoUuid, mp4Uuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Creating Project MP4 動画（video）からMP4データへの変換をキャンセルします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns>ApiResponse of MP4</returns>
        public intdash.Client.ApiResponse<MP4> CancelCreatingProjectMP4WithHttpInfo(string projectUuid, string videoUuid, string mp4Uuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->CancelCreatingProjectMP4");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->CancelCreatingProjectMP4");

            // verify the required parameter 'mp4Uuid' is set
            if (mp4Uuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'mp4Uuid' when calling MediaVideosApi->CancelCreatingProjectMP4");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("mp4_uuid", intdash.Client.ClientUtils.ParameterToString(mp4Uuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<MP4>("/media/projects/{project_uuid}/videos/{video_uuid}/mp4s/{mp4_uuid}/cancel_convert", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelCreatingProjectMP4", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Creating Project MP4 動画（video）からMP4データへの変換をキャンセルします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MP4</returns>
        public async System.Threading.Tasks.Task<MP4> CancelCreatingProjectMP4Async(string projectUuid, string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MP4> localVarResponse = await CancelCreatingProjectMP4WithHttpInfoAsync(projectUuid, videoUuid, mp4Uuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Creating Project MP4 動画（video）からMP4データへの変換をキャンセルします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MP4)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MP4>> CancelCreatingProjectMP4WithHttpInfoAsync(string projectUuid, string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->CancelCreatingProjectMP4");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->CancelCreatingProjectMP4");

            // verify the required parameter 'mp4Uuid' is set
            if (mp4Uuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'mp4Uuid' when calling MediaVideosApi->CancelCreatingProjectMP4");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("mp4_uuid", intdash.Client.ClientUtils.ParameterToString(mp4Uuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<MP4>("/media/projects/{project_uuid}/videos/{video_uuid}/mp4s/{mp4_uuid}/cancel_convert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelCreatingProjectMP4", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create JPEG （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してJPEGデータを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createJpegRequest"> (optional)</param>
        /// <returns>Jpeg</returns>
        [Obsolete]
        public Jpeg CreateJpeg(string videoUuid, CreateJpegRequest createJpegRequest = default(CreateJpegRequest))
        {
            intdash.Client.ApiResponse<Jpeg> localVarResponse = CreateJpegWithHttpInfo(videoUuid, createJpegRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create JPEG （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してJPEGデータを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createJpegRequest"> (optional)</param>
        /// <returns>ApiResponse of Jpeg</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Jpeg> CreateJpegWithHttpInfo(string videoUuid, CreateJpegRequest createJpegRequest = default(CreateJpegRequest))
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->CreateJpeg");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.Data = createJpegRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Jpeg>("/media/videos/{video_uuid}/jpegs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateJpeg", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create JPEG （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してJPEGデータを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createJpegRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Jpeg</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Jpeg> CreateJpegAsync(string videoUuid, CreateJpegRequest createJpegRequest = default(CreateJpegRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Jpeg> localVarResponse = await CreateJpegWithHttpInfoAsync(videoUuid, createJpegRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create JPEG （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してJPEGデータを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createJpegRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Jpeg)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Jpeg>> CreateJpegWithHttpInfoAsync(string videoUuid, CreateJpegRequest createJpegRequest = default(CreateJpegRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->CreateJpeg");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.Data = createJpegRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Jpeg>("/media/videos/{video_uuid}/jpegs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateJpeg", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create MP4 （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してMP4データを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createMP4Request"> (optional)</param>
        /// <returns>MP4</returns>
        [Obsolete]
        public MP4 CreateMP4(string videoUuid, CreateMP4Request createMP4Request = default(CreateMP4Request))
        {
            intdash.Client.ApiResponse<MP4> localVarResponse = CreateMP4WithHttpInfo(videoUuid, createMP4Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create MP4 （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してMP4データを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createMP4Request"> (optional)</param>
        /// <returns>ApiResponse of MP4</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MP4> CreateMP4WithHttpInfo(string videoUuid, CreateMP4Request createMP4Request = default(CreateMP4Request))
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->CreateMP4");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.Data = createMP4Request;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MP4>("/media/videos/{video_uuid}/mp4s", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMP4", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create MP4 （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してMP4データを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createMP4Request"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MP4</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MP4> CreateMP4Async(string videoUuid, CreateMP4Request createMP4Request = default(CreateMP4Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MP4> localVarResponse = await CreateMP4WithHttpInfoAsync(videoUuid, createMP4Request, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create MP4 （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）を変換してMP4データを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createMP4Request"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MP4)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MP4>> CreateMP4WithHttpInfoAsync(string videoUuid, CreateMP4Request createMP4Request = default(CreateMP4Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->CreateMP4");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.Data = createMP4Request;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MP4>("/media/videos/{video_uuid}/mp4s", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMP4", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Project JPEG 動画（video）を変換してJPEGデータを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createJpegRequest"> (optional)</param>
        /// <returns>Jpeg</returns>
        public Jpeg CreateProjectJpeg(string projectUuid, string videoUuid, CreateJpegRequest createJpegRequest = default(CreateJpegRequest))
        {
            intdash.Client.ApiResponse<Jpeg> localVarResponse = CreateProjectJpegWithHttpInfo(projectUuid, videoUuid, createJpegRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Project JPEG 動画（video）を変換してJPEGデータを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createJpegRequest"> (optional)</param>
        /// <returns>ApiResponse of Jpeg</returns>
        public intdash.Client.ApiResponse<Jpeg> CreateProjectJpegWithHttpInfo(string projectUuid, string videoUuid, CreateJpegRequest createJpegRequest = default(CreateJpegRequest))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->CreateProjectJpeg");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->CreateProjectJpeg");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.Data = createJpegRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Jpeg>("/media/projects/{project_uuid}/videos/{video_uuid}/jpegs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProjectJpeg", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Project JPEG 動画（video）を変換してJPEGデータを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createJpegRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Jpeg</returns>
        public async System.Threading.Tasks.Task<Jpeg> CreateProjectJpegAsync(string projectUuid, string videoUuid, CreateJpegRequest createJpegRequest = default(CreateJpegRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Jpeg> localVarResponse = await CreateProjectJpegWithHttpInfoAsync(projectUuid, videoUuid, createJpegRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Project JPEG 動画（video）を変換してJPEGデータを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createJpegRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Jpeg)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Jpeg>> CreateProjectJpegWithHttpInfoAsync(string projectUuid, string videoUuid, CreateJpegRequest createJpegRequest = default(CreateJpegRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->CreateProjectJpeg");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->CreateProjectJpeg");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.Data = createJpegRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Jpeg>("/media/projects/{project_uuid}/videos/{video_uuid}/jpegs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProjectJpeg", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Project MP4 動画（video）を変換してMP4データを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createMP4Request"> (optional)</param>
        /// <returns>MP4</returns>
        public MP4 CreateProjectMP4(string projectUuid, string videoUuid, CreateMP4Request createMP4Request = default(CreateMP4Request))
        {
            intdash.Client.ApiResponse<MP4> localVarResponse = CreateProjectMP4WithHttpInfo(projectUuid, videoUuid, createMP4Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Project MP4 動画（video）を変換してMP4データを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createMP4Request"> (optional)</param>
        /// <returns>ApiResponse of MP4</returns>
        public intdash.Client.ApiResponse<MP4> CreateProjectMP4WithHttpInfo(string projectUuid, string videoUuid, CreateMP4Request createMP4Request = default(CreateMP4Request))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->CreateProjectMP4");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->CreateProjectMP4");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.Data = createMP4Request;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MP4>("/media/projects/{project_uuid}/videos/{video_uuid}/mp4s", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProjectMP4", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Project MP4 動画（video）を変換してMP4データを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createMP4Request"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MP4</returns>
        public async System.Threading.Tasks.Task<MP4> CreateProjectMP4Async(string projectUuid, string videoUuid, CreateMP4Request createMP4Request = default(CreateMP4Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MP4> localVarResponse = await CreateProjectMP4WithHttpInfoAsync(projectUuid, videoUuid, createMP4Request, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Project MP4 動画（video）を変換してMP4データを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="createMP4Request"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MP4)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MP4>> CreateProjectMP4WithHttpInfoAsync(string projectUuid, string videoUuid, CreateMP4Request createMP4Request = default(CreateMP4Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->CreateProjectMP4");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->CreateProjectMP4");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.Data = createMP4Request;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MP4>("/media/projects/{project_uuid}/videos/{video_uuid}/mp4s", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProjectMP4", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete JPEG （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns></returns>
        [Obsolete]
        public void DeleteJpeg(string videoUuid, string jpegUuid)
        {
            DeleteJpegWithHttpInfo(videoUuid, jpegUuid);
        }

        /// <summary>
        /// Delete JPEG （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Object> DeleteJpegWithHttpInfo(string videoUuid, string jpegUuid)
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->DeleteJpeg");

            // verify the required parameter 'jpegUuid' is set
            if (jpegUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'jpegUuid' when calling MediaVideosApi->DeleteJpeg");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("jpeg_uuid", intdash.Client.ClientUtils.ParameterToString(jpegUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/media/videos/{video_uuid}/jpegs/{jpeg_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJpeg", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete JPEG （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task DeleteJpegAsync(string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteJpegWithHttpInfoAsync(videoUuid, jpegUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete JPEG （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> DeleteJpegWithHttpInfoAsync(string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->DeleteJpeg");

            // verify the required parameter 'jpegUuid' is set
            if (jpegUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'jpegUuid' when calling MediaVideosApi->DeleteJpeg");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("jpeg_uuid", intdash.Client.ClientUtils.ParameterToString(jpegUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/media/videos/{video_uuid}/jpegs/{jpeg_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJpeg", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete MP4 （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns></returns>
        [Obsolete]
        public void DeleteMP4(string videoUuid, string mp4Uuid)
        {
            DeleteMP4WithHttpInfo(videoUuid, mp4Uuid);
        }

        /// <summary>
        /// Delete MP4 （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Object> DeleteMP4WithHttpInfo(string videoUuid, string mp4Uuid)
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->DeleteMP4");

            // verify the required parameter 'mp4Uuid' is set
            if (mp4Uuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'mp4Uuid' when calling MediaVideosApi->DeleteMP4");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("mp4_uuid", intdash.Client.ClientUtils.ParameterToString(mp4Uuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/media/videos/{video_uuid}/mp4s/{mp4_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMP4", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete MP4 （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task DeleteMP4Async(string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteMP4WithHttpInfoAsync(videoUuid, mp4Uuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete MP4 （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> DeleteMP4WithHttpInfoAsync(string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->DeleteMP4");

            // verify the required parameter 'mp4Uuid' is set
            if (mp4Uuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'mp4Uuid' when calling MediaVideosApi->DeleteMP4");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("mp4_uuid", intdash.Client.ClientUtils.ParameterToString(mp4Uuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/media/videos/{video_uuid}/mp4s/{mp4_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMP4", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Project JPEG 動画（video）から変換されたJPEGデータを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns></returns>
        public void DeleteProjectJpeg(string projectUuid, string videoUuid, string jpegUuid)
        {
            DeleteProjectJpegWithHttpInfo(projectUuid, videoUuid, jpegUuid);
        }

        /// <summary>
        /// Delete Project JPEG 動画（video）から変換されたJPEGデータを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> DeleteProjectJpegWithHttpInfo(string projectUuid, string videoUuid, string jpegUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->DeleteProjectJpeg");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->DeleteProjectJpeg");

            // verify the required parameter 'jpegUuid' is set
            if (jpegUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'jpegUuid' when calling MediaVideosApi->DeleteProjectJpeg");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("jpeg_uuid", intdash.Client.ClientUtils.ParameterToString(jpegUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectJpeg", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Project JPEG 動画（video）から変換されたJPEGデータを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectJpegAsync(string projectUuid, string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProjectJpegWithHttpInfoAsync(projectUuid, videoUuid, jpegUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Project JPEG 動画（video）から変換されたJPEGデータを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> DeleteProjectJpegWithHttpInfoAsync(string projectUuid, string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->DeleteProjectJpeg");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->DeleteProjectJpeg");

            // verify the required parameter 'jpegUuid' is set
            if (jpegUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'jpegUuid' when calling MediaVideosApi->DeleteProjectJpeg");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("jpeg_uuid", intdash.Client.ClientUtils.ParameterToString(jpegUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectJpeg", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Project MP4 動画（video）から変換されたMP4データを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns></returns>
        public void DeleteProjectMP4(string projectUuid, string videoUuid, string mp4Uuid)
        {
            DeleteProjectMP4WithHttpInfo(projectUuid, videoUuid, mp4Uuid);
        }

        /// <summary>
        /// Delete Project MP4 動画（video）から変換されたMP4データを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> DeleteProjectMP4WithHttpInfo(string projectUuid, string videoUuid, string mp4Uuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->DeleteProjectMP4");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->DeleteProjectMP4");

            // verify the required parameter 'mp4Uuid' is set
            if (mp4Uuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'mp4Uuid' when calling MediaVideosApi->DeleteProjectMP4");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("mp4_uuid", intdash.Client.ClientUtils.ParameterToString(mp4Uuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/media/projects/{project_uuid}/videos/{video_uuid}/mp4s/{mp4_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectMP4", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Project MP4 動画（video）から変換されたMP4データを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectMP4Async(string projectUuid, string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProjectMP4WithHttpInfoAsync(projectUuid, videoUuid, mp4Uuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Project MP4 動画（video）から変換されたMP4データを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> DeleteProjectMP4WithHttpInfoAsync(string projectUuid, string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->DeleteProjectMP4");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->DeleteProjectMP4");

            // verify the required parameter 'mp4Uuid' is set
            if (mp4Uuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'mp4Uuid' when calling MediaVideosApi->DeleteProjectMP4");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("mp4_uuid", intdash.Client.ClientUtils.ParameterToString(mp4Uuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/media/projects/{project_uuid}/videos/{video_uuid}/mp4s/{mp4_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectMP4", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get JPEG （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns>Jpeg</returns>
        [Obsolete]
        public Jpeg GetJpeg(string videoUuid, string jpegUuid)
        {
            intdash.Client.ApiResponse<Jpeg> localVarResponse = GetJpegWithHttpInfo(videoUuid, jpegUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get JPEG （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns>ApiResponse of Jpeg</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Jpeg> GetJpegWithHttpInfo(string videoUuid, string jpegUuid)
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetJpeg");

            // verify the required parameter 'jpegUuid' is set
            if (jpegUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'jpegUuid' when calling MediaVideosApi->GetJpeg");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("jpeg_uuid", intdash.Client.ClientUtils.ParameterToString(jpegUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Jpeg>("/media/videos/{video_uuid}/jpegs/{jpeg_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJpeg", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get JPEG （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Jpeg</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Jpeg> GetJpegAsync(string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Jpeg> localVarResponse = await GetJpegWithHttpInfoAsync(videoUuid, jpegUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get JPEG （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Jpeg)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Jpeg>> GetJpegWithHttpInfoAsync(string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetJpeg");

            // verify the required parameter 'jpegUuid' is set
            if (jpegUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'jpegUuid' when calling MediaVideosApi->GetJpeg");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("jpeg_uuid", intdash.Client.ClientUtils.ParameterToString(jpegUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Jpeg>("/media/videos/{video_uuid}/jpegs/{jpeg_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJpeg", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get JPEG as zip （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） JPEGデータをZIPファイルにまとめた形で取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="indexes">取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)</param>
        /// <returns>FileParameter</returns>
        [Obsolete]
        public FileParameter GetJpegAsZip(string videoUuid, string jpegUuid, List<int> indexes = default(List<int>))
        {
            intdash.Client.ApiResponse<FileParameter> localVarResponse = GetJpegAsZipWithHttpInfo(videoUuid, jpegUuid, indexes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get JPEG as zip （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） JPEGデータをZIPファイルにまとめた形で取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="indexes">取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)</param>
        /// <returns>ApiResponse of FileParameter</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<FileParameter> GetJpegAsZipWithHttpInfo(string videoUuid, string jpegUuid, List<int> indexes = default(List<int>))
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetJpegAsZip");

            // verify the required parameter 'jpegUuid' is set
            if (jpegUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'jpegUuid' when calling MediaVideosApi->GetJpegAsZip");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/zip"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("jpeg_uuid", intdash.Client.ClientUtils.ParameterToString(jpegUuid)); // path parameter
            if (indexes != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "indexes", indexes));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJpegAsZip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get JPEG as zip （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） JPEGデータをZIPファイルにまとめた形で取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="indexes">取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<FileParameter> GetJpegAsZipAsync(string videoUuid, string jpegUuid, List<int> indexes = default(List<int>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<FileParameter> localVarResponse = await GetJpegAsZipWithHttpInfoAsync(videoUuid, jpegUuid, indexes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get JPEG as zip （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） JPEGデータをZIPファイルにまとめた形で取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="indexes">取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<FileParameter>> GetJpegAsZipWithHttpInfoAsync(string videoUuid, string jpegUuid, List<int> indexes = default(List<int>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetJpegAsZip");

            // verify the required parameter 'jpegUuid' is set
            if (jpegUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'jpegUuid' when calling MediaVideosApi->GetJpegAsZip");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/zip"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("jpeg_uuid", intdash.Client.ClientUtils.ParameterToString(jpegUuid)); // path parameter
            if (indexes != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "indexes", indexes));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJpegAsZip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List JPEGs （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>Jpegs</returns>
        [Obsolete]
        public Jpegs GetJpegs(string videoUuid)
        {
            intdash.Client.ApiResponse<Jpegs> localVarResponse = GetJpegsWithHttpInfo(videoUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List JPEGs （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>ApiResponse of Jpegs</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Jpegs> GetJpegsWithHttpInfo(string videoUuid)
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetJpegs");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Jpegs>("/media/videos/{video_uuid}/jpegs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJpegs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List JPEGs （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Jpegs</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Jpegs> GetJpegsAsync(string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Jpegs> localVarResponse = await GetJpegsWithHttpInfoAsync(videoUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List JPEGs （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたJPEGデータのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Jpegs)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Jpegs>> GetJpegsWithHttpInfoAsync(string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetJpegs");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Jpegs>("/media/videos/{video_uuid}/jpegs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJpegs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get MP4 （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データの情報を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns>MP4</returns>
        [Obsolete]
        public MP4 GetMP4(string videoUuid, string mp4Uuid)
        {
            intdash.Client.ApiResponse<MP4> localVarResponse = GetMP4WithHttpInfo(videoUuid, mp4Uuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get MP4 （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データの情報を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns>ApiResponse of MP4</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MP4> GetMP4WithHttpInfo(string videoUuid, string mp4Uuid)
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetMP4");

            // verify the required parameter 'mp4Uuid' is set
            if (mp4Uuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'mp4Uuid' when calling MediaVideosApi->GetMP4");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("mp4_uuid", intdash.Client.ClientUtils.ParameterToString(mp4Uuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MP4>("/media/videos/{video_uuid}/mp4s/{mp4_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMP4", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get MP4 （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データの情報を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MP4</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MP4> GetMP4Async(string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MP4> localVarResponse = await GetMP4WithHttpInfoAsync(videoUuid, mp4Uuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get MP4 （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データの情報を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MP4)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MP4>> GetMP4WithHttpInfoAsync(string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetMP4");

            // verify the required parameter 'mp4Uuid' is set
            if (mp4Uuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'mp4Uuid' when calling MediaVideosApi->GetMP4");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("mp4_uuid", intdash.Client.ClientUtils.ParameterToString(mp4Uuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MP4>("/media/videos/{video_uuid}/mp4s/{mp4_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMP4", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List MP4s （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>MP4s</returns>
        [Obsolete]
        public MP4s GetMP4s(string videoUuid)
        {
            intdash.Client.ApiResponse<MP4s> localVarResponse = GetMP4sWithHttpInfo(videoUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List MP4s （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>ApiResponse of MP4s</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MP4s> GetMP4sWithHttpInfo(string videoUuid)
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetMP4s");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MP4s>("/media/videos/{video_uuid}/mp4s", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMP4s", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List MP4s （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MP4s</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MP4s> GetMP4sAsync(string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MP4s> localVarResponse = await GetMP4sWithHttpInfoAsync(videoUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List MP4s （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）から変換されたMP4データのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MP4s)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MP4s>> GetMP4sWithHttpInfoAsync(string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetMP4s");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MP4s>("/media/videos/{video_uuid}/mp4s", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMP4s", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project JPEG 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns>Jpeg</returns>
        public Jpeg GetProjectJpeg(string projectUuid, string videoUuid, string jpegUuid)
        {
            intdash.Client.ApiResponse<Jpeg> localVarResponse = GetProjectJpegWithHttpInfo(projectUuid, videoUuid, jpegUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project JPEG 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <returns>ApiResponse of Jpeg</returns>
        public intdash.Client.ApiResponse<Jpeg> GetProjectJpegWithHttpInfo(string projectUuid, string videoUuid, string jpegUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->GetProjectJpeg");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetProjectJpeg");

            // verify the required parameter 'jpegUuid' is set
            if (jpegUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'jpegUuid' when calling MediaVideosApi->GetProjectJpeg");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("jpeg_uuid", intdash.Client.ClientUtils.ParameterToString(jpegUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Jpeg>("/media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectJpeg", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project JPEG 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Jpeg</returns>
        public async System.Threading.Tasks.Task<Jpeg> GetProjectJpegAsync(string projectUuid, string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Jpeg> localVarResponse = await GetProjectJpegWithHttpInfoAsync(projectUuid, videoUuid, jpegUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project JPEG 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、&#x60;GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip&#x60; を使用してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Jpeg)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Jpeg>> GetProjectJpegWithHttpInfoAsync(string projectUuid, string videoUuid, string jpegUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->GetProjectJpeg");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetProjectJpeg");

            // verify the required parameter 'jpegUuid' is set
            if (jpegUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'jpegUuid' when calling MediaVideosApi->GetProjectJpeg");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("jpeg_uuid", intdash.Client.ClientUtils.ParameterToString(jpegUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Jpeg>("/media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectJpeg", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project JPEG as zip JPEGデータをZIPファイルにまとめた形で取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="indexes">取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)</param>
        /// <returns>FileParameter</returns>
        public FileParameter GetProjectJpegAsZip(string projectUuid, string videoUuid, string jpegUuid, List<int> indexes = default(List<int>))
        {
            intdash.Client.ApiResponse<FileParameter> localVarResponse = GetProjectJpegAsZipWithHttpInfo(projectUuid, videoUuid, jpegUuid, indexes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project JPEG as zip JPEGデータをZIPファイルにまとめた形で取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="indexes">取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public intdash.Client.ApiResponse<FileParameter> GetProjectJpegAsZipWithHttpInfo(string projectUuid, string videoUuid, string jpegUuid, List<int> indexes = default(List<int>))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->GetProjectJpegAsZip");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetProjectJpegAsZip");

            // verify the required parameter 'jpegUuid' is set
            if (jpegUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'jpegUuid' when calling MediaVideosApi->GetProjectJpegAsZip");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/zip"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("jpeg_uuid", intdash.Client.ClientUtils.ParameterToString(jpegUuid)); // path parameter
            if (indexes != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "indexes", indexes));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectJpegAsZip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project JPEG as zip JPEGデータをZIPファイルにまとめた形で取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="indexes">取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> GetProjectJpegAsZipAsync(string projectUuid, string videoUuid, string jpegUuid, List<int> indexes = default(List<int>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<FileParameter> localVarResponse = await GetProjectJpegAsZipWithHttpInfoAsync(projectUuid, videoUuid, jpegUuid, indexes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project JPEG as zip JPEGデータをZIPファイルにまとめた形で取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="jpegUuid">JPEGのUUID</param>
        /// <param name="indexes">取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<FileParameter>> GetProjectJpegAsZipWithHttpInfoAsync(string projectUuid, string videoUuid, string jpegUuid, List<int> indexes = default(List<int>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->GetProjectJpegAsZip");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetProjectJpegAsZip");

            // verify the required parameter 'jpegUuid' is set
            if (jpegUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'jpegUuid' when calling MediaVideosApi->GetProjectJpegAsZip");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/zip"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("jpeg_uuid", intdash.Client.ClientUtils.ParameterToString(jpegUuid)); // path parameter
            if (indexes != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "indexes", indexes));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectJpegAsZip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Project JPEGs 動画（video）から変換されたJPEGデータのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>Jpegs</returns>
        public Jpegs GetProjectJpegs(string projectUuid, string videoUuid)
        {
            intdash.Client.ApiResponse<Jpegs> localVarResponse = GetProjectJpegsWithHttpInfo(projectUuid, videoUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Project JPEGs 動画（video）から変換されたJPEGデータのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>ApiResponse of Jpegs</returns>
        public intdash.Client.ApiResponse<Jpegs> GetProjectJpegsWithHttpInfo(string projectUuid, string videoUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->GetProjectJpegs");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetProjectJpegs");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Jpegs>("/media/projects/{project_uuid}/videos/{video_uuid}/jpegs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectJpegs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Project JPEGs 動画（video）から変換されたJPEGデータのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Jpegs</returns>
        public async System.Threading.Tasks.Task<Jpegs> GetProjectJpegsAsync(string projectUuid, string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Jpegs> localVarResponse = await GetProjectJpegsWithHttpInfoAsync(projectUuid, videoUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Project JPEGs 動画（video）から変換されたJPEGデータのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Jpegs)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Jpegs>> GetProjectJpegsWithHttpInfoAsync(string projectUuid, string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->GetProjectJpegs");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetProjectJpegs");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Jpegs>("/media/projects/{project_uuid}/videos/{video_uuid}/jpegs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectJpegs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project MP4 動画（video）から変換されたMP4データの情報を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns>MP4</returns>
        public MP4 GetProjectMP4(string projectUuid, string videoUuid, string mp4Uuid)
        {
            intdash.Client.ApiResponse<MP4> localVarResponse = GetProjectMP4WithHttpInfo(projectUuid, videoUuid, mp4Uuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project MP4 動画（video）から変換されたMP4データの情報を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <returns>ApiResponse of MP4</returns>
        public intdash.Client.ApiResponse<MP4> GetProjectMP4WithHttpInfo(string projectUuid, string videoUuid, string mp4Uuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->GetProjectMP4");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetProjectMP4");

            // verify the required parameter 'mp4Uuid' is set
            if (mp4Uuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'mp4Uuid' when calling MediaVideosApi->GetProjectMP4");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("mp4_uuid", intdash.Client.ClientUtils.ParameterToString(mp4Uuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MP4>("/media/projects/{project_uuid}/videos/{video_uuid}/mp4s/{mp4_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectMP4", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project MP4 動画（video）から変換されたMP4データの情報を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MP4</returns>
        public async System.Threading.Tasks.Task<MP4> GetProjectMP4Async(string projectUuid, string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MP4> localVarResponse = await GetProjectMP4WithHttpInfoAsync(projectUuid, videoUuid, mp4Uuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project MP4 動画（video）から変換されたMP4データの情報を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="mp4Uuid">MP4のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MP4)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MP4>> GetProjectMP4WithHttpInfoAsync(string projectUuid, string videoUuid, string mp4Uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->GetProjectMP4");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetProjectMP4");

            // verify the required parameter 'mp4Uuid' is set
            if (mp4Uuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'mp4Uuid' when calling MediaVideosApi->GetProjectMP4");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("mp4_uuid", intdash.Client.ClientUtils.ParameterToString(mp4Uuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MP4>("/media/projects/{project_uuid}/videos/{video_uuid}/mp4s/{mp4_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectMP4", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Project MP4s 動画（video）から変換されたMP4データのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>MP4s</returns>
        public MP4s GetProjectMP4s(string projectUuid, string videoUuid)
        {
            intdash.Client.ApiResponse<MP4s> localVarResponse = GetProjectMP4sWithHttpInfo(projectUuid, videoUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Project MP4s 動画（video）から変換されたMP4データのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>ApiResponse of MP4s</returns>
        public intdash.Client.ApiResponse<MP4s> GetProjectMP4sWithHttpInfo(string projectUuid, string videoUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->GetProjectMP4s");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetProjectMP4s");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MP4s>("/media/projects/{project_uuid}/videos/{video_uuid}/mp4s", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectMP4s", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Project MP4s 動画（video）から変換されたMP4データのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MP4s</returns>
        public async System.Threading.Tasks.Task<MP4s> GetProjectMP4sAsync(string projectUuid, string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MP4s> localVarResponse = await GetProjectMP4sWithHttpInfoAsync(projectUuid, videoUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Project MP4s 動画（video）から変換されたMP4データのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MP4s)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MP4s>> GetProjectMP4sWithHttpInfoAsync(string projectUuid, string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->GetProjectMP4s");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetProjectMP4s");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MP4s>("/media/projects/{project_uuid}/videos/{video_uuid}/mp4s", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectMP4s", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project Video 動画を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>Video</returns>
        public Video GetProjectVideo(string projectUuid, string videoUuid)
        {
            intdash.Client.ApiResponse<Video> localVarResponse = GetProjectVideoWithHttpInfo(projectUuid, videoUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project Video 動画を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>ApiResponse of Video</returns>
        public intdash.Client.ApiResponse<Video> GetProjectVideoWithHttpInfo(string projectUuid, string videoUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->GetProjectVideo");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetProjectVideo");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Video>("/media/projects/{project_uuid}/videos/{video_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project Video 動画を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Video</returns>
        public async System.Threading.Tasks.Task<Video> GetProjectVideoAsync(string projectUuid, string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Video> localVarResponse = await GetProjectVideoWithHttpInfoAsync(projectUuid, videoUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project Video 動画を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Video)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Video>> GetProjectVideoWithHttpInfoAsync(string projectUuid, string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->GetProjectVideo");

            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetProjectVideo");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Video>("/media/projects/{project_uuid}/videos/{video_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Project Videos 動画（video）のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">動画（video）のUUID (optional)</param>
        /// <param name="measUuid">計測のUUID (optional)</param>
        /// <param name="channel">チャンネル (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to &quot;create_at+&quot;)</param>
        /// <param name="page">取得するページ番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 100)</param>
        /// <returns>Videos</returns>
        public Videos GetProjectVideos(string projectUuid, string uuid = default(string), string measUuid = default(string), int? channel = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?))
        {
            intdash.Client.ApiResponse<Videos> localVarResponse = GetProjectVideosWithHttpInfo(projectUuid, uuid, measUuid, channel, sort, page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Project Videos 動画（video）のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">動画（video）のUUID (optional)</param>
        /// <param name="measUuid">計測のUUID (optional)</param>
        /// <param name="channel">チャンネル (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to &quot;create_at+&quot;)</param>
        /// <param name="page">取得するページ番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 100)</param>
        /// <returns>ApiResponse of Videos</returns>
        public intdash.Client.ApiResponse<Videos> GetProjectVideosWithHttpInfo(string projectUuid, string uuid = default(string), string measUuid = default(string), int? channel = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->GetProjectVideos");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "uuid", uuid));
            }
            if (measUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "meas_uuid", measUuid));
            }
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Videos>("/media/projects/{project_uuid}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectVideos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Project Videos 動画（video）のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">動画（video）のUUID (optional)</param>
        /// <param name="measUuid">計測のUUID (optional)</param>
        /// <param name="channel">チャンネル (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to &quot;create_at+&quot;)</param>
        /// <param name="page">取得するページ番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Videos</returns>
        public async System.Threading.Tasks.Task<Videos> GetProjectVideosAsync(string projectUuid, string uuid = default(string), string measUuid = default(string), int? channel = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Videos> localVarResponse = await GetProjectVideosWithHttpInfoAsync(projectUuid, uuid, measUuid, channel, sort, page, perPage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Project Videos 動画（video）のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">動画（video）のUUID (optional)</param>
        /// <param name="measUuid">計測のUUID (optional)</param>
        /// <param name="channel">チャンネル (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to &quot;create_at+&quot;)</param>
        /// <param name="page">取得するページ番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Videos)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Videos>> GetProjectVideosWithHttpInfoAsync(string projectUuid, string uuid = default(string), string measUuid = default(string), int? channel = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MediaVideosApi->GetProjectVideos");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "uuid", uuid));
            }
            if (measUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "meas_uuid", measUuid));
            }
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Videos>("/media/projects/{project_uuid}/videos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectVideos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Video （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>Video</returns>
        [Obsolete]
        public Video GetVideo(string videoUuid)
        {
            intdash.Client.ApiResponse<Video> localVarResponse = GetVideoWithHttpInfo(videoUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Video （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <returns>ApiResponse of Video</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Video> GetVideoWithHttpInfo(string videoUuid)
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetVideo");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Video>("/media/videos/{video_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Video （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Video</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Video> GetVideoAsync(string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Video> localVarResponse = await GetVideoWithHttpInfoAsync(videoUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Video （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoUuid">変換元の動画（video）のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Video)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Video>> GetVideoWithHttpInfoAsync(string videoUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoUuid' is set
            if (videoUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'videoUuid' when calling MediaVideosApi->GetVideo");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_uuid", intdash.Client.ClientUtils.ParameterToString(videoUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Video>("/media/videos/{video_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Videos （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">動画（video）のUUID (optional)</param>
        /// <param name="measUuid">計測のUUID (optional)</param>
        /// <param name="channel">チャンネル (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to &quot;create_at+&quot;)</param>
        /// <param name="page">取得するページ番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 100)</param>
        /// <returns>Videos</returns>
        [Obsolete]
        public Videos GetVideos(string uuid = default(string), string measUuid = default(string), int? channel = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?))
        {
            intdash.Client.ApiResponse<Videos> localVarResponse = GetVideosWithHttpInfo(uuid, measUuid, channel, sort, page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Videos （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">動画（video）のUUID (optional)</param>
        /// <param name="measUuid">計測のUUID (optional)</param>
        /// <param name="channel">チャンネル (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to &quot;create_at+&quot;)</param>
        /// <param name="page">取得するページ番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 100)</param>
        /// <returns>ApiResponse of Videos</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Videos> GetVideosWithHttpInfo(string uuid = default(string), string measUuid = default(string), int? channel = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?))
        {
            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "uuid", uuid));
            }
            if (measUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "meas_uuid", measUuid));
            }
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Videos>("/media/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Videos （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">動画（video）のUUID (optional)</param>
        /// <param name="measUuid">計測のUUID (optional)</param>
        /// <param name="channel">チャンネル (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to &quot;create_at+&quot;)</param>
        /// <param name="page">取得するページ番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Videos</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Videos> GetVideosAsync(string uuid = default(string), string measUuid = default(string), int? channel = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Videos> localVarResponse = await GetVideosWithHttpInfoAsync(uuid, measUuid, channel, sort, page, perPage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Videos （Deprecated。代わりに Prefix(&#x60;/projects/00000000-0000-0000-0000-000000000000/&#x60;)が付いたエンドポイントを使用してください） 動画（video）のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">動画（video）のUUID (optional)</param>
        /// <param name="measUuid">計測のUUID (optional)</param>
        /// <param name="channel">チャンネル (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to &quot;create_at+&quot;)</param>
        /// <param name="page">取得するページ番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Videos)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Videos>> GetVideosWithHttpInfoAsync(string uuid = default(string), string measUuid = default(string), int? channel = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "uuid", uuid));
            }
            if (measUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "meas_uuid", measUuid));
            }
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Videos>("/media/videos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
