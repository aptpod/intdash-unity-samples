/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using intdash.Client;
using intdash.Model;

namespace intdash.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthEdgesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign Owner
        /// </summary>
        /// <remarks>
        /// エッジに所有者を割り当てます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="assignOwnerRequest"> (optional)</param>
        /// <returns>EdgeOwner</returns>
        EdgeOwner AssignOwner(string edgeUuid, AssignOwnerRequest assignOwnerRequest = default(AssignOwnerRequest));

        /// <summary>
        /// Assign Owner
        /// </summary>
        /// <remarks>
        /// エッジに所有者を割り当てます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="assignOwnerRequest"> (optional)</param>
        /// <returns>ApiResponse of EdgeOwner</returns>
        ApiResponse<EdgeOwner> AssignOwnerWithHttpInfo(string edgeUuid, AssignOwnerRequest assignOwnerRequest = default(AssignOwnerRequest));
        /// <summary>
        /// Create Edge
        /// </summary>
        /// <remarks>
        /// 所有者がない状態でエッジを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <returns>Edge</returns>
        Edge CreateEdge(CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest));

        /// <summary>
        /// Create Edge
        /// </summary>
        /// <remarks>
        /// 所有者がない状態でエッジを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <returns>ApiResponse of Edge</returns>
        ApiResponse<Edge> CreateEdgeWithHttpInfo(CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest));
        /// <summary>
        /// Create My Edge
        /// </summary>
        /// <remarks>
        /// 新しいエッジを作成し、自分（ユーザー）を所有者に設定します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <returns>Edge</returns>
        Edge CreateMyEdge(CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest));

        /// <summary>
        /// Create My Edge
        /// </summary>
        /// <remarks>
        /// 新しいエッジを作成し、自分（ユーザー）を所有者に設定します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <returns>ApiResponse of Edge</returns>
        ApiResponse<Edge> CreateMyEdgeWithHttpInfo(CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest));
        /// <summary>
        /// Create My Edge With UUID
        /// </summary>
        /// <remarks>
        /// 指定したUUIDを持つ新しいエッジを作成し、自分を所有者に設定します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <returns>Edge</returns>
        Edge CreateMyEdgeWithUUID(string edgeUuid, CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest));

        /// <summary>
        /// Create My Edge With UUID
        /// </summary>
        /// <remarks>
        /// 指定したUUIDを持つ新しいエッジを作成し、自分を所有者に設定します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <returns>ApiResponse of Edge</returns>
        ApiResponse<Edge> CreateMyEdgeWithUUIDWithHttpInfo(string edgeUuid, CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest));
        /// <summary>
        /// Create User&#39;s Edge
        /// </summary>
        /// <remarks>
        /// 指定されたユーザーを所有者とするエッジを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <returns>Edge</returns>
        Edge CreateUsersEdge(string userUuid, CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest));

        /// <summary>
        /// Create User&#39;s Edge
        /// </summary>
        /// <remarks>
        /// 指定されたユーザーを所有者とするエッジを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <returns>ApiResponse of Edge</returns>
        ApiResponse<Edge> CreateUsersEdgeWithHttpInfo(string userUuid, CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest));
        /// <summary>
        /// Delete Edge
        /// </summary>
        /// <remarks>
        /// エッジを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns></returns>
        void DeleteEdge(string edgeUuid);

        /// <summary>
        /// Delete Edge
        /// </summary>
        /// <remarks>
        /// エッジを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEdgeWithHttpInfo(string edgeUuid);
        /// <summary>
        /// Delete My Edge
        /// </summary>
        /// <remarks>
        /// 自分（ユーザー）が所有するエッジを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns></returns>
        void DeleteMyEdge(string edgeUuid);

        /// <summary>
        /// Delete My Edge
        /// </summary>
        /// <remarks>
        /// 自分（ユーザー）が所有するエッジを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMyEdgeWithHttpInfo(string edgeUuid);
        /// <summary>
        /// Delete User&#39;s Edge
        /// </summary>
        /// <remarks>
        /// ユーザーが所有するエッジを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns></returns>
        void DeleteUsersEdge(string userUuid, string edgeUuid);

        /// <summary>
        /// Delete User&#39;s Edge
        /// </summary>
        /// <remarks>
        /// ユーザーが所有するエッジを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUsersEdgeWithHttpInfo(string userUuid, string edgeUuid);
        /// <summary>
        /// Get Edge
        /// </summary>
        /// <remarks>
        /// エッジを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns>Edge</returns>
        Edge GetEdge(string edgeUuid);

        /// <summary>
        /// Get Edge
        /// </summary>
        /// <remarks>
        /// エッジを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns>ApiResponse of Edge</returns>
        ApiResponse<Edge> GetEdgeWithHttpInfo(string edgeUuid);
        /// <summary>
        /// Get Edge having the same UUID as Me
        /// </summary>
        /// <remarks>
        /// 自分のUUIDと同じエッジUUIDを持つエッジを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Edge</returns>
        Edge GetMeAsEdge();

        /// <summary>
        /// Get Edge having the same UUID as Me
        /// </summary>
        /// <remarks>
        /// 自分のUUIDと同じエッジUUIDを持つエッジを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Edge</returns>
        ApiResponse<Edge> GetMeAsEdgeWithHttpInfo();
        /// <summary>
        /// Get My Edge
        /// </summary>
        /// <remarks>
        /// 自分（ユーザー）が所有するエッジを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns>Edge</returns>
        Edge GetMyEdge(string edgeUuid);

        /// <summary>
        /// Get My Edge
        /// </summary>
        /// <remarks>
        /// 自分（ユーザー）が所有するエッジを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns>ApiResponse of Edge</returns>
        ApiResponse<Edge> GetMyEdgeWithHttpInfo(string edgeUuid);
        /// <summary>
        /// Get User&#39;s Edge
        /// </summary>
        /// <remarks>
        /// ユーザーが所有するエッジを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns>Edge</returns>
        Edge GetUsersEdge(string userUuid, string edgeUuid);

        /// <summary>
        /// Get User&#39;s Edge
        /// </summary>
        /// <remarks>
        /// ユーザーが所有するエッジを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns>ApiResponse of Edge</returns>
        ApiResponse<Edge> GetUsersEdgeWithHttpInfo(string userUuid, string edgeUuid);
        /// <summary>
        /// List Edges
        /// </summary>
        /// <remarks>
        /// エッジのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">エッジのUUID (optional)</param>
        /// <param name="name">名前による部分一致検索 (optional)</param>
        /// <param name="nickname">表示名による部分一致検索 (optional)</param>
        /// <param name="ownerUuid">所有者ユーザーのUUID (optional)</param>
        /// <param name="hasOwner">所有者の有無。  * &#x60;true&#x60; : 所有者が設定されているエッジを取得します。 * &#x60;false&#x60; : 所有者が設定されていないエッジを取得します。 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at (optional, default to &quot;name+&quot;)</param>
        /// <param name="page">取得するページの番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 30)</param>
        /// <returns>Edges</returns>
        Edges ListEdges(List<string> uuid = default(List<string>), List<string> name = default(List<string>), List<string> nickname = default(List<string>), List<string> ownerUuid = default(List<string>), string hasOwner = default(string), string sort = default(string), int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// List Edges
        /// </summary>
        /// <remarks>
        /// エッジのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">エッジのUUID (optional)</param>
        /// <param name="name">名前による部分一致検索 (optional)</param>
        /// <param name="nickname">表示名による部分一致検索 (optional)</param>
        /// <param name="ownerUuid">所有者ユーザーのUUID (optional)</param>
        /// <param name="hasOwner">所有者の有無。  * &#x60;true&#x60; : 所有者が設定されているエッジを取得します。 * &#x60;false&#x60; : 所有者が設定されていないエッジを取得します。 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at (optional, default to &quot;name+&quot;)</param>
        /// <param name="page">取得するページの番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 30)</param>
        /// <returns>ApiResponse of Edges</returns>
        ApiResponse<Edges> ListEdgesWithHttpInfo(List<string> uuid = default(List<string>), List<string> name = default(List<string>), List<string> nickname = default(List<string>), List<string> ownerUuid = default(List<string>), string hasOwner = default(string), string sort = default(string), int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// List My Edges
        /// </summary>
        /// <remarks>
        /// 自分（ユーザー）が所有するエッジのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Edges</returns>
        Edges ListMyEdges();

        /// <summary>
        /// List My Edges
        /// </summary>
        /// <remarks>
        /// 自分（ユーザー）が所有するエッジのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Edges</returns>
        ApiResponse<Edges> ListMyEdgesWithHttpInfo();
        /// <summary>
        /// List User&#39;s Edges
        /// </summary>
        /// <remarks>
        /// 指定されたユーザーが所有するエッジのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>Edges</returns>
        Edges ListUsersEdges(string userUuid);

        /// <summary>
        /// List User&#39;s Edges
        /// </summary>
        /// <remarks>
        /// 指定されたユーザーが所有するエッジのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>ApiResponse of Edges</returns>
        ApiResponse<Edges> ListUsersEdgesWithHttpInfo(string userUuid);
        /// <summary>
        /// Unassign Owner
        /// </summary>
        /// <remarks>
        /// エッジに所有者がない状態にします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns></returns>
        void RemoveOwner(string edgeUuid);

        /// <summary>
        /// Unassign Owner
        /// </summary>
        /// <remarks>
        /// エッジに所有者がない状態にします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveOwnerWithHttpInfo(string edgeUuid);
        /// <summary>
        /// Update Edge
        /// </summary>
        /// <remarks>
        /// エッジを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <returns>Edge</returns>
        Edge UpdateEdge(string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest));

        /// <summary>
        /// Update Edge
        /// </summary>
        /// <remarks>
        /// エッジを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <returns>ApiResponse of Edge</returns>
        ApiResponse<Edge> UpdateEdgeWithHttpInfo(string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest));
        /// <summary>
        /// Update My Edge
        /// </summary>
        /// <remarks>
        /// 自分（ユーザー）が所有するエッジを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <returns>Edge</returns>
        Edge UpdateMyEdge(string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest));

        /// <summary>
        /// Update My Edge
        /// </summary>
        /// <remarks>
        /// 自分（ユーザー）が所有するエッジを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <returns>ApiResponse of Edge</returns>
        ApiResponse<Edge> UpdateMyEdgeWithHttpInfo(string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest));
        /// <summary>
        /// Update User&#39;s Edge
        /// </summary>
        /// <remarks>
        /// ユーザーが所有するエッジを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <returns>Edge</returns>
        Edge UpdateUsersEdge(string userUuid, string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest));

        /// <summary>
        /// Update User&#39;s Edge
        /// </summary>
        /// <remarks>
        /// ユーザーが所有するエッジを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <returns>ApiResponse of Edge</returns>
        ApiResponse<Edge> UpdateUsersEdgeWithHttpInfo(string userUuid, string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthEdgesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Assign Owner
        /// </summary>
        /// <remarks>
        /// エッジに所有者を割り当てます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="assignOwnerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeOwner</returns>
        System.Threading.Tasks.Task<EdgeOwner> AssignOwnerAsync(string edgeUuid, AssignOwnerRequest assignOwnerRequest = default(AssignOwnerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Assign Owner
        /// </summary>
        /// <remarks>
        /// エッジに所有者を割り当てます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="assignOwnerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeOwner)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdgeOwner>> AssignOwnerWithHttpInfoAsync(string edgeUuid, AssignOwnerRequest assignOwnerRequest = default(AssignOwnerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Edge
        /// </summary>
        /// <remarks>
        /// 所有者がない状態でエッジを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        System.Threading.Tasks.Task<Edge> CreateEdgeAsync(CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Edge
        /// </summary>
        /// <remarks>
        /// 所有者がない状態でエッジを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        System.Threading.Tasks.Task<ApiResponse<Edge>> CreateEdgeWithHttpInfoAsync(CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create My Edge
        /// </summary>
        /// <remarks>
        /// 新しいエッジを作成し、自分（ユーザー）を所有者に設定します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        System.Threading.Tasks.Task<Edge> CreateMyEdgeAsync(CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create My Edge
        /// </summary>
        /// <remarks>
        /// 新しいエッジを作成し、自分（ユーザー）を所有者に設定します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        System.Threading.Tasks.Task<ApiResponse<Edge>> CreateMyEdgeWithHttpInfoAsync(CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create My Edge With UUID
        /// </summary>
        /// <remarks>
        /// 指定したUUIDを持つ新しいエッジを作成し、自分を所有者に設定します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        System.Threading.Tasks.Task<Edge> CreateMyEdgeWithUUIDAsync(string edgeUuid, CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create My Edge With UUID
        /// </summary>
        /// <remarks>
        /// 指定したUUIDを持つ新しいエッジを作成し、自分を所有者に設定します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        System.Threading.Tasks.Task<ApiResponse<Edge>> CreateMyEdgeWithUUIDWithHttpInfoAsync(string edgeUuid, CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create User&#39;s Edge
        /// </summary>
        /// <remarks>
        /// 指定されたユーザーを所有者とするエッジを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        System.Threading.Tasks.Task<Edge> CreateUsersEdgeAsync(string userUuid, CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create User&#39;s Edge
        /// </summary>
        /// <remarks>
        /// 指定されたユーザーを所有者とするエッジを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        System.Threading.Tasks.Task<ApiResponse<Edge>> CreateUsersEdgeWithHttpInfoAsync(string userUuid, CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Edge
        /// </summary>
        /// <remarks>
        /// エッジを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEdgeAsync(string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Edge
        /// </summary>
        /// <remarks>
        /// エッジを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEdgeWithHttpInfoAsync(string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete My Edge
        /// </summary>
        /// <remarks>
        /// 自分（ユーザー）が所有するエッジを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMyEdgeAsync(string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete My Edge
        /// </summary>
        /// <remarks>
        /// 自分（ユーザー）が所有するエッジを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMyEdgeWithHttpInfoAsync(string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete User&#39;s Edge
        /// </summary>
        /// <remarks>
        /// ユーザーが所有するエッジを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUsersEdgeAsync(string userUuid, string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete User&#39;s Edge
        /// </summary>
        /// <remarks>
        /// ユーザーが所有するエッジを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUsersEdgeWithHttpInfoAsync(string userUuid, string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Edge
        /// </summary>
        /// <remarks>
        /// エッジを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        System.Threading.Tasks.Task<Edge> GetEdgeAsync(string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Edge
        /// </summary>
        /// <remarks>
        /// エッジを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        System.Threading.Tasks.Task<ApiResponse<Edge>> GetEdgeWithHttpInfoAsync(string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Edge having the same UUID as Me
        /// </summary>
        /// <remarks>
        /// 自分のUUIDと同じエッジUUIDを持つエッジを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        System.Threading.Tasks.Task<Edge> GetMeAsEdgeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Edge having the same UUID as Me
        /// </summary>
        /// <remarks>
        /// 自分のUUIDと同じエッジUUIDを持つエッジを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        System.Threading.Tasks.Task<ApiResponse<Edge>> GetMeAsEdgeWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get My Edge
        /// </summary>
        /// <remarks>
        /// 自分（ユーザー）が所有するエッジを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        System.Threading.Tasks.Task<Edge> GetMyEdgeAsync(string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get My Edge
        /// </summary>
        /// <remarks>
        /// 自分（ユーザー）が所有するエッジを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        System.Threading.Tasks.Task<ApiResponse<Edge>> GetMyEdgeWithHttpInfoAsync(string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get User&#39;s Edge
        /// </summary>
        /// <remarks>
        /// ユーザーが所有するエッジを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        System.Threading.Tasks.Task<Edge> GetUsersEdgeAsync(string userUuid, string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get User&#39;s Edge
        /// </summary>
        /// <remarks>
        /// ユーザーが所有するエッジを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        System.Threading.Tasks.Task<ApiResponse<Edge>> GetUsersEdgeWithHttpInfoAsync(string userUuid, string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Edges
        /// </summary>
        /// <remarks>
        /// エッジのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">エッジのUUID (optional)</param>
        /// <param name="name">名前による部分一致検索 (optional)</param>
        /// <param name="nickname">表示名による部分一致検索 (optional)</param>
        /// <param name="ownerUuid">所有者ユーザーのUUID (optional)</param>
        /// <param name="hasOwner">所有者の有無。  * &#x60;true&#x60; : 所有者が設定されているエッジを取得します。 * &#x60;false&#x60; : 所有者が設定されていないエッジを取得します。 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at (optional, default to &quot;name+&quot;)</param>
        /// <param name="page">取得するページの番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edges</returns>
        System.Threading.Tasks.Task<Edges> ListEdgesAsync(List<string> uuid = default(List<string>), List<string> name = default(List<string>), List<string> nickname = default(List<string>), List<string> ownerUuid = default(List<string>), string hasOwner = default(string), string sort = default(string), int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Edges
        /// </summary>
        /// <remarks>
        /// エッジのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">エッジのUUID (optional)</param>
        /// <param name="name">名前による部分一致検索 (optional)</param>
        /// <param name="nickname">表示名による部分一致検索 (optional)</param>
        /// <param name="ownerUuid">所有者ユーザーのUUID (optional)</param>
        /// <param name="hasOwner">所有者の有無。  * &#x60;true&#x60; : 所有者が設定されているエッジを取得します。 * &#x60;false&#x60; : 所有者が設定されていないエッジを取得します。 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at (optional, default to &quot;name+&quot;)</param>
        /// <param name="page">取得するページの番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edges)</returns>
        System.Threading.Tasks.Task<ApiResponse<Edges>> ListEdgesWithHttpInfoAsync(List<string> uuid = default(List<string>), List<string> name = default(List<string>), List<string> nickname = default(List<string>), List<string> ownerUuid = default(List<string>), string hasOwner = default(string), string sort = default(string), int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List My Edges
        /// </summary>
        /// <remarks>
        /// 自分（ユーザー）が所有するエッジのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edges</returns>
        System.Threading.Tasks.Task<Edges> ListMyEdgesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List My Edges
        /// </summary>
        /// <remarks>
        /// 自分（ユーザー）が所有するエッジのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edges)</returns>
        System.Threading.Tasks.Task<ApiResponse<Edges>> ListMyEdgesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List User&#39;s Edges
        /// </summary>
        /// <remarks>
        /// 指定されたユーザーが所有するエッジのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edges</returns>
        System.Threading.Tasks.Task<Edges> ListUsersEdgesAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List User&#39;s Edges
        /// </summary>
        /// <remarks>
        /// 指定されたユーザーが所有するエッジのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edges)</returns>
        System.Threading.Tasks.Task<ApiResponse<Edges>> ListUsersEdgesWithHttpInfoAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unassign Owner
        /// </summary>
        /// <remarks>
        /// エッジに所有者がない状態にします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveOwnerAsync(string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unassign Owner
        /// </summary>
        /// <remarks>
        /// エッジに所有者がない状態にします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveOwnerWithHttpInfoAsync(string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Edge
        /// </summary>
        /// <remarks>
        /// エッジを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        System.Threading.Tasks.Task<Edge> UpdateEdgeAsync(string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Edge
        /// </summary>
        /// <remarks>
        /// エッジを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        System.Threading.Tasks.Task<ApiResponse<Edge>> UpdateEdgeWithHttpInfoAsync(string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update My Edge
        /// </summary>
        /// <remarks>
        /// 自分（ユーザー）が所有するエッジを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        System.Threading.Tasks.Task<Edge> UpdateMyEdgeAsync(string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update My Edge
        /// </summary>
        /// <remarks>
        /// 自分（ユーザー）が所有するエッジを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        System.Threading.Tasks.Task<ApiResponse<Edge>> UpdateMyEdgeWithHttpInfoAsync(string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update User&#39;s Edge
        /// </summary>
        /// <remarks>
        /// ユーザーが所有するエッジを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        System.Threading.Tasks.Task<Edge> UpdateUsersEdgeAsync(string userUuid, string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update User&#39;s Edge
        /// </summary>
        /// <remarks>
        /// ユーザーが所有するエッジを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        System.Threading.Tasks.Task<ApiResponse<Edge>> UpdateUsersEdgeWithHttpInfoAsync(string userUuid, string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthEdgesApi : IAuthEdgesApiSync, IAuthEdgesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthEdgesApi : IDisposable, IAuthEdgesApi
    {
        private intdash.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthEdgesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AuthEdgesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthEdgesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AuthEdgesApi(string basePath)
        {
            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                new intdash.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new intdash.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthEdgesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AuthEdgesApi(intdash.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new intdash.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthEdgesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthEdgesApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthEdgesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthEdgesApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                new intdash.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new intdash.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthEdgesApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthEdgesApi(HttpClient client, intdash.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new intdash.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthEdgesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AuthEdgesApi(intdash.Client.ISynchronousClient client, intdash.Client.IAsynchronousClient asyncClient, intdash.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public intdash.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public intdash.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public intdash.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public intdash.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public intdash.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Assign Owner エッジに所有者を割り当てます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="assignOwnerRequest"> (optional)</param>
        /// <returns>EdgeOwner</returns>
        public EdgeOwner AssignOwner(string edgeUuid, AssignOwnerRequest assignOwnerRequest = default(AssignOwnerRequest))
        {
            intdash.Client.ApiResponse<EdgeOwner> localVarResponse = AssignOwnerWithHttpInfo(edgeUuid, assignOwnerRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign Owner エッジに所有者を割り当てます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="assignOwnerRequest"> (optional)</param>
        /// <returns>ApiResponse of EdgeOwner</returns>
        public intdash.Client.ApiResponse<EdgeOwner> AssignOwnerWithHttpInfo(string edgeUuid, AssignOwnerRequest assignOwnerRequest = default(AssignOwnerRequest))
        {
            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->AssignOwner");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter
            localVarRequestOptions.Data = assignOwnerRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EdgeOwner>("/auth/edges/{edge_uuid}/owner", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignOwner", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign Owner エッジに所有者を割り当てます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="assignOwnerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeOwner</returns>
        public async System.Threading.Tasks.Task<EdgeOwner> AssignOwnerAsync(string edgeUuid, AssignOwnerRequest assignOwnerRequest = default(AssignOwnerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<EdgeOwner> localVarResponse = await AssignOwnerWithHttpInfoAsync(edgeUuid, assignOwnerRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign Owner エッジに所有者を割り当てます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="assignOwnerRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeOwner)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<EdgeOwner>> AssignOwnerWithHttpInfoAsync(string edgeUuid, AssignOwnerRequest assignOwnerRequest = default(AssignOwnerRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->AssignOwner");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter
            localVarRequestOptions.Data = assignOwnerRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<EdgeOwner>("/auth/edges/{edge_uuid}/owner", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignOwner", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Edge 所有者がない状態でエッジを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <returns>Edge</returns>
        public Edge CreateEdge(CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest))
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = CreateEdgeWithHttpInfo(createEdgeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Edge 所有者がない状態でエッジを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <returns>ApiResponse of Edge</returns>
        public intdash.Client.ApiResponse<Edge> CreateEdgeWithHttpInfo(CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest))
        {
            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createEdgeRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Edge>("/auth/edges", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Edge 所有者がない状態でエッジを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        public async System.Threading.Tasks.Task<Edge> CreateEdgeAsync(CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = await CreateEdgeWithHttpInfoAsync(createEdgeRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Edge 所有者がない状態でエッジを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Edge>> CreateEdgeWithHttpInfoAsync(CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createEdgeRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Edge>("/auth/edges", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create My Edge 新しいエッジを作成し、自分（ユーザー）を所有者に設定します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <returns>Edge</returns>
        public Edge CreateMyEdge(CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest))
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = CreateMyEdgeWithHttpInfo(createEdgeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create My Edge 新しいエッジを作成し、自分（ユーザー）を所有者に設定します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <returns>ApiResponse of Edge</returns>
        public intdash.Client.ApiResponse<Edge> CreateMyEdgeWithHttpInfo(CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest))
        {
            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createEdgeRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Edge>("/auth/users/me/edges", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMyEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create My Edge 新しいエッジを作成し、自分（ユーザー）を所有者に設定します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        public async System.Threading.Tasks.Task<Edge> CreateMyEdgeAsync(CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = await CreateMyEdgeWithHttpInfoAsync(createEdgeRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create My Edge 新しいエッジを作成し、自分（ユーザー）を所有者に設定します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Edge>> CreateMyEdgeWithHttpInfoAsync(CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createEdgeRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Edge>("/auth/users/me/edges", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMyEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create My Edge With UUID 指定したUUIDを持つ新しいエッジを作成し、自分を所有者に設定します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <returns>Edge</returns>
        public Edge CreateMyEdgeWithUUID(string edgeUuid, CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest))
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = CreateMyEdgeWithUUIDWithHttpInfo(edgeUuid, createEdgeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create My Edge With UUID 指定したUUIDを持つ新しいエッジを作成し、自分を所有者に設定します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <returns>ApiResponse of Edge</returns>
        public intdash.Client.ApiResponse<Edge> CreateMyEdgeWithUUIDWithHttpInfo(string edgeUuid, CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest))
        {
            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->CreateMyEdgeWithUUID");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter
            localVarRequestOptions.Data = createEdgeRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Edge>("/auth/users/me/edges/{edge_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMyEdgeWithUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create My Edge With UUID 指定したUUIDを持つ新しいエッジを作成し、自分を所有者に設定します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        public async System.Threading.Tasks.Task<Edge> CreateMyEdgeWithUUIDAsync(string edgeUuid, CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = await CreateMyEdgeWithUUIDWithHttpInfoAsync(edgeUuid, createEdgeRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create My Edge With UUID 指定したUUIDを持つ新しいエッジを作成し、自分を所有者に設定します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Edge>> CreateMyEdgeWithUUIDWithHttpInfoAsync(string edgeUuid, CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->CreateMyEdgeWithUUID");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter
            localVarRequestOptions.Data = createEdgeRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Edge>("/auth/users/me/edges/{edge_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMyEdgeWithUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create User&#39;s Edge 指定されたユーザーを所有者とするエッジを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <returns>Edge</returns>
        public Edge CreateUsersEdge(string userUuid, CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest))
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = CreateUsersEdgeWithHttpInfo(userUuid, createEdgeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create User&#39;s Edge 指定されたユーザーを所有者とするエッジを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <returns>ApiResponse of Edge</returns>
        public intdash.Client.ApiResponse<Edge> CreateUsersEdgeWithHttpInfo(string userUuid, CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthEdgesApi->CreateUsersEdge");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.Data = createEdgeRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Edge>("/auth/users/{user_uuid}/edges", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUsersEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create User&#39;s Edge 指定されたユーザーを所有者とするエッジを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        public async System.Threading.Tasks.Task<Edge> CreateUsersEdgeAsync(string userUuid, CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = await CreateUsersEdgeWithHttpInfoAsync(userUuid, createEdgeRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create User&#39;s Edge 指定されたユーザーを所有者とするエッジを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Edge>> CreateUsersEdgeWithHttpInfoAsync(string userUuid, CreateEdgeRequest createEdgeRequest = default(CreateEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthEdgesApi->CreateUsersEdge");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.Data = createEdgeRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Edge>("/auth/users/{user_uuid}/edges", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUsersEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Edge エッジを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns></returns>
        public void DeleteEdge(string edgeUuid)
        {
            DeleteEdgeWithHttpInfo(edgeUuid);
        }

        /// <summary>
        /// Delete Edge エッジを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> DeleteEdgeWithHttpInfo(string edgeUuid)
        {
            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->DeleteEdge");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/edges/{edge_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Edge エッジを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEdgeAsync(string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteEdgeWithHttpInfoAsync(edgeUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Edge エッジを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> DeleteEdgeWithHttpInfoAsync(string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->DeleteEdge");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/edges/{edge_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete My Edge 自分（ユーザー）が所有するエッジを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns></returns>
        public void DeleteMyEdge(string edgeUuid)
        {
            DeleteMyEdgeWithHttpInfo(edgeUuid);
        }

        /// <summary>
        /// Delete My Edge 自分（ユーザー）が所有するエッジを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> DeleteMyEdgeWithHttpInfo(string edgeUuid)
        {
            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->DeleteMyEdge");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/users/me/edges/{edge_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMyEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete My Edge 自分（ユーザー）が所有するエッジを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMyEdgeAsync(string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteMyEdgeWithHttpInfoAsync(edgeUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete My Edge 自分（ユーザー）が所有するエッジを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> DeleteMyEdgeWithHttpInfoAsync(string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->DeleteMyEdge");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/users/me/edges/{edge_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMyEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete User&#39;s Edge ユーザーが所有するエッジを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns></returns>
        public void DeleteUsersEdge(string userUuid, string edgeUuid)
        {
            DeleteUsersEdgeWithHttpInfo(userUuid, edgeUuid);
        }

        /// <summary>
        /// Delete User&#39;s Edge ユーザーが所有するエッジを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> DeleteUsersEdgeWithHttpInfo(string userUuid, string edgeUuid)
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthEdgesApi->DeleteUsersEdge");

            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->DeleteUsersEdge");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/users/{user_uuid}/edges/{edge_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUsersEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete User&#39;s Edge ユーザーが所有するエッジを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUsersEdgeAsync(string userUuid, string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteUsersEdgeWithHttpInfoAsync(userUuid, edgeUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete User&#39;s Edge ユーザーが所有するエッジを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> DeleteUsersEdgeWithHttpInfoAsync(string userUuid, string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthEdgesApi->DeleteUsersEdge");

            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->DeleteUsersEdge");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/users/{user_uuid}/edges/{edge_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUsersEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Edge エッジを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns>Edge</returns>
        public Edge GetEdge(string edgeUuid)
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = GetEdgeWithHttpInfo(edgeUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Edge エッジを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns>ApiResponse of Edge</returns>
        public intdash.Client.ApiResponse<Edge> GetEdgeWithHttpInfo(string edgeUuid)
        {
            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->GetEdge");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Edge>("/auth/edges/{edge_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Edge エッジを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        public async System.Threading.Tasks.Task<Edge> GetEdgeAsync(string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = await GetEdgeWithHttpInfoAsync(edgeUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Edge エッジを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Edge>> GetEdgeWithHttpInfoAsync(string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->GetEdge");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Edge>("/auth/edges/{edge_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Edge having the same UUID as Me 自分のUUIDと同じエッジUUIDを持つエッジを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Edge</returns>
        public Edge GetMeAsEdge()
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = GetMeAsEdgeWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Edge having the same UUID as Me 自分のUUIDと同じエッジUUIDを持つエッジを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Edge</returns>
        public intdash.Client.ApiResponse<Edge> GetMeAsEdgeWithHttpInfo()
        {
            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Edge>("/auth/edges/me", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeAsEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Edge having the same UUID as Me 自分のUUIDと同じエッジUUIDを持つエッジを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        public async System.Threading.Tasks.Task<Edge> GetMeAsEdgeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = await GetMeAsEdgeWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Edge having the same UUID as Me 自分のUUIDと同じエッジUUIDを持つエッジを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Edge>> GetMeAsEdgeWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Edge>("/auth/edges/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeAsEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get My Edge 自分（ユーザー）が所有するエッジを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns>Edge</returns>
        public Edge GetMyEdge(string edgeUuid)
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = GetMyEdgeWithHttpInfo(edgeUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get My Edge 自分（ユーザー）が所有するエッジを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns>ApiResponse of Edge</returns>
        public intdash.Client.ApiResponse<Edge> GetMyEdgeWithHttpInfo(string edgeUuid)
        {
            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->GetMyEdge");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Edge>("/auth/users/me/edges/{edge_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get My Edge 自分（ユーザー）が所有するエッジを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        public async System.Threading.Tasks.Task<Edge> GetMyEdgeAsync(string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = await GetMyEdgeWithHttpInfoAsync(edgeUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get My Edge 自分（ユーザー）が所有するエッジを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Edge>> GetMyEdgeWithHttpInfoAsync(string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->GetMyEdge");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Edge>("/auth/users/me/edges/{edge_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User&#39;s Edge ユーザーが所有するエッジを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns>Edge</returns>
        public Edge GetUsersEdge(string userUuid, string edgeUuid)
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = GetUsersEdgeWithHttpInfo(userUuid, edgeUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User&#39;s Edge ユーザーが所有するエッジを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns>ApiResponse of Edge</returns>
        public intdash.Client.ApiResponse<Edge> GetUsersEdgeWithHttpInfo(string userUuid, string edgeUuid)
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthEdgesApi->GetUsersEdge");

            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->GetUsersEdge");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Edge>("/auth/users/{user_uuid}/edges/{edge_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsersEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User&#39;s Edge ユーザーが所有するエッジを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        public async System.Threading.Tasks.Task<Edge> GetUsersEdgeAsync(string userUuid, string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = await GetUsersEdgeWithHttpInfoAsync(userUuid, edgeUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User&#39;s Edge ユーザーが所有するエッジを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Edge>> GetUsersEdgeWithHttpInfoAsync(string userUuid, string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthEdgesApi->GetUsersEdge");

            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->GetUsersEdge");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Edge>("/auth/users/{user_uuid}/edges/{edge_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsersEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Edges エッジのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">エッジのUUID (optional)</param>
        /// <param name="name">名前による部分一致検索 (optional)</param>
        /// <param name="nickname">表示名による部分一致検索 (optional)</param>
        /// <param name="ownerUuid">所有者ユーザーのUUID (optional)</param>
        /// <param name="hasOwner">所有者の有無。  * &#x60;true&#x60; : 所有者が設定されているエッジを取得します。 * &#x60;false&#x60; : 所有者が設定されていないエッジを取得します。 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at (optional, default to &quot;name+&quot;)</param>
        /// <param name="page">取得するページの番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 30)</param>
        /// <returns>Edges</returns>
        public Edges ListEdges(List<string> uuid = default(List<string>), List<string> name = default(List<string>), List<string> nickname = default(List<string>), List<string> ownerUuid = default(List<string>), string hasOwner = default(string), string sort = default(string), int? page = default(int?), int? perPage = default(int?))
        {
            intdash.Client.ApiResponse<Edges> localVarResponse = ListEdgesWithHttpInfo(uuid, name, nickname, ownerUuid, hasOwner, sort, page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Edges エッジのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">エッジのUUID (optional)</param>
        /// <param name="name">名前による部分一致検索 (optional)</param>
        /// <param name="nickname">表示名による部分一致検索 (optional)</param>
        /// <param name="ownerUuid">所有者ユーザーのUUID (optional)</param>
        /// <param name="hasOwner">所有者の有無。  * &#x60;true&#x60; : 所有者が設定されているエッジを取得します。 * &#x60;false&#x60; : 所有者が設定されていないエッジを取得します。 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at (optional, default to &quot;name+&quot;)</param>
        /// <param name="page">取得するページの番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 30)</param>
        /// <returns>ApiResponse of Edges</returns>
        public intdash.Client.ApiResponse<Edges> ListEdgesWithHttpInfo(List<string> uuid = default(List<string>), List<string> name = default(List<string>), List<string> nickname = default(List<string>), List<string> ownerUuid = default(List<string>), string hasOwner = default(string), string sort = default(string), int? page = default(int?), int? perPage = default(int?))
        {
            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "uuid", uuid));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "name", name));
            }
            if (nickname != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "nickname", nickname));
            }
            if (ownerUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "owner_uuid", ownerUuid));
            }
            if (hasOwner != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "has_owner", hasOwner));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Edges>("/auth/edges", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListEdges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Edges エッジのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">エッジのUUID (optional)</param>
        /// <param name="name">名前による部分一致検索 (optional)</param>
        /// <param name="nickname">表示名による部分一致検索 (optional)</param>
        /// <param name="ownerUuid">所有者ユーザーのUUID (optional)</param>
        /// <param name="hasOwner">所有者の有無。  * &#x60;true&#x60; : 所有者が設定されているエッジを取得します。 * &#x60;false&#x60; : 所有者が設定されていないエッジを取得します。 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at (optional, default to &quot;name+&quot;)</param>
        /// <param name="page">取得するページの番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edges</returns>
        public async System.Threading.Tasks.Task<Edges> ListEdgesAsync(List<string> uuid = default(List<string>), List<string> name = default(List<string>), List<string> nickname = default(List<string>), List<string> ownerUuid = default(List<string>), string hasOwner = default(string), string sort = default(string), int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Edges> localVarResponse = await ListEdgesWithHttpInfoAsync(uuid, name, nickname, ownerUuid, hasOwner, sort, page, perPage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Edges エッジのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">エッジのUUID (optional)</param>
        /// <param name="name">名前による部分一致検索 (optional)</param>
        /// <param name="nickname">表示名による部分一致検索 (optional)</param>
        /// <param name="ownerUuid">所有者ユーザーのUUID (optional)</param>
        /// <param name="hasOwner">所有者の有無。  * &#x60;true&#x60; : 所有者が設定されているエッジを取得します。 * &#x60;false&#x60; : 所有者が設定されていないエッジを取得します。 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at (optional, default to &quot;name+&quot;)</param>
        /// <param name="page">取得するページの番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edges)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Edges>> ListEdgesWithHttpInfoAsync(List<string> uuid = default(List<string>), List<string> name = default(List<string>), List<string> nickname = default(List<string>), List<string> ownerUuid = default(List<string>), string hasOwner = default(string), string sort = default(string), int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "uuid", uuid));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "name", name));
            }
            if (nickname != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "nickname", nickname));
            }
            if (ownerUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "owner_uuid", ownerUuid));
            }
            if (hasOwner != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "has_owner", hasOwner));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Edges>("/auth/edges", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListEdges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List My Edges 自分（ユーザー）が所有するエッジのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Edges</returns>
        public Edges ListMyEdges()
        {
            intdash.Client.ApiResponse<Edges> localVarResponse = ListMyEdgesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List My Edges 自分（ユーザー）が所有するエッジのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Edges</returns>
        public intdash.Client.ApiResponse<Edges> ListMyEdgesWithHttpInfo()
        {
            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Edges>("/auth/users/me/edges", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMyEdges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List My Edges 自分（ユーザー）が所有するエッジのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edges</returns>
        public async System.Threading.Tasks.Task<Edges> ListMyEdgesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Edges> localVarResponse = await ListMyEdgesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List My Edges 自分（ユーザー）が所有するエッジのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edges)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Edges>> ListMyEdgesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Edges>("/auth/users/me/edges", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMyEdges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List User&#39;s Edges 指定されたユーザーが所有するエッジのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>Edges</returns>
        public Edges ListUsersEdges(string userUuid)
        {
            intdash.Client.ApiResponse<Edges> localVarResponse = ListUsersEdgesWithHttpInfo(userUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List User&#39;s Edges 指定されたユーザーが所有するエッジのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>ApiResponse of Edges</returns>
        public intdash.Client.ApiResponse<Edges> ListUsersEdgesWithHttpInfo(string userUuid)
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthEdgesApi->ListUsersEdges");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Edges>("/auth/users/{user_uuid}/edges", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUsersEdges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List User&#39;s Edges 指定されたユーザーが所有するエッジのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edges</returns>
        public async System.Threading.Tasks.Task<Edges> ListUsersEdgesAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Edges> localVarResponse = await ListUsersEdgesWithHttpInfoAsync(userUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List User&#39;s Edges 指定されたユーザーが所有するエッジのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edges)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Edges>> ListUsersEdgesWithHttpInfoAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthEdgesApi->ListUsersEdges");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Edges>("/auth/users/{user_uuid}/edges", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUsersEdges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unassign Owner エッジに所有者がない状態にします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns></returns>
        public void RemoveOwner(string edgeUuid)
        {
            RemoveOwnerWithHttpInfo(edgeUuid);
        }

        /// <summary>
        /// Unassign Owner エッジに所有者がない状態にします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> RemoveOwnerWithHttpInfo(string edgeUuid)
        {
            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->RemoveOwner");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/edges/{edge_uuid}/owner", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveOwner", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unassign Owner エッジに所有者がない状態にします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveOwnerAsync(string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveOwnerWithHttpInfoAsync(edgeUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Unassign Owner エッジに所有者がない状態にします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> RemoveOwnerWithHttpInfoAsync(string edgeUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->RemoveOwner");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/edges/{edge_uuid}/owner", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveOwner", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Edge エッジを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <returns>Edge</returns>
        public Edge UpdateEdge(string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest))
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = UpdateEdgeWithHttpInfo(edgeUuid, patchEdgeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Edge エッジを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <returns>ApiResponse of Edge</returns>
        public intdash.Client.ApiResponse<Edge> UpdateEdgeWithHttpInfo(string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest))
        {
            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->UpdateEdge");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter
            localVarRequestOptions.Data = patchEdgeRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Edge>("/auth/edges/{edge_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Edge エッジを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        public async System.Threading.Tasks.Task<Edge> UpdateEdgeAsync(string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = await UpdateEdgeWithHttpInfoAsync(edgeUuid, patchEdgeRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Edge エッジを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Edge>> UpdateEdgeWithHttpInfoAsync(string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->UpdateEdge");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter
            localVarRequestOptions.Data = patchEdgeRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Edge>("/auth/edges/{edge_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update My Edge 自分（ユーザー）が所有するエッジを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <returns>Edge</returns>
        public Edge UpdateMyEdge(string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest))
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = UpdateMyEdgeWithHttpInfo(edgeUuid, patchEdgeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update My Edge 自分（ユーザー）が所有するエッジを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <returns>ApiResponse of Edge</returns>
        public intdash.Client.ApiResponse<Edge> UpdateMyEdgeWithHttpInfo(string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest))
        {
            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->UpdateMyEdge");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter
            localVarRequestOptions.Data = patchEdgeRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Edge>("/auth/users/me/edges/{edge_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMyEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update My Edge 自分（ユーザー）が所有するエッジを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        public async System.Threading.Tasks.Task<Edge> UpdateMyEdgeAsync(string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = await UpdateMyEdgeWithHttpInfoAsync(edgeUuid, patchEdgeRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update My Edge 自分（ユーザー）が所有するエッジを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Edge>> UpdateMyEdgeWithHttpInfoAsync(string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->UpdateMyEdge");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter
            localVarRequestOptions.Data = patchEdgeRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Edge>("/auth/users/me/edges/{edge_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMyEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User&#39;s Edge ユーザーが所有するエッジを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <returns>Edge</returns>
        public Edge UpdateUsersEdge(string userUuid, string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest))
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = UpdateUsersEdgeWithHttpInfo(userUuid, edgeUuid, patchEdgeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update User&#39;s Edge ユーザーが所有するエッジを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <returns>ApiResponse of Edge</returns>
        public intdash.Client.ApiResponse<Edge> UpdateUsersEdgeWithHttpInfo(string userUuid, string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthEdgesApi->UpdateUsersEdge");

            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->UpdateUsersEdge");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter
            localVarRequestOptions.Data = patchEdgeRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Edge>("/auth/users/{user_uuid}/edges/{edge_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUsersEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User&#39;s Edge ユーザーが所有するエッジを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Edge</returns>
        public async System.Threading.Tasks.Task<Edge> UpdateUsersEdgeAsync(string userUuid, string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Edge> localVarResponse = await UpdateUsersEdgeWithHttpInfoAsync(userUuid, edgeUuid, patchEdgeRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update User&#39;s Edge ユーザーが所有するエッジを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="patchEdgeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Edge)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Edge>> UpdateUsersEdgeWithHttpInfoAsync(string userUuid, string edgeUuid, PatchEdgeRequest patchEdgeRequest = default(PatchEdgeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthEdgesApi->UpdateUsersEdge");

            // verify the required parameter 'edgeUuid' is set
            if (edgeUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'edgeUuid' when calling AuthEdgesApi->UpdateUsersEdge");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // path parameter
            localVarRequestOptions.Data = patchEdgeRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Edge>("/auth/users/{user_uuid}/edges/{edge_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUsersEdge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
