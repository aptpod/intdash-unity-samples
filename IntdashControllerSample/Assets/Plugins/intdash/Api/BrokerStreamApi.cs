/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using intdash.Client;

namespace intdash.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBrokerStreamApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Project Realtime Streaming Data
        /// </summary>
        /// <remarks>
        /// WebSocketを使ってリアルタイムデータを取得します。  同じくWebSocketを使ってリアルタイムデータを扱う &#x60;/v1/ws/measurements&#x60; では、 iSCP (intdash Stream Control Protocol)を使用しますが、 本エンドポイントではJSONとしてデータポイントを取得することができます。 ## クエリパラメータ  | パラメータ名     | 型                         | 必須       | デフォルト | 説明  | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- - | - -- -- | | flush_interval   | string                     | true       | -          | メッセージがフラッシュされる間隔を指定します。 単位は\&quot;ns\&quot;、\&quot;us\&quot; (または\&quot;µs\&quot;)、\&quot;ms\&quot;、\&quot;s\&quot;、\&quot;m\&quot;、\&quot;h\&quot;のいずれかを使用してください （参考: [Goのtimeパッケージ](https://golang.org/pkg/time/#ParseDuration)）。 指定がない場合は、メッセージごとにフラッシュされます。 |  ## メッセージのフォーマット ###  JSON Lines リクエストメッセージおよびレスポンスメッセージには [JSON lines](http://jsonlines.org/) 形式を使用します。 1つのメッセージが1行です。  例: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} . .  &#x60;&#x60;&#x60; 注意: メッセージに改行を含むことはできません。 改行が入ったメッセージの例（悪い例）: &#x60;&#x60;&#x60; {   \&quot;type\&quot; : \&quot;message_type\&quot;,   \&quot;contents\&quot; : { depends on message_type } } &#x60;&#x60;&#x60;  メッセージには、 &#x60;type&#x60; 属性および &#x60;contents&#x60; 属性が必要です。 &#x60;contents&#x60; のスキーマは、 &#x60;type&#x60; により決定されます。 ## ダウンストリーム開始リクエスト ### ダウンストリーム開始リクエストメッセージのスキーマ | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 | | type             | string                   | true       | &#x60;\&quot;open_downstream\&quot;&#x60; | 固定値  | | contents         | object（次の表を参照）   | true       | -                 |         |  ### ダウンストリーム開始リクエスト内 &#x60;contents&#x60; のスキーマ | 属性名           | 型                       | 必須       | デフォルト         | 説明   | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- - | - -- -- - | | edge             | string                   | true       | -                  | データの送信元エッジを、エッジのUUIDまたはエッジの名前で指定します。 最初に、一致するエッジUUIDが検索され、一致するエッジUUIDがなければ一致する名前が検索されます。 | | filter           | string array             | false      | &#x60;[]&#x60;               | 「フィルター」を参照してください。 |  ### フィルター データコードとデータ名を指定することにより、指定にマッチしたデータポイントだけを受信することができます。 ただし、メタデータのデータポイントは、フィルターの設定に関係なくすべて受信されます。  フィルターは以下のフォーマットで設定します: &#x60;&lt;型コード&gt;:&lt;データ名&gt;&#x60; データコードについては、後述の 時系列データのペイロードフォーマット を参照してください。 フィルター設定文字列の各セグメントにはワイルドカード( &#x60;**&#x60; )を使用することができます。  例: - 型コードが &#x60;can_data_field&#x60; のデータポイント（CAN）を受信する -&gt; &#x60;can_data_field:**&#x60; - 型コードが &#x60;string/&#x60; で始まるデータポイントを受信する（&#x60;string/json&#x60; 、 &#x60;string/csv&#x60; など） -&gt; &#x60;string/_**:**&#x60; - 文字列のデータポイントのうち、データ名が &#x60;my-string&#x60; のものを受信する -&gt; &#x60;string:my-string&#x60;  &#x60;filter&#x60; として空の配列が指定された場合は、すべてのデータポイントを受信します。  ### ダウンストリーム開始リクエストの例 リクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;open_downstream\&quot;, \&quot;contents\&quot; : { \&quot;edge\&quot; : \&quot;edge_name_or_uuid\&quot;, \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } } &#x60;&#x60;&#x60; レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:  &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60;  ## ダウンストリーム更新リクエスト ### ダウンストリーム更新リクエストメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 | | type             | string                   | true       | &#x60;\&quot;update_downstream\&quot;&#x60;  | 固定値  | | contents         | object（次の表を参照）   | true       | -                 |         |  ### ダウンストリーム更新リクエスト内 &#x60;contents&#x60; のスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | filter           | string array             | true       | -                 |「フィルター」を参照してください。 |  ### ダウンストリーム更新リクエストの例 フィルターを指定する場合のリクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } } &#x60;&#x60;&#x60;  フィルターを指定せずすべてのデータポイントを受信する場合のリクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [] } } &#x60;&#x60;&#x60;  レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:  &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: update downstream\&quot; } } &#x60;&#x60;&#x60;  ## ダウンストリーム終了リクエスト ### ダウンストリーム終了リクエストメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。  | | type             | string                   | true       | &#x60;\&quot;close_downstream\&quot;&#x60; | 固定値|  ### ダウンストリーム終了リクエストの例 リクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;close_downstream\&quot;} &#x60;&#x60;&#x60; レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: close downstream\&quot; } } &#x60;&#x60;&#x60;  ## レスポンスメッセージ リクエストの処理結果が返却されます。 ### レスポンスメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- | | type             | string                   | true       | &#x60;\&quot;response\&quot;&#x60;      | 固定値| | ack              | number                   | false      | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 | | contents         | object（次の表を参照）   | true       | -                 |       |  ### レスポンス内 &#x60;contents&#x60; のスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- | | code             | number                   | true       | -                 | 10000 &lt; code &lt; 20000 の場合、成功。 20000 &lt; code &lt; 30000 の場合、不正なリクエスト。50000 &lt; code の場合、予期しないエラー | | message          | string                   | true       | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |  ### レスポンスの例 &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60;  リクエストで &#x60;id&#x60; が指定されている場合のレスポンス例（ &#x60;id&#x60; の値が &#x60;ack&#x60; として返ります）:  &#x60;&#x60;&#x60; { \&quot;ack\&quot;: 1, \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60; # 時系列データのペイロードフォーマット 時系列データポイントが格納するペイロードのフォーマットです。各データ型に対する &#x60;contents&#x60;のフォーマットは [このページ](https://git.aptpod.co.jp/intdash-protocol/dataformat/-/tree/master/data) を参照してください。 ## データ型 各データバイナリには、ペイロードのフォーマットを示すデータ型が付与されます。各データ型には、型を識別するためのコード名が割り当てられます。 ## 標準データ型 単一のデータを格納するデータ型です。  |          名称           |  コード   | バイト長 |             説明             | | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- | | Bytes     | &#x60;bytes&#x60;   |   可変   | フォーマットなしバイト列     | | String    | &#x60;string&#x60;  |   可変   | フォーマットなし文字列       | | Float64   | &#x60;float64&#x60; |    8     | IEEE754 64ビット浮動小数点数 | | Int64     | &#x60;int64&#x60;   |    8     | 符号付き 64ビット整数        | | Bool      | &#x60;bool&#x60;    |    1     | 真偽値                       |  ## メディアデータ型 メディア（動画/音声）関連のデータを格納するデータ型です。  |          名称           |    コード    | バイト長 |            説明            | | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- | | JPEG | &#x60;video/jpeg&#x60; |   可変   | JPEG 形式の画像データ      | | H264 | &#x60;video/h264&#x60; |   可変   | H264 形式の映像データ      |  ### 拡張バイナリ型 フォーマット付きのバイナリデータを格納するデータ型です。  |                       名称                        |      コード       | バイト長 |                   説明                    | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | BSON                                 | &#x60;bson&#x60;            |   可変   | BSON フォーマット                         | | CAN Frame                            | &#x60;can_frame&#x60;       |   可変   | CAN フレーム フォーマット                 | | CAN Data Field                       | &#x60;can_data_field&#x60;  |   可変   | CAN データフィールド フォーマット         | | MAVLink1 Packet                      | &#x60;mavlink1_packet&#x60; |   可変   | MAVLink パケット フォーマット             | | Generic (非推奨)                     | &#x60;generic&#x60;         |   可変   | iSCPv1互換 汎用フォーマット               | | Controlpad (非推奨)                  | &#x60;control_pad&#x60;     |   可変   | iSCPv1互換 コントロールパッドフォーマット | | GeneralSensor (非推奨)               | &#x60;general_sensor&#x60;  |   可変   | iSCPv1互換 汎用センサーフォーマット       |  ### 拡張文字列型 フォーマット付きの文字列データを格納するデータ型です。  |           名称           |    コード     | バイト長 |       説明        | | :- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- - | | JSON | &#x60;string/json&#x60;     |   可変   | JSON フォーマット | | CSV   | &#x60;string/csv&#x60;     |   可変   | CSV フォーマット  | | NMEA | &#x60;string/nmea&#x60;     |   可変   | NMEA フォーマット |
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <returns></returns>
        void ProjectStream(string projectUuid);

        /// <summary>
        /// Get Project Realtime Streaming Data
        /// </summary>
        /// <remarks>
        /// WebSocketを使ってリアルタイムデータを取得します。  同じくWebSocketを使ってリアルタイムデータを扱う &#x60;/v1/ws/measurements&#x60; では、 iSCP (intdash Stream Control Protocol)を使用しますが、 本エンドポイントではJSONとしてデータポイントを取得することができます。 ## クエリパラメータ  | パラメータ名     | 型                         | 必須       | デフォルト | 説明  | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- - | - -- -- | | flush_interval   | string                     | true       | -          | メッセージがフラッシュされる間隔を指定します。 単位は\&quot;ns\&quot;、\&quot;us\&quot; (または\&quot;µs\&quot;)、\&quot;ms\&quot;、\&quot;s\&quot;、\&quot;m\&quot;、\&quot;h\&quot;のいずれかを使用してください （参考: [Goのtimeパッケージ](https://golang.org/pkg/time/#ParseDuration)）。 指定がない場合は、メッセージごとにフラッシュされます。 |  ## メッセージのフォーマット ###  JSON Lines リクエストメッセージおよびレスポンスメッセージには [JSON lines](http://jsonlines.org/) 形式を使用します。 1つのメッセージが1行です。  例: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} . .  &#x60;&#x60;&#x60; 注意: メッセージに改行を含むことはできません。 改行が入ったメッセージの例（悪い例）: &#x60;&#x60;&#x60; {   \&quot;type\&quot; : \&quot;message_type\&quot;,   \&quot;contents\&quot; : { depends on message_type } } &#x60;&#x60;&#x60;  メッセージには、 &#x60;type&#x60; 属性および &#x60;contents&#x60; 属性が必要です。 &#x60;contents&#x60; のスキーマは、 &#x60;type&#x60; により決定されます。 ## ダウンストリーム開始リクエスト ### ダウンストリーム開始リクエストメッセージのスキーマ | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 | | type             | string                   | true       | &#x60;\&quot;open_downstream\&quot;&#x60; | 固定値  | | contents         | object（次の表を参照）   | true       | -                 |         |  ### ダウンストリーム開始リクエスト内 &#x60;contents&#x60; のスキーマ | 属性名           | 型                       | 必須       | デフォルト         | 説明   | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- - | - -- -- - | | edge             | string                   | true       | -                  | データの送信元エッジを、エッジのUUIDまたはエッジの名前で指定します。 最初に、一致するエッジUUIDが検索され、一致するエッジUUIDがなければ一致する名前が検索されます。 | | filter           | string array             | false      | &#x60;[]&#x60;               | 「フィルター」を参照してください。 |  ### フィルター データコードとデータ名を指定することにより、指定にマッチしたデータポイントだけを受信することができます。 ただし、メタデータのデータポイントは、フィルターの設定に関係なくすべて受信されます。  フィルターは以下のフォーマットで設定します: &#x60;&lt;型コード&gt;:&lt;データ名&gt;&#x60; データコードについては、後述の 時系列データのペイロードフォーマット を参照してください。 フィルター設定文字列の各セグメントにはワイルドカード( &#x60;**&#x60; )を使用することができます。  例: - 型コードが &#x60;can_data_field&#x60; のデータポイント（CAN）を受信する -&gt; &#x60;can_data_field:**&#x60; - 型コードが &#x60;string/&#x60; で始まるデータポイントを受信する（&#x60;string/json&#x60; 、 &#x60;string/csv&#x60; など） -&gt; &#x60;string/_**:**&#x60; - 文字列のデータポイントのうち、データ名が &#x60;my-string&#x60; のものを受信する -&gt; &#x60;string:my-string&#x60;  &#x60;filter&#x60; として空の配列が指定された場合は、すべてのデータポイントを受信します。  ### ダウンストリーム開始リクエストの例 リクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;open_downstream\&quot;, \&quot;contents\&quot; : { \&quot;edge\&quot; : \&quot;edge_name_or_uuid\&quot;, \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } } &#x60;&#x60;&#x60; レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:  &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60;  ## ダウンストリーム更新リクエスト ### ダウンストリーム更新リクエストメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 | | type             | string                   | true       | &#x60;\&quot;update_downstream\&quot;&#x60;  | 固定値  | | contents         | object（次の表を参照）   | true       | -                 |         |  ### ダウンストリーム更新リクエスト内 &#x60;contents&#x60; のスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | filter           | string array             | true       | -                 |「フィルター」を参照してください。 |  ### ダウンストリーム更新リクエストの例 フィルターを指定する場合のリクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } } &#x60;&#x60;&#x60;  フィルターを指定せずすべてのデータポイントを受信する場合のリクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [] } } &#x60;&#x60;&#x60;  レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:  &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: update downstream\&quot; } } &#x60;&#x60;&#x60;  ## ダウンストリーム終了リクエスト ### ダウンストリーム終了リクエストメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。  | | type             | string                   | true       | &#x60;\&quot;close_downstream\&quot;&#x60; | 固定値|  ### ダウンストリーム終了リクエストの例 リクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;close_downstream\&quot;} &#x60;&#x60;&#x60; レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: close downstream\&quot; } } &#x60;&#x60;&#x60;  ## レスポンスメッセージ リクエストの処理結果が返却されます。 ### レスポンスメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- | | type             | string                   | true       | &#x60;\&quot;response\&quot;&#x60;      | 固定値| | ack              | number                   | false      | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 | | contents         | object（次の表を参照）   | true       | -                 |       |  ### レスポンス内 &#x60;contents&#x60; のスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- | | code             | number                   | true       | -                 | 10000 &lt; code &lt; 20000 の場合、成功。 20000 &lt; code &lt; 30000 の場合、不正なリクエスト。50000 &lt; code の場合、予期しないエラー | | message          | string                   | true       | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |  ### レスポンスの例 &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60;  リクエストで &#x60;id&#x60; が指定されている場合のレスポンス例（ &#x60;id&#x60; の値が &#x60;ack&#x60; として返ります）:  &#x60;&#x60;&#x60; { \&quot;ack\&quot;: 1, \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60; # 時系列データのペイロードフォーマット 時系列データポイントが格納するペイロードのフォーマットです。各データ型に対する &#x60;contents&#x60;のフォーマットは [このページ](https://git.aptpod.co.jp/intdash-protocol/dataformat/-/tree/master/data) を参照してください。 ## データ型 各データバイナリには、ペイロードのフォーマットを示すデータ型が付与されます。各データ型には、型を識別するためのコード名が割り当てられます。 ## 標準データ型 単一のデータを格納するデータ型です。  |          名称           |  コード   | バイト長 |             説明             | | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- | | Bytes     | &#x60;bytes&#x60;   |   可変   | フォーマットなしバイト列     | | String    | &#x60;string&#x60;  |   可変   | フォーマットなし文字列       | | Float64   | &#x60;float64&#x60; |    8     | IEEE754 64ビット浮動小数点数 | | Int64     | &#x60;int64&#x60;   |    8     | 符号付き 64ビット整数        | | Bool      | &#x60;bool&#x60;    |    1     | 真偽値                       |  ## メディアデータ型 メディア（動画/音声）関連のデータを格納するデータ型です。  |          名称           |    コード    | バイト長 |            説明            | | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- | | JPEG | &#x60;video/jpeg&#x60; |   可変   | JPEG 形式の画像データ      | | H264 | &#x60;video/h264&#x60; |   可変   | H264 形式の映像データ      |  ### 拡張バイナリ型 フォーマット付きのバイナリデータを格納するデータ型です。  |                       名称                        |      コード       | バイト長 |                   説明                    | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | BSON                                 | &#x60;bson&#x60;            |   可変   | BSON フォーマット                         | | CAN Frame                            | &#x60;can_frame&#x60;       |   可変   | CAN フレーム フォーマット                 | | CAN Data Field                       | &#x60;can_data_field&#x60;  |   可変   | CAN データフィールド フォーマット         | | MAVLink1 Packet                      | &#x60;mavlink1_packet&#x60; |   可変   | MAVLink パケット フォーマット             | | Generic (非推奨)                     | &#x60;generic&#x60;         |   可変   | iSCPv1互換 汎用フォーマット               | | Controlpad (非推奨)                  | &#x60;control_pad&#x60;     |   可変   | iSCPv1互換 コントロールパッドフォーマット | | GeneralSensor (非推奨)               | &#x60;general_sensor&#x60;  |   可変   | iSCPv1互換 汎用センサーフォーマット       |  ### 拡張文字列型 フォーマット付きの文字列データを格納するデータ型です。  |           名称           |    コード     | バイト長 |       説明        | | :- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- - | | JSON | &#x60;string/json&#x60;     |   可変   | JSON フォーマット | | CSV   | &#x60;string/csv&#x60;     |   可変   | CSV フォーマット  | | NMEA | &#x60;string/nmea&#x60;     |   可変   | NMEA フォーマット |
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProjectStreamWithHttpInfo(string projectUuid);
        /// <summary>
        /// Get Realtime Streaming Data
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/stream&#x60; を使用してください）  WebSocketを使ってリアルタイムデータを取得します。    同じくWebSocketを使ってリアルタイムデータを扱う &#x60;/v1/ws/measurements&#x60; では、  iSCP (intdash Stream Control Protocol)を使用しますが、  本エンドポイントではJSONとしてデータポイントを取得することができます。   ## クエリパラメータ    | パラメータ名     | 型                         | 必須       | デフォルト | 説明  |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- - | - -- -- |   | flush_interval   | string                     | true       | -          |  メッセージがフラッシュされる間隔を指定します。  単位は\&quot;ns\&quot;、\&quot;us\&quot; (または\&quot;µs\&quot;)、\&quot;ms\&quot;、\&quot;s\&quot;、\&quot;m\&quot;、\&quot;h\&quot;のいずれかを使用してください  （参考: [Goのtimeパッケージ](https://golang.org/pkg/time/#ParseDuration)）。  指定がない場合は、メッセージごとにフラッシュされます。 |    ## メッセージのフォーマット   ###  JSON Lines   リクエストメッセージおよびレスポンスメッセージには [JSON lines](http://jsonlines.org/) 形式を使用します。   1つのメッセージが1行です。    例:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   .   .    &#x60;&#x60;&#x60;   注意: メッセージに改行を含むことはできません。   改行が入ったメッセージの例（悪い例）:   &#x60;&#x60;&#x60;   {    \&quot;type\&quot; : \&quot;message_type\&quot;,    \&quot;contents\&quot; : { depends on message_type }  }   &#x60;&#x60;&#x60;    メッセージには、 &#x60;type&#x60; 属性および &#x60;contents&#x60; 属性が必要です。  &#x60;contents&#x60; のスキーマは、 &#x60;type&#x60; により決定されます。   ## ダウンストリーム開始リクエスト   ### ダウンストリーム開始リクエストメッセージのスキーマ   | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 |   | type             | string                   | true       | &#x60;\&quot;open_downstream\&quot;&#x60; | 固定値  |   | contents         | object（次の表を参照）   | true       | -                 |         |    ### ダウンストリーム開始リクエスト内 &#x60;contents&#x60; のスキーマ   | 属性名           | 型                       | 必須       | デフォルト         | 説明   |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- - | - -- -- - |   | edge             | string                   | true       | -                  | データの送信元エッジを、エッジのUUIDまたはエッジの名前で指定します。  最初に、一致するエッジUUIDが検索され、一致するエッジUUIDがなければ一致する名前が検索されます。 |   | filter           | string array             | false      | &#x60;[]&#x60;               | 「フィルター」を参照してください。 |    ### フィルター   データコードとデータ名を指定することにより、指定にマッチしたデータポイントだけを受信することができます。   ただし、メタデータのデータポイントは、フィルターの設定に関係なくすべて受信されます。    フィルターは以下のフォーマットで設定します: &#x60;&lt;型コード&gt;:&lt;データ名&gt;&#x60;   データコードについては、後述の 時系列データのペイロードフォーマット を参照してください。   フィルター設定文字列の各セグメントにはワイルドカード( &#x60;**&#x60; )を使用することができます。    例:   - 型コードが &#x60;can_data_field&#x60; のデータポイント（CAN）を受信する -&gt; &#x60;can_data_field:**&#x60;   - 型コードが &#x60;string/&#x60; で始まるデータポイントを受信する（&#x60;string/json&#x60; 、 &#x60;string/csv&#x60; など） -&gt; &#x60;string/_**:**&#x60;   - 文字列のデータポイントのうち、データ名が &#x60;my-string&#x60; のものを受信する -&gt; &#x60;string:my-string&#x60;    &#x60;filter&#x60; として空の配列が指定された場合は、すべてのデータポイントを受信します。    ### ダウンストリーム開始リクエストの例   リクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;open_downstream\&quot;, \&quot;contents\&quot; : { \&quot;edge\&quot; : \&quot;edge_name_or_uuid\&quot;, \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } }   &#x60;&#x60;&#x60;   レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:    &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;    ## ダウンストリーム更新リクエスト   ### ダウンストリーム更新リクエストメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 |   | type             | string                   | true       | &#x60;\&quot;update_downstream\&quot;&#x60;  | 固定値  |   | contents         | object（次の表を参照）   | true       | -                 |         |    ### ダウンストリーム更新リクエスト内 &#x60;contents&#x60; のスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | filter           | string array             | true       | -                 |「フィルター」を参照してください。 |    ### ダウンストリーム更新リクエストの例   フィルターを指定する場合のリクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } }   &#x60;&#x60;&#x60;    フィルターを指定せずすべてのデータポイントを受信する場合のリクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [] } }   &#x60;&#x60;&#x60;    レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:    &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed:  update downstream\&quot; } }   &#x60;&#x60;&#x60;    ## ダウンストリーム終了リクエスト   ### ダウンストリーム終了リクエストメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。  |   | type             | string                   | true       | &#x60;\&quot;close_downstream\&quot;&#x60; | 固定値|    ### ダウンストリーム終了リクエストの例   リクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;close_downstream\&quot;}   &#x60;&#x60;&#x60;   レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: close downstream\&quot; } }   &#x60;&#x60;&#x60;    ## レスポンスメッセージ   リクエストの処理結果が返却されます。   ### レスポンスメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- |   | type             | string                   | true       | &#x60;\&quot;response\&quot;&#x60;      | 固定値|   | ack              | number                   | false      | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |   | contents         | object（次の表を参照）   | true       | -                 |       |    ### レスポンス内 &#x60;contents&#x60; のスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- |   | code             | number                   | true       | -                 | 10000 &lt; code &lt; 20000 の場合、成功。  20000 &lt; code &lt; 30000 の場合、不正なリクエスト。50000 &lt; code の場合、予期しないエラー |   | message          | string                   | true       | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |    ### レスポンスの例   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;    リクエストで &#x60;id&#x60; が指定されている場合のレスポンス例（ &#x60;id&#x60; の値が &#x60;ack&#x60; として返ります）:    &#x60;&#x60;&#x60;   { \&quot;ack\&quot;: 1, \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;   # 時系列データのペイロードフォーマット   時系列データポイントが格納するペイロードのフォーマットです。各データ型に対する &#x60;contents&#x60;のフォーマットは [このページ](https://git.aptpod.co.jp/intdash-protocol/dataformat/-/tree/master/data) を参照してください。   ## データ型   各データバイナリには、ペイロードのフォーマットを示すデータ型が付与されます。各データ型には、型を識別するためのコード名が割り当てられます。   ## 標準データ型   単一のデータを格納するデータ型です。    |          名称           |  コード   | バイト長 |             説明             |   | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- |   | Bytes     | &#x60;bytes&#x60;   |   可変   | フォーマットなしバイト列     |   | String    | &#x60;string&#x60;  |   可変   | フォーマットなし文字列       |   | Float64   | &#x60;float64&#x60; |    8     | IEEE754 64ビット浮動小数点数 |   | Int64     | &#x60;int64&#x60;   |    8     | 符号付き 64ビット整数        |   | Bool      | &#x60;bool&#x60;    |    1     | 真偽値                       |    ## メディアデータ型   メディア（動画/音声）関連のデータを格納するデータ型です。    |          名称           |    コード    | バイト長 |            説明            |   | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- |   | JPEG | &#x60;video/jpeg&#x60; |   可変   | JPEG 形式の画像データ      |   | H264 | &#x60;video/h264&#x60; |   可変   | H264 形式の映像データ      |    ### 拡張バイナリ型   フォーマット付きのバイナリデータを格納するデータ型です。    |                       名称                        |      コード       | バイト長 |                   説明                    |   | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |   | BSON                                 | &#x60;bson&#x60;            |   可変   | BSON フォーマット                         |   | CAN Frame                            | &#x60;can_frame&#x60;       |   可変   | CAN フレーム フォーマット                 |   | CAN Data Field                       | &#x60;can_data_field&#x60;  |   可変   | CAN データフィールド フォーマット         |   | MAVLink1 Packet                      | &#x60;mavlink1_packet&#x60; |   可変   | MAVLink パケット フォーマット             |   | Generic (非推奨)                     | &#x60;generic&#x60;         |   可変   | iSCPv1互換 汎用フォーマット               |   | Controlpad (非推奨)                  | &#x60;control_pad&#x60;     |   可変   | iSCPv1互換 コントロールパッドフォーマット |   | GeneralSensor (非推奨)               | &#x60;general_sensor&#x60;  |   可変   | iSCPv1互換 汎用センサーフォーマット       |    ### 拡張文字列型   フォーマット付きの文字列データを格納するデータ型です。    |           名称           |    コード     | バイト長 |       説明        |   | :- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- - |   | JSON | &#x60;string/json&#x60;     |   可変   | JSON フォーマット |   | CSV   | &#x60;string/csv&#x60;     |   可変   | CSV フォーマット  |   | NMEA | &#x60;string/nmea&#x60;     |   可変   | NMEA フォーマット |
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        [Obsolete]
        void Stream();

        /// <summary>
        /// Get Realtime Streaming Data
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/stream&#x60; を使用してください）  WebSocketを使ってリアルタイムデータを取得します。    同じくWebSocketを使ってリアルタイムデータを扱う &#x60;/v1/ws/measurements&#x60; では、  iSCP (intdash Stream Control Protocol)を使用しますが、  本エンドポイントではJSONとしてデータポイントを取得することができます。   ## クエリパラメータ    | パラメータ名     | 型                         | 必須       | デフォルト | 説明  |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- - | - -- -- |   | flush_interval   | string                     | true       | -          |  メッセージがフラッシュされる間隔を指定します。  単位は\&quot;ns\&quot;、\&quot;us\&quot; (または\&quot;µs\&quot;)、\&quot;ms\&quot;、\&quot;s\&quot;、\&quot;m\&quot;、\&quot;h\&quot;のいずれかを使用してください  （参考: [Goのtimeパッケージ](https://golang.org/pkg/time/#ParseDuration)）。  指定がない場合は、メッセージごとにフラッシュされます。 |    ## メッセージのフォーマット   ###  JSON Lines   リクエストメッセージおよびレスポンスメッセージには [JSON lines](http://jsonlines.org/) 形式を使用します。   1つのメッセージが1行です。    例:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   .   .    &#x60;&#x60;&#x60;   注意: メッセージに改行を含むことはできません。   改行が入ったメッセージの例（悪い例）:   &#x60;&#x60;&#x60;   {    \&quot;type\&quot; : \&quot;message_type\&quot;,    \&quot;contents\&quot; : { depends on message_type }  }   &#x60;&#x60;&#x60;    メッセージには、 &#x60;type&#x60; 属性および &#x60;contents&#x60; 属性が必要です。  &#x60;contents&#x60; のスキーマは、 &#x60;type&#x60; により決定されます。   ## ダウンストリーム開始リクエスト   ### ダウンストリーム開始リクエストメッセージのスキーマ   | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 |   | type             | string                   | true       | &#x60;\&quot;open_downstream\&quot;&#x60; | 固定値  |   | contents         | object（次の表を参照）   | true       | -                 |         |    ### ダウンストリーム開始リクエスト内 &#x60;contents&#x60; のスキーマ   | 属性名           | 型                       | 必須       | デフォルト         | 説明   |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- - | - -- -- - |   | edge             | string                   | true       | -                  | データの送信元エッジを、エッジのUUIDまたはエッジの名前で指定します。  最初に、一致するエッジUUIDが検索され、一致するエッジUUIDがなければ一致する名前が検索されます。 |   | filter           | string array             | false      | &#x60;[]&#x60;               | 「フィルター」を参照してください。 |    ### フィルター   データコードとデータ名を指定することにより、指定にマッチしたデータポイントだけを受信することができます。   ただし、メタデータのデータポイントは、フィルターの設定に関係なくすべて受信されます。    フィルターは以下のフォーマットで設定します: &#x60;&lt;型コード&gt;:&lt;データ名&gt;&#x60;   データコードについては、後述の 時系列データのペイロードフォーマット を参照してください。   フィルター設定文字列の各セグメントにはワイルドカード( &#x60;**&#x60; )を使用することができます。    例:   - 型コードが &#x60;can_data_field&#x60; のデータポイント（CAN）を受信する -&gt; &#x60;can_data_field:**&#x60;   - 型コードが &#x60;string/&#x60; で始まるデータポイントを受信する（&#x60;string/json&#x60; 、 &#x60;string/csv&#x60; など） -&gt; &#x60;string/_**:**&#x60;   - 文字列のデータポイントのうち、データ名が &#x60;my-string&#x60; のものを受信する -&gt; &#x60;string:my-string&#x60;    &#x60;filter&#x60; として空の配列が指定された場合は、すべてのデータポイントを受信します。    ### ダウンストリーム開始リクエストの例   リクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;open_downstream\&quot;, \&quot;contents\&quot; : { \&quot;edge\&quot; : \&quot;edge_name_or_uuid\&quot;, \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } }   &#x60;&#x60;&#x60;   レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:    &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;    ## ダウンストリーム更新リクエスト   ### ダウンストリーム更新リクエストメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 |   | type             | string                   | true       | &#x60;\&quot;update_downstream\&quot;&#x60;  | 固定値  |   | contents         | object（次の表を参照）   | true       | -                 |         |    ### ダウンストリーム更新リクエスト内 &#x60;contents&#x60; のスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | filter           | string array             | true       | -                 |「フィルター」を参照してください。 |    ### ダウンストリーム更新リクエストの例   フィルターを指定する場合のリクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } }   &#x60;&#x60;&#x60;    フィルターを指定せずすべてのデータポイントを受信する場合のリクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [] } }   &#x60;&#x60;&#x60;    レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:    &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed:  update downstream\&quot; } }   &#x60;&#x60;&#x60;    ## ダウンストリーム終了リクエスト   ### ダウンストリーム終了リクエストメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。  |   | type             | string                   | true       | &#x60;\&quot;close_downstream\&quot;&#x60; | 固定値|    ### ダウンストリーム終了リクエストの例   リクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;close_downstream\&quot;}   &#x60;&#x60;&#x60;   レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: close downstream\&quot; } }   &#x60;&#x60;&#x60;    ## レスポンスメッセージ   リクエストの処理結果が返却されます。   ### レスポンスメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- |   | type             | string                   | true       | &#x60;\&quot;response\&quot;&#x60;      | 固定値|   | ack              | number                   | false      | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |   | contents         | object（次の表を参照）   | true       | -                 |       |    ### レスポンス内 &#x60;contents&#x60; のスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- |   | code             | number                   | true       | -                 | 10000 &lt; code &lt; 20000 の場合、成功。  20000 &lt; code &lt; 30000 の場合、不正なリクエスト。50000 &lt; code の場合、予期しないエラー |   | message          | string                   | true       | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |    ### レスポンスの例   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;    リクエストで &#x60;id&#x60; が指定されている場合のレスポンス例（ &#x60;id&#x60; の値が &#x60;ack&#x60; として返ります）:    &#x60;&#x60;&#x60;   { \&quot;ack\&quot;: 1, \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;   # 時系列データのペイロードフォーマット   時系列データポイントが格納するペイロードのフォーマットです。各データ型に対する &#x60;contents&#x60;のフォーマットは [このページ](https://git.aptpod.co.jp/intdash-protocol/dataformat/-/tree/master/data) を参照してください。   ## データ型   各データバイナリには、ペイロードのフォーマットを示すデータ型が付与されます。各データ型には、型を識別するためのコード名が割り当てられます。   ## 標準データ型   単一のデータを格納するデータ型です。    |          名称           |  コード   | バイト長 |             説明             |   | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- |   | Bytes     | &#x60;bytes&#x60;   |   可変   | フォーマットなしバイト列     |   | String    | &#x60;string&#x60;  |   可変   | フォーマットなし文字列       |   | Float64   | &#x60;float64&#x60; |    8     | IEEE754 64ビット浮動小数点数 |   | Int64     | &#x60;int64&#x60;   |    8     | 符号付き 64ビット整数        |   | Bool      | &#x60;bool&#x60;    |    1     | 真偽値                       |    ## メディアデータ型   メディア（動画/音声）関連のデータを格納するデータ型です。    |          名称           |    コード    | バイト長 |            説明            |   | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- |   | JPEG | &#x60;video/jpeg&#x60; |   可変   | JPEG 形式の画像データ      |   | H264 | &#x60;video/h264&#x60; |   可変   | H264 形式の映像データ      |    ### 拡張バイナリ型   フォーマット付きのバイナリデータを格納するデータ型です。    |                       名称                        |      コード       | バイト長 |                   説明                    |   | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |   | BSON                                 | &#x60;bson&#x60;            |   可変   | BSON フォーマット                         |   | CAN Frame                            | &#x60;can_frame&#x60;       |   可変   | CAN フレーム フォーマット                 |   | CAN Data Field                       | &#x60;can_data_field&#x60;  |   可変   | CAN データフィールド フォーマット         |   | MAVLink1 Packet                      | &#x60;mavlink1_packet&#x60; |   可変   | MAVLink パケット フォーマット             |   | Generic (非推奨)                     | &#x60;generic&#x60;         |   可変   | iSCPv1互換 汎用フォーマット               |   | Controlpad (非推奨)                  | &#x60;control_pad&#x60;     |   可変   | iSCPv1互換 コントロールパッドフォーマット |   | GeneralSensor (非推奨)               | &#x60;general_sensor&#x60;  |   可変   | iSCPv1互換 汎用センサーフォーマット       |    ### 拡張文字列型   フォーマット付きの文字列データを格納するデータ型です。    |           名称           |    コード     | バイト長 |       説明        |   | :- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- - |   | JSON | &#x60;string/json&#x60;     |   可変   | JSON フォーマット |   | CSV   | &#x60;string/csv&#x60;     |   可変   | CSV フォーマット  |   | NMEA | &#x60;string/nmea&#x60;     |   可変   | NMEA フォーマット |
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> StreamWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBrokerStreamApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Project Realtime Streaming Data
        /// </summary>
        /// <remarks>
        /// WebSocketを使ってリアルタイムデータを取得します。  同じくWebSocketを使ってリアルタイムデータを扱う &#x60;/v1/ws/measurements&#x60; では、 iSCP (intdash Stream Control Protocol)を使用しますが、 本エンドポイントではJSONとしてデータポイントを取得することができます。 ## クエリパラメータ  | パラメータ名     | 型                         | 必須       | デフォルト | 説明  | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- - | - -- -- | | flush_interval   | string                     | true       | -          | メッセージがフラッシュされる間隔を指定します。 単位は\&quot;ns\&quot;、\&quot;us\&quot; (または\&quot;µs\&quot;)、\&quot;ms\&quot;、\&quot;s\&quot;、\&quot;m\&quot;、\&quot;h\&quot;のいずれかを使用してください （参考: [Goのtimeパッケージ](https://golang.org/pkg/time/#ParseDuration)）。 指定がない場合は、メッセージごとにフラッシュされます。 |  ## メッセージのフォーマット ###  JSON Lines リクエストメッセージおよびレスポンスメッセージには [JSON lines](http://jsonlines.org/) 形式を使用します。 1つのメッセージが1行です。  例: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} . .  &#x60;&#x60;&#x60; 注意: メッセージに改行を含むことはできません。 改行が入ったメッセージの例（悪い例）: &#x60;&#x60;&#x60; {   \&quot;type\&quot; : \&quot;message_type\&quot;,   \&quot;contents\&quot; : { depends on message_type } } &#x60;&#x60;&#x60;  メッセージには、 &#x60;type&#x60; 属性および &#x60;contents&#x60; 属性が必要です。 &#x60;contents&#x60; のスキーマは、 &#x60;type&#x60; により決定されます。 ## ダウンストリーム開始リクエスト ### ダウンストリーム開始リクエストメッセージのスキーマ | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 | | type             | string                   | true       | &#x60;\&quot;open_downstream\&quot;&#x60; | 固定値  | | contents         | object（次の表を参照）   | true       | -                 |         |  ### ダウンストリーム開始リクエスト内 &#x60;contents&#x60; のスキーマ | 属性名           | 型                       | 必須       | デフォルト         | 説明   | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- - | - -- -- - | | edge             | string                   | true       | -                  | データの送信元エッジを、エッジのUUIDまたはエッジの名前で指定します。 最初に、一致するエッジUUIDが検索され、一致するエッジUUIDがなければ一致する名前が検索されます。 | | filter           | string array             | false      | &#x60;[]&#x60;               | 「フィルター」を参照してください。 |  ### フィルター データコードとデータ名を指定することにより、指定にマッチしたデータポイントだけを受信することができます。 ただし、メタデータのデータポイントは、フィルターの設定に関係なくすべて受信されます。  フィルターは以下のフォーマットで設定します: &#x60;&lt;型コード&gt;:&lt;データ名&gt;&#x60; データコードについては、後述の 時系列データのペイロードフォーマット を参照してください。 フィルター設定文字列の各セグメントにはワイルドカード( &#x60;**&#x60; )を使用することができます。  例: - 型コードが &#x60;can_data_field&#x60; のデータポイント（CAN）を受信する -&gt; &#x60;can_data_field:**&#x60; - 型コードが &#x60;string/&#x60; で始まるデータポイントを受信する（&#x60;string/json&#x60; 、 &#x60;string/csv&#x60; など） -&gt; &#x60;string/_**:**&#x60; - 文字列のデータポイントのうち、データ名が &#x60;my-string&#x60; のものを受信する -&gt; &#x60;string:my-string&#x60;  &#x60;filter&#x60; として空の配列が指定された場合は、すべてのデータポイントを受信します。  ### ダウンストリーム開始リクエストの例 リクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;open_downstream\&quot;, \&quot;contents\&quot; : { \&quot;edge\&quot; : \&quot;edge_name_or_uuid\&quot;, \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } } &#x60;&#x60;&#x60; レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:  &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60;  ## ダウンストリーム更新リクエスト ### ダウンストリーム更新リクエストメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 | | type             | string                   | true       | &#x60;\&quot;update_downstream\&quot;&#x60;  | 固定値  | | contents         | object（次の表を参照）   | true       | -                 |         |  ### ダウンストリーム更新リクエスト内 &#x60;contents&#x60; のスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | filter           | string array             | true       | -                 |「フィルター」を参照してください。 |  ### ダウンストリーム更新リクエストの例 フィルターを指定する場合のリクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } } &#x60;&#x60;&#x60;  フィルターを指定せずすべてのデータポイントを受信する場合のリクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [] } } &#x60;&#x60;&#x60;  レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:  &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: update downstream\&quot; } } &#x60;&#x60;&#x60;  ## ダウンストリーム終了リクエスト ### ダウンストリーム終了リクエストメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。  | | type             | string                   | true       | &#x60;\&quot;close_downstream\&quot;&#x60; | 固定値|  ### ダウンストリーム終了リクエストの例 リクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;close_downstream\&quot;} &#x60;&#x60;&#x60; レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: close downstream\&quot; } } &#x60;&#x60;&#x60;  ## レスポンスメッセージ リクエストの処理結果が返却されます。 ### レスポンスメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- | | type             | string                   | true       | &#x60;\&quot;response\&quot;&#x60;      | 固定値| | ack              | number                   | false      | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 | | contents         | object（次の表を参照）   | true       | -                 |       |  ### レスポンス内 &#x60;contents&#x60; のスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- | | code             | number                   | true       | -                 | 10000 &lt; code &lt; 20000 の場合、成功。 20000 &lt; code &lt; 30000 の場合、不正なリクエスト。50000 &lt; code の場合、予期しないエラー | | message          | string                   | true       | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |  ### レスポンスの例 &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60;  リクエストで &#x60;id&#x60; が指定されている場合のレスポンス例（ &#x60;id&#x60; の値が &#x60;ack&#x60; として返ります）:  &#x60;&#x60;&#x60; { \&quot;ack\&quot;: 1, \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60; # 時系列データのペイロードフォーマット 時系列データポイントが格納するペイロードのフォーマットです。各データ型に対する &#x60;contents&#x60;のフォーマットは [このページ](https://git.aptpod.co.jp/intdash-protocol/dataformat/-/tree/master/data) を参照してください。 ## データ型 各データバイナリには、ペイロードのフォーマットを示すデータ型が付与されます。各データ型には、型を識別するためのコード名が割り当てられます。 ## 標準データ型 単一のデータを格納するデータ型です。  |          名称           |  コード   | バイト長 |             説明             | | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- | | Bytes     | &#x60;bytes&#x60;   |   可変   | フォーマットなしバイト列     | | String    | &#x60;string&#x60;  |   可変   | フォーマットなし文字列       | | Float64   | &#x60;float64&#x60; |    8     | IEEE754 64ビット浮動小数点数 | | Int64     | &#x60;int64&#x60;   |    8     | 符号付き 64ビット整数        | | Bool      | &#x60;bool&#x60;    |    1     | 真偽値                       |  ## メディアデータ型 メディア（動画/音声）関連のデータを格納するデータ型です。  |          名称           |    コード    | バイト長 |            説明            | | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- | | JPEG | &#x60;video/jpeg&#x60; |   可変   | JPEG 形式の画像データ      | | H264 | &#x60;video/h264&#x60; |   可変   | H264 形式の映像データ      |  ### 拡張バイナリ型 フォーマット付きのバイナリデータを格納するデータ型です。  |                       名称                        |      コード       | バイト長 |                   説明                    | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | BSON                                 | &#x60;bson&#x60;            |   可変   | BSON フォーマット                         | | CAN Frame                            | &#x60;can_frame&#x60;       |   可変   | CAN フレーム フォーマット                 | | CAN Data Field                       | &#x60;can_data_field&#x60;  |   可変   | CAN データフィールド フォーマット         | | MAVLink1 Packet                      | &#x60;mavlink1_packet&#x60; |   可変   | MAVLink パケット フォーマット             | | Generic (非推奨)                     | &#x60;generic&#x60;         |   可変   | iSCPv1互換 汎用フォーマット               | | Controlpad (非推奨)                  | &#x60;control_pad&#x60;     |   可変   | iSCPv1互換 コントロールパッドフォーマット | | GeneralSensor (非推奨)               | &#x60;general_sensor&#x60;  |   可変   | iSCPv1互換 汎用センサーフォーマット       |  ### 拡張文字列型 フォーマット付きの文字列データを格納するデータ型です。  |           名称           |    コード     | バイト長 |       説明        | | :- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- - | | JSON | &#x60;string/json&#x60;     |   可変   | JSON フォーマット | | CSV   | &#x60;string/csv&#x60;     |   可変   | CSV フォーマット  | | NMEA | &#x60;string/nmea&#x60;     |   可変   | NMEA フォーマット |
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProjectStreamAsync(string projectUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Project Realtime Streaming Data
        /// </summary>
        /// <remarks>
        /// WebSocketを使ってリアルタイムデータを取得します。  同じくWebSocketを使ってリアルタイムデータを扱う &#x60;/v1/ws/measurements&#x60; では、 iSCP (intdash Stream Control Protocol)を使用しますが、 本エンドポイントではJSONとしてデータポイントを取得することができます。 ## クエリパラメータ  | パラメータ名     | 型                         | 必須       | デフォルト | 説明  | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- - | - -- -- | | flush_interval   | string                     | true       | -          | メッセージがフラッシュされる間隔を指定します。 単位は\&quot;ns\&quot;、\&quot;us\&quot; (または\&quot;µs\&quot;)、\&quot;ms\&quot;、\&quot;s\&quot;、\&quot;m\&quot;、\&quot;h\&quot;のいずれかを使用してください （参考: [Goのtimeパッケージ](https://golang.org/pkg/time/#ParseDuration)）。 指定がない場合は、メッセージごとにフラッシュされます。 |  ## メッセージのフォーマット ###  JSON Lines リクエストメッセージおよびレスポンスメッセージには [JSON lines](http://jsonlines.org/) 形式を使用します。 1つのメッセージが1行です。  例: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} . .  &#x60;&#x60;&#x60; 注意: メッセージに改行を含むことはできません。 改行が入ったメッセージの例（悪い例）: &#x60;&#x60;&#x60; {   \&quot;type\&quot; : \&quot;message_type\&quot;,   \&quot;contents\&quot; : { depends on message_type } } &#x60;&#x60;&#x60;  メッセージには、 &#x60;type&#x60; 属性および &#x60;contents&#x60; 属性が必要です。 &#x60;contents&#x60; のスキーマは、 &#x60;type&#x60; により決定されます。 ## ダウンストリーム開始リクエスト ### ダウンストリーム開始リクエストメッセージのスキーマ | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 | | type             | string                   | true       | &#x60;\&quot;open_downstream\&quot;&#x60; | 固定値  | | contents         | object（次の表を参照）   | true       | -                 |         |  ### ダウンストリーム開始リクエスト内 &#x60;contents&#x60; のスキーマ | 属性名           | 型                       | 必須       | デフォルト         | 説明   | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- - | - -- -- - | | edge             | string                   | true       | -                  | データの送信元エッジを、エッジのUUIDまたはエッジの名前で指定します。 最初に、一致するエッジUUIDが検索され、一致するエッジUUIDがなければ一致する名前が検索されます。 | | filter           | string array             | false      | &#x60;[]&#x60;               | 「フィルター」を参照してください。 |  ### フィルター データコードとデータ名を指定することにより、指定にマッチしたデータポイントだけを受信することができます。 ただし、メタデータのデータポイントは、フィルターの設定に関係なくすべて受信されます。  フィルターは以下のフォーマットで設定します: &#x60;&lt;型コード&gt;:&lt;データ名&gt;&#x60; データコードについては、後述の 時系列データのペイロードフォーマット を参照してください。 フィルター設定文字列の各セグメントにはワイルドカード( &#x60;**&#x60; )を使用することができます。  例: - 型コードが &#x60;can_data_field&#x60; のデータポイント（CAN）を受信する -&gt; &#x60;can_data_field:**&#x60; - 型コードが &#x60;string/&#x60; で始まるデータポイントを受信する（&#x60;string/json&#x60; 、 &#x60;string/csv&#x60; など） -&gt; &#x60;string/_**:**&#x60; - 文字列のデータポイントのうち、データ名が &#x60;my-string&#x60; のものを受信する -&gt; &#x60;string:my-string&#x60;  &#x60;filter&#x60; として空の配列が指定された場合は、すべてのデータポイントを受信します。  ### ダウンストリーム開始リクエストの例 リクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;open_downstream\&quot;, \&quot;contents\&quot; : { \&quot;edge\&quot; : \&quot;edge_name_or_uuid\&quot;, \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } } &#x60;&#x60;&#x60; レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:  &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60;  ## ダウンストリーム更新リクエスト ### ダウンストリーム更新リクエストメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 | | type             | string                   | true       | &#x60;\&quot;update_downstream\&quot;&#x60;  | 固定値  | | contents         | object（次の表を参照）   | true       | -                 |         |  ### ダウンストリーム更新リクエスト内 &#x60;contents&#x60; のスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | filter           | string array             | true       | -                 |「フィルター」を参照してください。 |  ### ダウンストリーム更新リクエストの例 フィルターを指定する場合のリクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } } &#x60;&#x60;&#x60;  フィルターを指定せずすべてのデータポイントを受信する場合のリクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [] } } &#x60;&#x60;&#x60;  レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:  &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: update downstream\&quot; } } &#x60;&#x60;&#x60;  ## ダウンストリーム終了リクエスト ### ダウンストリーム終了リクエストメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。  | | type             | string                   | true       | &#x60;\&quot;close_downstream\&quot;&#x60; | 固定値|  ### ダウンストリーム終了リクエストの例 リクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;close_downstream\&quot;} &#x60;&#x60;&#x60; レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: close downstream\&quot; } } &#x60;&#x60;&#x60;  ## レスポンスメッセージ リクエストの処理結果が返却されます。 ### レスポンスメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- | | type             | string                   | true       | &#x60;\&quot;response\&quot;&#x60;      | 固定値| | ack              | number                   | false      | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 | | contents         | object（次の表を参照）   | true       | -                 |       |  ### レスポンス内 &#x60;contents&#x60; のスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- | | code             | number                   | true       | -                 | 10000 &lt; code &lt; 20000 の場合、成功。 20000 &lt; code &lt; 30000 の場合、不正なリクエスト。50000 &lt; code の場合、予期しないエラー | | message          | string                   | true       | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |  ### レスポンスの例 &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60;  リクエストで &#x60;id&#x60; が指定されている場合のレスポンス例（ &#x60;id&#x60; の値が &#x60;ack&#x60; として返ります）:  &#x60;&#x60;&#x60; { \&quot;ack\&quot;: 1, \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60; # 時系列データのペイロードフォーマット 時系列データポイントが格納するペイロードのフォーマットです。各データ型に対する &#x60;contents&#x60;のフォーマットは [このページ](https://git.aptpod.co.jp/intdash-protocol/dataformat/-/tree/master/data) を参照してください。 ## データ型 各データバイナリには、ペイロードのフォーマットを示すデータ型が付与されます。各データ型には、型を識別するためのコード名が割り当てられます。 ## 標準データ型 単一のデータを格納するデータ型です。  |          名称           |  コード   | バイト長 |             説明             | | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- | | Bytes     | &#x60;bytes&#x60;   |   可変   | フォーマットなしバイト列     | | String    | &#x60;string&#x60;  |   可変   | フォーマットなし文字列       | | Float64   | &#x60;float64&#x60; |    8     | IEEE754 64ビット浮動小数点数 | | Int64     | &#x60;int64&#x60;   |    8     | 符号付き 64ビット整数        | | Bool      | &#x60;bool&#x60;    |    1     | 真偽値                       |  ## メディアデータ型 メディア（動画/音声）関連のデータを格納するデータ型です。  |          名称           |    コード    | バイト長 |            説明            | | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- | | JPEG | &#x60;video/jpeg&#x60; |   可変   | JPEG 形式の画像データ      | | H264 | &#x60;video/h264&#x60; |   可変   | H264 形式の映像データ      |  ### 拡張バイナリ型 フォーマット付きのバイナリデータを格納するデータ型です。  |                       名称                        |      コード       | バイト長 |                   説明                    | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | BSON                                 | &#x60;bson&#x60;            |   可変   | BSON フォーマット                         | | CAN Frame                            | &#x60;can_frame&#x60;       |   可変   | CAN フレーム フォーマット                 | | CAN Data Field                       | &#x60;can_data_field&#x60;  |   可変   | CAN データフィールド フォーマット         | | MAVLink1 Packet                      | &#x60;mavlink1_packet&#x60; |   可変   | MAVLink パケット フォーマット             | | Generic (非推奨)                     | &#x60;generic&#x60;         |   可変   | iSCPv1互換 汎用フォーマット               | | Controlpad (非推奨)                  | &#x60;control_pad&#x60;     |   可変   | iSCPv1互換 コントロールパッドフォーマット | | GeneralSensor (非推奨)               | &#x60;general_sensor&#x60;  |   可変   | iSCPv1互換 汎用センサーフォーマット       |  ### 拡張文字列型 フォーマット付きの文字列データを格納するデータ型です。  |           名称           |    コード     | バイト長 |       説明        | | :- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- - | | JSON | &#x60;string/json&#x60;     |   可変   | JSON フォーマット | | CSV   | &#x60;string/csv&#x60;     |   可変   | CSV フォーマット  | | NMEA | &#x60;string/nmea&#x60;     |   可変   | NMEA フォーマット |
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProjectStreamWithHttpInfoAsync(string projectUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Realtime Streaming Data
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/stream&#x60; を使用してください）  WebSocketを使ってリアルタイムデータを取得します。    同じくWebSocketを使ってリアルタイムデータを扱う &#x60;/v1/ws/measurements&#x60; では、  iSCP (intdash Stream Control Protocol)を使用しますが、  本エンドポイントではJSONとしてデータポイントを取得することができます。   ## クエリパラメータ    | パラメータ名     | 型                         | 必須       | デフォルト | 説明  |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- - | - -- -- |   | flush_interval   | string                     | true       | -          |  メッセージがフラッシュされる間隔を指定します。  単位は\&quot;ns\&quot;、\&quot;us\&quot; (または\&quot;µs\&quot;)、\&quot;ms\&quot;、\&quot;s\&quot;、\&quot;m\&quot;、\&quot;h\&quot;のいずれかを使用してください  （参考: [Goのtimeパッケージ](https://golang.org/pkg/time/#ParseDuration)）。  指定がない場合は、メッセージごとにフラッシュされます。 |    ## メッセージのフォーマット   ###  JSON Lines   リクエストメッセージおよびレスポンスメッセージには [JSON lines](http://jsonlines.org/) 形式を使用します。   1つのメッセージが1行です。    例:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   .   .    &#x60;&#x60;&#x60;   注意: メッセージに改行を含むことはできません。   改行が入ったメッセージの例（悪い例）:   &#x60;&#x60;&#x60;   {    \&quot;type\&quot; : \&quot;message_type\&quot;,    \&quot;contents\&quot; : { depends on message_type }  }   &#x60;&#x60;&#x60;    メッセージには、 &#x60;type&#x60; 属性および &#x60;contents&#x60; 属性が必要です。  &#x60;contents&#x60; のスキーマは、 &#x60;type&#x60; により決定されます。   ## ダウンストリーム開始リクエスト   ### ダウンストリーム開始リクエストメッセージのスキーマ   | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 |   | type             | string                   | true       | &#x60;\&quot;open_downstream\&quot;&#x60; | 固定値  |   | contents         | object（次の表を参照）   | true       | -                 |         |    ### ダウンストリーム開始リクエスト内 &#x60;contents&#x60; のスキーマ   | 属性名           | 型                       | 必須       | デフォルト         | 説明   |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- - | - -- -- - |   | edge             | string                   | true       | -                  | データの送信元エッジを、エッジのUUIDまたはエッジの名前で指定します。  最初に、一致するエッジUUIDが検索され、一致するエッジUUIDがなければ一致する名前が検索されます。 |   | filter           | string array             | false      | &#x60;[]&#x60;               | 「フィルター」を参照してください。 |    ### フィルター   データコードとデータ名を指定することにより、指定にマッチしたデータポイントだけを受信することができます。   ただし、メタデータのデータポイントは、フィルターの設定に関係なくすべて受信されます。    フィルターは以下のフォーマットで設定します: &#x60;&lt;型コード&gt;:&lt;データ名&gt;&#x60;   データコードについては、後述の 時系列データのペイロードフォーマット を参照してください。   フィルター設定文字列の各セグメントにはワイルドカード( &#x60;**&#x60; )を使用することができます。    例:   - 型コードが &#x60;can_data_field&#x60; のデータポイント（CAN）を受信する -&gt; &#x60;can_data_field:**&#x60;   - 型コードが &#x60;string/&#x60; で始まるデータポイントを受信する（&#x60;string/json&#x60; 、 &#x60;string/csv&#x60; など） -&gt; &#x60;string/_**:**&#x60;   - 文字列のデータポイントのうち、データ名が &#x60;my-string&#x60; のものを受信する -&gt; &#x60;string:my-string&#x60;    &#x60;filter&#x60; として空の配列が指定された場合は、すべてのデータポイントを受信します。    ### ダウンストリーム開始リクエストの例   リクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;open_downstream\&quot;, \&quot;contents\&quot; : { \&quot;edge\&quot; : \&quot;edge_name_or_uuid\&quot;, \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } }   &#x60;&#x60;&#x60;   レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:    &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;    ## ダウンストリーム更新リクエスト   ### ダウンストリーム更新リクエストメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 |   | type             | string                   | true       | &#x60;\&quot;update_downstream\&quot;&#x60;  | 固定値  |   | contents         | object（次の表を参照）   | true       | -                 |         |    ### ダウンストリーム更新リクエスト内 &#x60;contents&#x60; のスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | filter           | string array             | true       | -                 |「フィルター」を参照してください。 |    ### ダウンストリーム更新リクエストの例   フィルターを指定する場合のリクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } }   &#x60;&#x60;&#x60;    フィルターを指定せずすべてのデータポイントを受信する場合のリクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [] } }   &#x60;&#x60;&#x60;    レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:    &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed:  update downstream\&quot; } }   &#x60;&#x60;&#x60;    ## ダウンストリーム終了リクエスト   ### ダウンストリーム終了リクエストメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。  |   | type             | string                   | true       | &#x60;\&quot;close_downstream\&quot;&#x60; | 固定値|    ### ダウンストリーム終了リクエストの例   リクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;close_downstream\&quot;}   &#x60;&#x60;&#x60;   レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: close downstream\&quot; } }   &#x60;&#x60;&#x60;    ## レスポンスメッセージ   リクエストの処理結果が返却されます。   ### レスポンスメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- |   | type             | string                   | true       | &#x60;\&quot;response\&quot;&#x60;      | 固定値|   | ack              | number                   | false      | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |   | contents         | object（次の表を参照）   | true       | -                 |       |    ### レスポンス内 &#x60;contents&#x60; のスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- |   | code             | number                   | true       | -                 | 10000 &lt; code &lt; 20000 の場合、成功。  20000 &lt; code &lt; 30000 の場合、不正なリクエスト。50000 &lt; code の場合、予期しないエラー |   | message          | string                   | true       | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |    ### レスポンスの例   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;    リクエストで &#x60;id&#x60; が指定されている場合のレスポンス例（ &#x60;id&#x60; の値が &#x60;ack&#x60; として返ります）:    &#x60;&#x60;&#x60;   { \&quot;ack\&quot;: 1, \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;   # 時系列データのペイロードフォーマット   時系列データポイントが格納するペイロードのフォーマットです。各データ型に対する &#x60;contents&#x60;のフォーマットは [このページ](https://git.aptpod.co.jp/intdash-protocol/dataformat/-/tree/master/data) を参照してください。   ## データ型   各データバイナリには、ペイロードのフォーマットを示すデータ型が付与されます。各データ型には、型を識別するためのコード名が割り当てられます。   ## 標準データ型   単一のデータを格納するデータ型です。    |          名称           |  コード   | バイト長 |             説明             |   | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- |   | Bytes     | &#x60;bytes&#x60;   |   可変   | フォーマットなしバイト列     |   | String    | &#x60;string&#x60;  |   可変   | フォーマットなし文字列       |   | Float64   | &#x60;float64&#x60; |    8     | IEEE754 64ビット浮動小数点数 |   | Int64     | &#x60;int64&#x60;   |    8     | 符号付き 64ビット整数        |   | Bool      | &#x60;bool&#x60;    |    1     | 真偽値                       |    ## メディアデータ型   メディア（動画/音声）関連のデータを格納するデータ型です。    |          名称           |    コード    | バイト長 |            説明            |   | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- |   | JPEG | &#x60;video/jpeg&#x60; |   可変   | JPEG 形式の画像データ      |   | H264 | &#x60;video/h264&#x60; |   可変   | H264 形式の映像データ      |    ### 拡張バイナリ型   フォーマット付きのバイナリデータを格納するデータ型です。    |                       名称                        |      コード       | バイト長 |                   説明                    |   | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |   | BSON                                 | &#x60;bson&#x60;            |   可変   | BSON フォーマット                         |   | CAN Frame                            | &#x60;can_frame&#x60;       |   可変   | CAN フレーム フォーマット                 |   | CAN Data Field                       | &#x60;can_data_field&#x60;  |   可変   | CAN データフィールド フォーマット         |   | MAVLink1 Packet                      | &#x60;mavlink1_packet&#x60; |   可変   | MAVLink パケット フォーマット             |   | Generic (非推奨)                     | &#x60;generic&#x60;         |   可変   | iSCPv1互換 汎用フォーマット               |   | Controlpad (非推奨)                  | &#x60;control_pad&#x60;     |   可変   | iSCPv1互換 コントロールパッドフォーマット |   | GeneralSensor (非推奨)               | &#x60;general_sensor&#x60;  |   可変   | iSCPv1互換 汎用センサーフォーマット       |    ### 拡張文字列型   フォーマット付きの文字列データを格納するデータ型です。    |           名称           |    コード     | バイト長 |       説明        |   | :- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- - |   | JSON | &#x60;string/json&#x60;     |   可変   | JSON フォーマット |   | CSV   | &#x60;string/csv&#x60;     |   可変   | CSV フォーマット  |   | NMEA | &#x60;string/nmea&#x60;     |   可変   | NMEA フォーマット |
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task StreamAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Realtime Streaming Data
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/stream&#x60; を使用してください）  WebSocketを使ってリアルタイムデータを取得します。    同じくWebSocketを使ってリアルタイムデータを扱う &#x60;/v1/ws/measurements&#x60; では、  iSCP (intdash Stream Control Protocol)を使用しますが、  本エンドポイントではJSONとしてデータポイントを取得することができます。   ## クエリパラメータ    | パラメータ名     | 型                         | 必須       | デフォルト | 説明  |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- - | - -- -- |   | flush_interval   | string                     | true       | -          |  メッセージがフラッシュされる間隔を指定します。  単位は\&quot;ns\&quot;、\&quot;us\&quot; (または\&quot;µs\&quot;)、\&quot;ms\&quot;、\&quot;s\&quot;、\&quot;m\&quot;、\&quot;h\&quot;のいずれかを使用してください  （参考: [Goのtimeパッケージ](https://golang.org/pkg/time/#ParseDuration)）。  指定がない場合は、メッセージごとにフラッシュされます。 |    ## メッセージのフォーマット   ###  JSON Lines   リクエストメッセージおよびレスポンスメッセージには [JSON lines](http://jsonlines.org/) 形式を使用します。   1つのメッセージが1行です。    例:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   .   .    &#x60;&#x60;&#x60;   注意: メッセージに改行を含むことはできません。   改行が入ったメッセージの例（悪い例）:   &#x60;&#x60;&#x60;   {    \&quot;type\&quot; : \&quot;message_type\&quot;,    \&quot;contents\&quot; : { depends on message_type }  }   &#x60;&#x60;&#x60;    メッセージには、 &#x60;type&#x60; 属性および &#x60;contents&#x60; 属性が必要です。  &#x60;contents&#x60; のスキーマは、 &#x60;type&#x60; により決定されます。   ## ダウンストリーム開始リクエスト   ### ダウンストリーム開始リクエストメッセージのスキーマ   | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 |   | type             | string                   | true       | &#x60;\&quot;open_downstream\&quot;&#x60; | 固定値  |   | contents         | object（次の表を参照）   | true       | -                 |         |    ### ダウンストリーム開始リクエスト内 &#x60;contents&#x60; のスキーマ   | 属性名           | 型                       | 必須       | デフォルト         | 説明   |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- - | - -- -- - |   | edge             | string                   | true       | -                  | データの送信元エッジを、エッジのUUIDまたはエッジの名前で指定します。  最初に、一致するエッジUUIDが検索され、一致するエッジUUIDがなければ一致する名前が検索されます。 |   | filter           | string array             | false      | &#x60;[]&#x60;               | 「フィルター」を参照してください。 |    ### フィルター   データコードとデータ名を指定することにより、指定にマッチしたデータポイントだけを受信することができます。   ただし、メタデータのデータポイントは、フィルターの設定に関係なくすべて受信されます。    フィルターは以下のフォーマットで設定します: &#x60;&lt;型コード&gt;:&lt;データ名&gt;&#x60;   データコードについては、後述の 時系列データのペイロードフォーマット を参照してください。   フィルター設定文字列の各セグメントにはワイルドカード( &#x60;**&#x60; )を使用することができます。    例:   - 型コードが &#x60;can_data_field&#x60; のデータポイント（CAN）を受信する -&gt; &#x60;can_data_field:**&#x60;   - 型コードが &#x60;string/&#x60; で始まるデータポイントを受信する（&#x60;string/json&#x60; 、 &#x60;string/csv&#x60; など） -&gt; &#x60;string/_**:**&#x60;   - 文字列のデータポイントのうち、データ名が &#x60;my-string&#x60; のものを受信する -&gt; &#x60;string:my-string&#x60;    &#x60;filter&#x60; として空の配列が指定された場合は、すべてのデータポイントを受信します。    ### ダウンストリーム開始リクエストの例   リクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;open_downstream\&quot;, \&quot;contents\&quot; : { \&quot;edge\&quot; : \&quot;edge_name_or_uuid\&quot;, \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } }   &#x60;&#x60;&#x60;   レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:    &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;    ## ダウンストリーム更新リクエスト   ### ダウンストリーム更新リクエストメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 |   | type             | string                   | true       | &#x60;\&quot;update_downstream\&quot;&#x60;  | 固定値  |   | contents         | object（次の表を参照）   | true       | -                 |         |    ### ダウンストリーム更新リクエスト内 &#x60;contents&#x60; のスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | filter           | string array             | true       | -                 |「フィルター」を参照してください。 |    ### ダウンストリーム更新リクエストの例   フィルターを指定する場合のリクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } }   &#x60;&#x60;&#x60;    フィルターを指定せずすべてのデータポイントを受信する場合のリクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [] } }   &#x60;&#x60;&#x60;    レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:    &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed:  update downstream\&quot; } }   &#x60;&#x60;&#x60;    ## ダウンストリーム終了リクエスト   ### ダウンストリーム終了リクエストメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。  |   | type             | string                   | true       | &#x60;\&quot;close_downstream\&quot;&#x60; | 固定値|    ### ダウンストリーム終了リクエストの例   リクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;close_downstream\&quot;}   &#x60;&#x60;&#x60;   レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: close downstream\&quot; } }   &#x60;&#x60;&#x60;    ## レスポンスメッセージ   リクエストの処理結果が返却されます。   ### レスポンスメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- |   | type             | string                   | true       | &#x60;\&quot;response\&quot;&#x60;      | 固定値|   | ack              | number                   | false      | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |   | contents         | object（次の表を参照）   | true       | -                 |       |    ### レスポンス内 &#x60;contents&#x60; のスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- |   | code             | number                   | true       | -                 | 10000 &lt; code &lt; 20000 の場合、成功。  20000 &lt; code &lt; 30000 の場合、不正なリクエスト。50000 &lt; code の場合、予期しないエラー |   | message          | string                   | true       | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |    ### レスポンスの例   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;    リクエストで &#x60;id&#x60; が指定されている場合のレスポンス例（ &#x60;id&#x60; の値が &#x60;ack&#x60; として返ります）:    &#x60;&#x60;&#x60;   { \&quot;ack\&quot;: 1, \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;   # 時系列データのペイロードフォーマット   時系列データポイントが格納するペイロードのフォーマットです。各データ型に対する &#x60;contents&#x60;のフォーマットは [このページ](https://git.aptpod.co.jp/intdash-protocol/dataformat/-/tree/master/data) を参照してください。   ## データ型   各データバイナリには、ペイロードのフォーマットを示すデータ型が付与されます。各データ型には、型を識別するためのコード名が割り当てられます。   ## 標準データ型   単一のデータを格納するデータ型です。    |          名称           |  コード   | バイト長 |             説明             |   | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- |   | Bytes     | &#x60;bytes&#x60;   |   可変   | フォーマットなしバイト列     |   | String    | &#x60;string&#x60;  |   可変   | フォーマットなし文字列       |   | Float64   | &#x60;float64&#x60; |    8     | IEEE754 64ビット浮動小数点数 |   | Int64     | &#x60;int64&#x60;   |    8     | 符号付き 64ビット整数        |   | Bool      | &#x60;bool&#x60;    |    1     | 真偽値                       |    ## メディアデータ型   メディア（動画/音声）関連のデータを格納するデータ型です。    |          名称           |    コード    | バイト長 |            説明            |   | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- |   | JPEG | &#x60;video/jpeg&#x60; |   可変   | JPEG 形式の画像データ      |   | H264 | &#x60;video/h264&#x60; |   可変   | H264 形式の映像データ      |    ### 拡張バイナリ型   フォーマット付きのバイナリデータを格納するデータ型です。    |                       名称                        |      コード       | バイト長 |                   説明                    |   | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |   | BSON                                 | &#x60;bson&#x60;            |   可変   | BSON フォーマット                         |   | CAN Frame                            | &#x60;can_frame&#x60;       |   可変   | CAN フレーム フォーマット                 |   | CAN Data Field                       | &#x60;can_data_field&#x60;  |   可変   | CAN データフィールド フォーマット         |   | MAVLink1 Packet                      | &#x60;mavlink1_packet&#x60; |   可変   | MAVLink パケット フォーマット             |   | Generic (非推奨)                     | &#x60;generic&#x60;         |   可変   | iSCPv1互換 汎用フォーマット               |   | Controlpad (非推奨)                  | &#x60;control_pad&#x60;     |   可変   | iSCPv1互換 コントロールパッドフォーマット |   | GeneralSensor (非推奨)               | &#x60;general_sensor&#x60;  |   可変   | iSCPv1互換 汎用センサーフォーマット       |    ### 拡張文字列型   フォーマット付きの文字列データを格納するデータ型です。    |           名称           |    コード     | バイト長 |       説明        |   | :- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- - |   | JSON | &#x60;string/json&#x60;     |   可変   | JSON フォーマット |   | CSV   | &#x60;string/csv&#x60;     |   可変   | CSV フォーマット  |   | NMEA | &#x60;string/nmea&#x60;     |   可変   | NMEA フォーマット |
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBrokerStreamApi : IBrokerStreamApiSync, IBrokerStreamApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BrokerStreamApi : IDisposable, IBrokerStreamApi
    {
        private intdash.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BrokerStreamApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public BrokerStreamApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrokerStreamApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public BrokerStreamApi(string basePath)
        {
            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                new intdash.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new intdash.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrokerStreamApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public BrokerStreamApi(intdash.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new intdash.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrokerStreamApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BrokerStreamApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrokerStreamApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BrokerStreamApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                new intdash.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new intdash.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrokerStreamApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BrokerStreamApi(HttpClient client, intdash.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new intdash.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrokerStreamApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public BrokerStreamApi(intdash.Client.ISynchronousClient client, intdash.Client.IAsynchronousClient asyncClient, intdash.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public intdash.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public intdash.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public intdash.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public intdash.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public intdash.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Project Realtime Streaming Data WebSocketを使ってリアルタイムデータを取得します。  同じくWebSocketを使ってリアルタイムデータを扱う &#x60;/v1/ws/measurements&#x60; では、 iSCP (intdash Stream Control Protocol)を使用しますが、 本エンドポイントではJSONとしてデータポイントを取得することができます。 ## クエリパラメータ  | パラメータ名     | 型                         | 必須       | デフォルト | 説明  | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- - | - -- -- | | flush_interval   | string                     | true       | -          | メッセージがフラッシュされる間隔を指定します。 単位は\&quot;ns\&quot;、\&quot;us\&quot; (または\&quot;µs\&quot;)、\&quot;ms\&quot;、\&quot;s\&quot;、\&quot;m\&quot;、\&quot;h\&quot;のいずれかを使用してください （参考: [Goのtimeパッケージ](https://golang.org/pkg/time/#ParseDuration)）。 指定がない場合は、メッセージごとにフラッシュされます。 |  ## メッセージのフォーマット ###  JSON Lines リクエストメッセージおよびレスポンスメッセージには [JSON lines](http://jsonlines.org/) 形式を使用します。 1つのメッセージが1行です。  例: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} . .  &#x60;&#x60;&#x60; 注意: メッセージに改行を含むことはできません。 改行が入ったメッセージの例（悪い例）: &#x60;&#x60;&#x60; {   \&quot;type\&quot; : \&quot;message_type\&quot;,   \&quot;contents\&quot; : { depends on message_type } } &#x60;&#x60;&#x60;  メッセージには、 &#x60;type&#x60; 属性および &#x60;contents&#x60; 属性が必要です。 &#x60;contents&#x60; のスキーマは、 &#x60;type&#x60; により決定されます。 ## ダウンストリーム開始リクエスト ### ダウンストリーム開始リクエストメッセージのスキーマ | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 | | type             | string                   | true       | &#x60;\&quot;open_downstream\&quot;&#x60; | 固定値  | | contents         | object（次の表を参照）   | true       | -                 |         |  ### ダウンストリーム開始リクエスト内 &#x60;contents&#x60; のスキーマ | 属性名           | 型                       | 必須       | デフォルト         | 説明   | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- - | - -- -- - | | edge             | string                   | true       | -                  | データの送信元エッジを、エッジのUUIDまたはエッジの名前で指定します。 最初に、一致するエッジUUIDが検索され、一致するエッジUUIDがなければ一致する名前が検索されます。 | | filter           | string array             | false      | &#x60;[]&#x60;               | 「フィルター」を参照してください。 |  ### フィルター データコードとデータ名を指定することにより、指定にマッチしたデータポイントだけを受信することができます。 ただし、メタデータのデータポイントは、フィルターの設定に関係なくすべて受信されます。  フィルターは以下のフォーマットで設定します: &#x60;&lt;型コード&gt;:&lt;データ名&gt;&#x60; データコードについては、後述の 時系列データのペイロードフォーマット を参照してください。 フィルター設定文字列の各セグメントにはワイルドカード( &#x60;**&#x60; )を使用することができます。  例: - 型コードが &#x60;can_data_field&#x60; のデータポイント（CAN）を受信する -&gt; &#x60;can_data_field:**&#x60; - 型コードが &#x60;string/&#x60; で始まるデータポイントを受信する（&#x60;string/json&#x60; 、 &#x60;string/csv&#x60; など） -&gt; &#x60;string/_**:**&#x60; - 文字列のデータポイントのうち、データ名が &#x60;my-string&#x60; のものを受信する -&gt; &#x60;string:my-string&#x60;  &#x60;filter&#x60; として空の配列が指定された場合は、すべてのデータポイントを受信します。  ### ダウンストリーム開始リクエストの例 リクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;open_downstream\&quot;, \&quot;contents\&quot; : { \&quot;edge\&quot; : \&quot;edge_name_or_uuid\&quot;, \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } } &#x60;&#x60;&#x60; レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:  &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60;  ## ダウンストリーム更新リクエスト ### ダウンストリーム更新リクエストメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 | | type             | string                   | true       | &#x60;\&quot;update_downstream\&quot;&#x60;  | 固定値  | | contents         | object（次の表を参照）   | true       | -                 |         |  ### ダウンストリーム更新リクエスト内 &#x60;contents&#x60; のスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | filter           | string array             | true       | -                 |「フィルター」を参照してください。 |  ### ダウンストリーム更新リクエストの例 フィルターを指定する場合のリクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } } &#x60;&#x60;&#x60;  フィルターを指定せずすべてのデータポイントを受信する場合のリクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [] } } &#x60;&#x60;&#x60;  レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:  &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: update downstream\&quot; } } &#x60;&#x60;&#x60;  ## ダウンストリーム終了リクエスト ### ダウンストリーム終了リクエストメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。  | | type             | string                   | true       | &#x60;\&quot;close_downstream\&quot;&#x60; | 固定値|  ### ダウンストリーム終了リクエストの例 リクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;close_downstream\&quot;} &#x60;&#x60;&#x60; レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: close downstream\&quot; } } &#x60;&#x60;&#x60;  ## レスポンスメッセージ リクエストの処理結果が返却されます。 ### レスポンスメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- | | type             | string                   | true       | &#x60;\&quot;response\&quot;&#x60;      | 固定値| | ack              | number                   | false      | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 | | contents         | object（次の表を参照）   | true       | -                 |       |  ### レスポンス内 &#x60;contents&#x60; のスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- | | code             | number                   | true       | -                 | 10000 &lt; code &lt; 20000 の場合、成功。 20000 &lt; code &lt; 30000 の場合、不正なリクエスト。50000 &lt; code の場合、予期しないエラー | | message          | string                   | true       | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |  ### レスポンスの例 &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60;  リクエストで &#x60;id&#x60; が指定されている場合のレスポンス例（ &#x60;id&#x60; の値が &#x60;ack&#x60; として返ります）:  &#x60;&#x60;&#x60; { \&quot;ack\&quot;: 1, \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60; # 時系列データのペイロードフォーマット 時系列データポイントが格納するペイロードのフォーマットです。各データ型に対する &#x60;contents&#x60;のフォーマットは [このページ](https://git.aptpod.co.jp/intdash-protocol/dataformat/-/tree/master/data) を参照してください。 ## データ型 各データバイナリには、ペイロードのフォーマットを示すデータ型が付与されます。各データ型には、型を識別するためのコード名が割り当てられます。 ## 標準データ型 単一のデータを格納するデータ型です。  |          名称           |  コード   | バイト長 |             説明             | | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- | | Bytes     | &#x60;bytes&#x60;   |   可変   | フォーマットなしバイト列     | | String    | &#x60;string&#x60;  |   可変   | フォーマットなし文字列       | | Float64   | &#x60;float64&#x60; |    8     | IEEE754 64ビット浮動小数点数 | | Int64     | &#x60;int64&#x60;   |    8     | 符号付き 64ビット整数        | | Bool      | &#x60;bool&#x60;    |    1     | 真偽値                       |  ## メディアデータ型 メディア（動画/音声）関連のデータを格納するデータ型です。  |          名称           |    コード    | バイト長 |            説明            | | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- | | JPEG | &#x60;video/jpeg&#x60; |   可変   | JPEG 形式の画像データ      | | H264 | &#x60;video/h264&#x60; |   可変   | H264 形式の映像データ      |  ### 拡張バイナリ型 フォーマット付きのバイナリデータを格納するデータ型です。  |                       名称                        |      コード       | バイト長 |                   説明                    | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | BSON                                 | &#x60;bson&#x60;            |   可変   | BSON フォーマット                         | | CAN Frame                            | &#x60;can_frame&#x60;       |   可変   | CAN フレーム フォーマット                 | | CAN Data Field                       | &#x60;can_data_field&#x60;  |   可変   | CAN データフィールド フォーマット         | | MAVLink1 Packet                      | &#x60;mavlink1_packet&#x60; |   可変   | MAVLink パケット フォーマット             | | Generic (非推奨)                     | &#x60;generic&#x60;         |   可変   | iSCPv1互換 汎用フォーマット               | | Controlpad (非推奨)                  | &#x60;control_pad&#x60;     |   可変   | iSCPv1互換 コントロールパッドフォーマット | | GeneralSensor (非推奨)               | &#x60;general_sensor&#x60;  |   可変   | iSCPv1互換 汎用センサーフォーマット       |  ### 拡張文字列型 フォーマット付きの文字列データを格納するデータ型です。  |           名称           |    コード     | バイト長 |       説明        | | :- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- - | | JSON | &#x60;string/json&#x60;     |   可変   | JSON フォーマット | | CSV   | &#x60;string/csv&#x60;     |   可変   | CSV フォーマット  | | NMEA | &#x60;string/nmea&#x60;     |   可変   | NMEA フォーマット |
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <returns></returns>
        public void ProjectStream(string projectUuid)
        {
            ProjectStreamWithHttpInfo(projectUuid);
        }

        /// <summary>
        /// Get Project Realtime Streaming Data WebSocketを使ってリアルタイムデータを取得します。  同じくWebSocketを使ってリアルタイムデータを扱う &#x60;/v1/ws/measurements&#x60; では、 iSCP (intdash Stream Control Protocol)を使用しますが、 本エンドポイントではJSONとしてデータポイントを取得することができます。 ## クエリパラメータ  | パラメータ名     | 型                         | 必須       | デフォルト | 説明  | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- - | - -- -- | | flush_interval   | string                     | true       | -          | メッセージがフラッシュされる間隔を指定します。 単位は\&quot;ns\&quot;、\&quot;us\&quot; (または\&quot;µs\&quot;)、\&quot;ms\&quot;、\&quot;s\&quot;、\&quot;m\&quot;、\&quot;h\&quot;のいずれかを使用してください （参考: [Goのtimeパッケージ](https://golang.org/pkg/time/#ParseDuration)）。 指定がない場合は、メッセージごとにフラッシュされます。 |  ## メッセージのフォーマット ###  JSON Lines リクエストメッセージおよびレスポンスメッセージには [JSON lines](http://jsonlines.org/) 形式を使用します。 1つのメッセージが1行です。  例: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} . .  &#x60;&#x60;&#x60; 注意: メッセージに改行を含むことはできません。 改行が入ったメッセージの例（悪い例）: &#x60;&#x60;&#x60; {   \&quot;type\&quot; : \&quot;message_type\&quot;,   \&quot;contents\&quot; : { depends on message_type } } &#x60;&#x60;&#x60;  メッセージには、 &#x60;type&#x60; 属性および &#x60;contents&#x60; 属性が必要です。 &#x60;contents&#x60; のスキーマは、 &#x60;type&#x60; により決定されます。 ## ダウンストリーム開始リクエスト ### ダウンストリーム開始リクエストメッセージのスキーマ | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 | | type             | string                   | true       | &#x60;\&quot;open_downstream\&quot;&#x60; | 固定値  | | contents         | object（次の表を参照）   | true       | -                 |         |  ### ダウンストリーム開始リクエスト内 &#x60;contents&#x60; のスキーマ | 属性名           | 型                       | 必須       | デフォルト         | 説明   | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- - | - -- -- - | | edge             | string                   | true       | -                  | データの送信元エッジを、エッジのUUIDまたはエッジの名前で指定します。 最初に、一致するエッジUUIDが検索され、一致するエッジUUIDがなければ一致する名前が検索されます。 | | filter           | string array             | false      | &#x60;[]&#x60;               | 「フィルター」を参照してください。 |  ### フィルター データコードとデータ名を指定することにより、指定にマッチしたデータポイントだけを受信することができます。 ただし、メタデータのデータポイントは、フィルターの設定に関係なくすべて受信されます。  フィルターは以下のフォーマットで設定します: &#x60;&lt;型コード&gt;:&lt;データ名&gt;&#x60; データコードについては、後述の 時系列データのペイロードフォーマット を参照してください。 フィルター設定文字列の各セグメントにはワイルドカード( &#x60;**&#x60; )を使用することができます。  例: - 型コードが &#x60;can_data_field&#x60; のデータポイント（CAN）を受信する -&gt; &#x60;can_data_field:**&#x60; - 型コードが &#x60;string/&#x60; で始まるデータポイントを受信する（&#x60;string/json&#x60; 、 &#x60;string/csv&#x60; など） -&gt; &#x60;string/_**:**&#x60; - 文字列のデータポイントのうち、データ名が &#x60;my-string&#x60; のものを受信する -&gt; &#x60;string:my-string&#x60;  &#x60;filter&#x60; として空の配列が指定された場合は、すべてのデータポイントを受信します。  ### ダウンストリーム開始リクエストの例 リクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;open_downstream\&quot;, \&quot;contents\&quot; : { \&quot;edge\&quot; : \&quot;edge_name_or_uuid\&quot;, \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } } &#x60;&#x60;&#x60; レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:  &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60;  ## ダウンストリーム更新リクエスト ### ダウンストリーム更新リクエストメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 | | type             | string                   | true       | &#x60;\&quot;update_downstream\&quot;&#x60;  | 固定値  | | contents         | object（次の表を参照）   | true       | -                 |         |  ### ダウンストリーム更新リクエスト内 &#x60;contents&#x60; のスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | filter           | string array             | true       | -                 |「フィルター」を参照してください。 |  ### ダウンストリーム更新リクエストの例 フィルターを指定する場合のリクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } } &#x60;&#x60;&#x60;  フィルターを指定せずすべてのデータポイントを受信する場合のリクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [] } } &#x60;&#x60;&#x60;  レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:  &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: update downstream\&quot; } } &#x60;&#x60;&#x60;  ## ダウンストリーム終了リクエスト ### ダウンストリーム終了リクエストメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。  | | type             | string                   | true       | &#x60;\&quot;close_downstream\&quot;&#x60; | 固定値|  ### ダウンストリーム終了リクエストの例 リクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;close_downstream\&quot;} &#x60;&#x60;&#x60; レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: close downstream\&quot; } } &#x60;&#x60;&#x60;  ## レスポンスメッセージ リクエストの処理結果が返却されます。 ### レスポンスメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- | | type             | string                   | true       | &#x60;\&quot;response\&quot;&#x60;      | 固定値| | ack              | number                   | false      | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 | | contents         | object（次の表を参照）   | true       | -                 |       |  ### レスポンス内 &#x60;contents&#x60; のスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- | | code             | number                   | true       | -                 | 10000 &lt; code &lt; 20000 の場合、成功。 20000 &lt; code &lt; 30000 の場合、不正なリクエスト。50000 &lt; code の場合、予期しないエラー | | message          | string                   | true       | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |  ### レスポンスの例 &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60;  リクエストで &#x60;id&#x60; が指定されている場合のレスポンス例（ &#x60;id&#x60; の値が &#x60;ack&#x60; として返ります）:  &#x60;&#x60;&#x60; { \&quot;ack\&quot;: 1, \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60; # 時系列データのペイロードフォーマット 時系列データポイントが格納するペイロードのフォーマットです。各データ型に対する &#x60;contents&#x60;のフォーマットは [このページ](https://git.aptpod.co.jp/intdash-protocol/dataformat/-/tree/master/data) を参照してください。 ## データ型 各データバイナリには、ペイロードのフォーマットを示すデータ型が付与されます。各データ型には、型を識別するためのコード名が割り当てられます。 ## 標準データ型 単一のデータを格納するデータ型です。  |          名称           |  コード   | バイト長 |             説明             | | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- | | Bytes     | &#x60;bytes&#x60;   |   可変   | フォーマットなしバイト列     | | String    | &#x60;string&#x60;  |   可変   | フォーマットなし文字列       | | Float64   | &#x60;float64&#x60; |    8     | IEEE754 64ビット浮動小数点数 | | Int64     | &#x60;int64&#x60;   |    8     | 符号付き 64ビット整数        | | Bool      | &#x60;bool&#x60;    |    1     | 真偽値                       |  ## メディアデータ型 メディア（動画/音声）関連のデータを格納するデータ型です。  |          名称           |    コード    | バイト長 |            説明            | | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- | | JPEG | &#x60;video/jpeg&#x60; |   可変   | JPEG 形式の画像データ      | | H264 | &#x60;video/h264&#x60; |   可変   | H264 形式の映像データ      |  ### 拡張バイナリ型 フォーマット付きのバイナリデータを格納するデータ型です。  |                       名称                        |      コード       | バイト長 |                   説明                    | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | BSON                                 | &#x60;bson&#x60;            |   可変   | BSON フォーマット                         | | CAN Frame                            | &#x60;can_frame&#x60;       |   可変   | CAN フレーム フォーマット                 | | CAN Data Field                       | &#x60;can_data_field&#x60;  |   可変   | CAN データフィールド フォーマット         | | MAVLink1 Packet                      | &#x60;mavlink1_packet&#x60; |   可変   | MAVLink パケット フォーマット             | | Generic (非推奨)                     | &#x60;generic&#x60;         |   可変   | iSCPv1互換 汎用フォーマット               | | Controlpad (非推奨)                  | &#x60;control_pad&#x60;     |   可変   | iSCPv1互換 コントロールパッドフォーマット | | GeneralSensor (非推奨)               | &#x60;general_sensor&#x60;  |   可変   | iSCPv1互換 汎用センサーフォーマット       |  ### 拡張文字列型 フォーマット付きの文字列データを格納するデータ型です。  |           名称           |    コード     | バイト長 |       説明        | | :- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- - | | JSON | &#x60;string/json&#x60;     |   可変   | JSON フォーマット | | CSV   | &#x60;string/csv&#x60;     |   可変   | CSV フォーマット  | | NMEA | &#x60;string/nmea&#x60;     |   可変   | NMEA フォーマット |
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> ProjectStreamWithHttpInfo(string projectUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling BrokerStreamApi->ProjectStream");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/projects/{project_uuid}/stream", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectStream", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project Realtime Streaming Data WebSocketを使ってリアルタイムデータを取得します。  同じくWebSocketを使ってリアルタイムデータを扱う &#x60;/v1/ws/measurements&#x60; では、 iSCP (intdash Stream Control Protocol)を使用しますが、 本エンドポイントではJSONとしてデータポイントを取得することができます。 ## クエリパラメータ  | パラメータ名     | 型                         | 必須       | デフォルト | 説明  | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- - | - -- -- | | flush_interval   | string                     | true       | -          | メッセージがフラッシュされる間隔を指定します。 単位は\&quot;ns\&quot;、\&quot;us\&quot; (または\&quot;µs\&quot;)、\&quot;ms\&quot;、\&quot;s\&quot;、\&quot;m\&quot;、\&quot;h\&quot;のいずれかを使用してください （参考: [Goのtimeパッケージ](https://golang.org/pkg/time/#ParseDuration)）。 指定がない場合は、メッセージごとにフラッシュされます。 |  ## メッセージのフォーマット ###  JSON Lines リクエストメッセージおよびレスポンスメッセージには [JSON lines](http://jsonlines.org/) 形式を使用します。 1つのメッセージが1行です。  例: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} . .  &#x60;&#x60;&#x60; 注意: メッセージに改行を含むことはできません。 改行が入ったメッセージの例（悪い例）: &#x60;&#x60;&#x60; {   \&quot;type\&quot; : \&quot;message_type\&quot;,   \&quot;contents\&quot; : { depends on message_type } } &#x60;&#x60;&#x60;  メッセージには、 &#x60;type&#x60; 属性および &#x60;contents&#x60; 属性が必要です。 &#x60;contents&#x60; のスキーマは、 &#x60;type&#x60; により決定されます。 ## ダウンストリーム開始リクエスト ### ダウンストリーム開始リクエストメッセージのスキーマ | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 | | type             | string                   | true       | &#x60;\&quot;open_downstream\&quot;&#x60; | 固定値  | | contents         | object（次の表を参照）   | true       | -                 |         |  ### ダウンストリーム開始リクエスト内 &#x60;contents&#x60; のスキーマ | 属性名           | 型                       | 必須       | デフォルト         | 説明   | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- - | - -- -- - | | edge             | string                   | true       | -                  | データの送信元エッジを、エッジのUUIDまたはエッジの名前で指定します。 最初に、一致するエッジUUIDが検索され、一致するエッジUUIDがなければ一致する名前が検索されます。 | | filter           | string array             | false      | &#x60;[]&#x60;               | 「フィルター」を参照してください。 |  ### フィルター データコードとデータ名を指定することにより、指定にマッチしたデータポイントだけを受信することができます。 ただし、メタデータのデータポイントは、フィルターの設定に関係なくすべて受信されます。  フィルターは以下のフォーマットで設定します: &#x60;&lt;型コード&gt;:&lt;データ名&gt;&#x60; データコードについては、後述の 時系列データのペイロードフォーマット を参照してください。 フィルター設定文字列の各セグメントにはワイルドカード( &#x60;**&#x60; )を使用することができます。  例: - 型コードが &#x60;can_data_field&#x60; のデータポイント（CAN）を受信する -&gt; &#x60;can_data_field:**&#x60; - 型コードが &#x60;string/&#x60; で始まるデータポイントを受信する（&#x60;string/json&#x60; 、 &#x60;string/csv&#x60; など） -&gt; &#x60;string/_**:**&#x60; - 文字列のデータポイントのうち、データ名が &#x60;my-string&#x60; のものを受信する -&gt; &#x60;string:my-string&#x60;  &#x60;filter&#x60; として空の配列が指定された場合は、すべてのデータポイントを受信します。  ### ダウンストリーム開始リクエストの例 リクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;open_downstream\&quot;, \&quot;contents\&quot; : { \&quot;edge\&quot; : \&quot;edge_name_or_uuid\&quot;, \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } } &#x60;&#x60;&#x60; レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:  &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60;  ## ダウンストリーム更新リクエスト ### ダウンストリーム更新リクエストメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 | | type             | string                   | true       | &#x60;\&quot;update_downstream\&quot;&#x60;  | 固定値  | | contents         | object（次の表を参照）   | true       | -                 |         |  ### ダウンストリーム更新リクエスト内 &#x60;contents&#x60; のスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | filter           | string array             | true       | -                 |「フィルター」を参照してください。 |  ### ダウンストリーム更新リクエストの例 フィルターを指定する場合のリクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } } &#x60;&#x60;&#x60;  フィルターを指定せずすべてのデータポイントを受信する場合のリクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [] } } &#x60;&#x60;&#x60;  レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:  &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: update downstream\&quot; } } &#x60;&#x60;&#x60;  ## ダウンストリーム終了リクエスト ### ダウンストリーム終了リクエストメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。  | | type             | string                   | true       | &#x60;\&quot;close_downstream\&quot;&#x60; | 固定値|  ### ダウンストリーム終了リクエストの例 リクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;close_downstream\&quot;} &#x60;&#x60;&#x60; レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: close downstream\&quot; } } &#x60;&#x60;&#x60;  ## レスポンスメッセージ リクエストの処理結果が返却されます。 ### レスポンスメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- | | type             | string                   | true       | &#x60;\&quot;response\&quot;&#x60;      | 固定値| | ack              | number                   | false      | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 | | contents         | object（次の表を参照）   | true       | -                 |       |  ### レスポンス内 &#x60;contents&#x60; のスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- | | code             | number                   | true       | -                 | 10000 &lt; code &lt; 20000 の場合、成功。 20000 &lt; code &lt; 30000 の場合、不正なリクエスト。50000 &lt; code の場合、予期しないエラー | | message          | string                   | true       | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |  ### レスポンスの例 &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60;  リクエストで &#x60;id&#x60; が指定されている場合のレスポンス例（ &#x60;id&#x60; の値が &#x60;ack&#x60; として返ります）:  &#x60;&#x60;&#x60; { \&quot;ack\&quot;: 1, \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60; # 時系列データのペイロードフォーマット 時系列データポイントが格納するペイロードのフォーマットです。各データ型に対する &#x60;contents&#x60;のフォーマットは [このページ](https://git.aptpod.co.jp/intdash-protocol/dataformat/-/tree/master/data) を参照してください。 ## データ型 各データバイナリには、ペイロードのフォーマットを示すデータ型が付与されます。各データ型には、型を識別するためのコード名が割り当てられます。 ## 標準データ型 単一のデータを格納するデータ型です。  |          名称           |  コード   | バイト長 |             説明             | | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- | | Bytes     | &#x60;bytes&#x60;   |   可変   | フォーマットなしバイト列     | | String    | &#x60;string&#x60;  |   可変   | フォーマットなし文字列       | | Float64   | &#x60;float64&#x60; |    8     | IEEE754 64ビット浮動小数点数 | | Int64     | &#x60;int64&#x60;   |    8     | 符号付き 64ビット整数        | | Bool      | &#x60;bool&#x60;    |    1     | 真偽値                       |  ## メディアデータ型 メディア（動画/音声）関連のデータを格納するデータ型です。  |          名称           |    コード    | バイト長 |            説明            | | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- | | JPEG | &#x60;video/jpeg&#x60; |   可変   | JPEG 形式の画像データ      | | H264 | &#x60;video/h264&#x60; |   可変   | H264 形式の映像データ      |  ### 拡張バイナリ型 フォーマット付きのバイナリデータを格納するデータ型です。  |                       名称                        |      コード       | バイト長 |                   説明                    | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | BSON                                 | &#x60;bson&#x60;            |   可変   | BSON フォーマット                         | | CAN Frame                            | &#x60;can_frame&#x60;       |   可変   | CAN フレーム フォーマット                 | | CAN Data Field                       | &#x60;can_data_field&#x60;  |   可変   | CAN データフィールド フォーマット         | | MAVLink1 Packet                      | &#x60;mavlink1_packet&#x60; |   可変   | MAVLink パケット フォーマット             | | Generic (非推奨)                     | &#x60;generic&#x60;         |   可変   | iSCPv1互換 汎用フォーマット               | | Controlpad (非推奨)                  | &#x60;control_pad&#x60;     |   可変   | iSCPv1互換 コントロールパッドフォーマット | | GeneralSensor (非推奨)               | &#x60;general_sensor&#x60;  |   可変   | iSCPv1互換 汎用センサーフォーマット       |  ### 拡張文字列型 フォーマット付きの文字列データを格納するデータ型です。  |           名称           |    コード     | バイト長 |       説明        | | :- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- - | | JSON | &#x60;string/json&#x60;     |   可変   | JSON フォーマット | | CSV   | &#x60;string/csv&#x60;     |   可変   | CSV フォーマット  | | NMEA | &#x60;string/nmea&#x60;     |   可変   | NMEA フォーマット |
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProjectStreamAsync(string projectUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProjectStreamWithHttpInfoAsync(projectUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Project Realtime Streaming Data WebSocketを使ってリアルタイムデータを取得します。  同じくWebSocketを使ってリアルタイムデータを扱う &#x60;/v1/ws/measurements&#x60; では、 iSCP (intdash Stream Control Protocol)を使用しますが、 本エンドポイントではJSONとしてデータポイントを取得することができます。 ## クエリパラメータ  | パラメータ名     | 型                         | 必須       | デフォルト | 説明  | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- - | - -- -- | | flush_interval   | string                     | true       | -          | メッセージがフラッシュされる間隔を指定します。 単位は\&quot;ns\&quot;、\&quot;us\&quot; (または\&quot;µs\&quot;)、\&quot;ms\&quot;、\&quot;s\&quot;、\&quot;m\&quot;、\&quot;h\&quot;のいずれかを使用してください （参考: [Goのtimeパッケージ](https://golang.org/pkg/time/#ParseDuration)）。 指定がない場合は、メッセージごとにフラッシュされます。 |  ## メッセージのフォーマット ###  JSON Lines リクエストメッセージおよびレスポンスメッセージには [JSON lines](http://jsonlines.org/) 形式を使用します。 1つのメッセージが1行です。  例: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }} . .  &#x60;&#x60;&#x60; 注意: メッセージに改行を含むことはできません。 改行が入ったメッセージの例（悪い例）: &#x60;&#x60;&#x60; {   \&quot;type\&quot; : \&quot;message_type\&quot;,   \&quot;contents\&quot; : { depends on message_type } } &#x60;&#x60;&#x60;  メッセージには、 &#x60;type&#x60; 属性および &#x60;contents&#x60; 属性が必要です。 &#x60;contents&#x60; のスキーマは、 &#x60;type&#x60; により決定されます。 ## ダウンストリーム開始リクエスト ### ダウンストリーム開始リクエストメッセージのスキーマ | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 | | type             | string                   | true       | &#x60;\&quot;open_downstream\&quot;&#x60; | 固定値  | | contents         | object（次の表を参照）   | true       | -                 |         |  ### ダウンストリーム開始リクエスト内 &#x60;contents&#x60; のスキーマ | 属性名           | 型                       | 必須       | デフォルト         | 説明   | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- - | - -- -- - | | edge             | string                   | true       | -                  | データの送信元エッジを、エッジのUUIDまたはエッジの名前で指定します。 最初に、一致するエッジUUIDが検索され、一致するエッジUUIDがなければ一致する名前が検索されます。 | | filter           | string array             | false      | &#x60;[]&#x60;               | 「フィルター」を参照してください。 |  ### フィルター データコードとデータ名を指定することにより、指定にマッチしたデータポイントだけを受信することができます。 ただし、メタデータのデータポイントは、フィルターの設定に関係なくすべて受信されます。  フィルターは以下のフォーマットで設定します: &#x60;&lt;型コード&gt;:&lt;データ名&gt;&#x60; データコードについては、後述の 時系列データのペイロードフォーマット を参照してください。 フィルター設定文字列の各セグメントにはワイルドカード( &#x60;**&#x60; )を使用することができます。  例: - 型コードが &#x60;can_data_field&#x60; のデータポイント（CAN）を受信する -&gt; &#x60;can_data_field:**&#x60; - 型コードが &#x60;string/&#x60; で始まるデータポイントを受信する（&#x60;string/json&#x60; 、 &#x60;string/csv&#x60; など） -&gt; &#x60;string/_**:**&#x60; - 文字列のデータポイントのうち、データ名が &#x60;my-string&#x60; のものを受信する -&gt; &#x60;string:my-string&#x60;  &#x60;filter&#x60; として空の配列が指定された場合は、すべてのデータポイントを受信します。  ### ダウンストリーム開始リクエストの例 リクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;open_downstream\&quot;, \&quot;contents\&quot; : { \&quot;edge\&quot; : \&quot;edge_name_or_uuid\&quot;, \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } } &#x60;&#x60;&#x60; レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:  &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60;  ## ダウンストリーム更新リクエスト ### ダウンストリーム更新リクエストメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 | | type             | string                   | true       | &#x60;\&quot;update_downstream\&quot;&#x60;  | 固定値  | | contents         | object（次の表を参照）   | true       | -                 |         |  ### ダウンストリーム更新リクエスト内 &#x60;contents&#x60; のスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | filter           | string array             | true       | -                 |「フィルター」を参照してください。 |  ### ダウンストリーム更新リクエストの例 フィルターを指定する場合のリクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } } &#x60;&#x60;&#x60;  フィルターを指定せずすべてのデータポイントを受信する場合のリクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [] } } &#x60;&#x60;&#x60;  レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:  &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: update downstream\&quot; } } &#x60;&#x60;&#x60;  ## ダウンストリーム終了リクエスト ### ダウンストリーム終了リクエストメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- | | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。  | | type             | string                   | true       | &#x60;\&quot;close_downstream\&quot;&#x60; | 固定値|  ### ダウンストリーム終了リクエストの例 リクエスト: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;close_downstream\&quot;} &#x60;&#x60;&#x60; レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）: &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: close downstream\&quot; } } &#x60;&#x60;&#x60;  ## レスポンスメッセージ リクエストの処理結果が返却されます。 ### レスポンスメッセージのスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- | | type             | string                   | true       | &#x60;\&quot;response\&quot;&#x60;      | 固定値| | ack              | number                   | false      | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 | | contents         | object（次の表を参照）   | true       | -                 |       |  ### レスポンス内 &#x60;contents&#x60; のスキーマ  | 属性名           | 型                       | 必須       | デフォルト        | 説明    | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- | | code             | number                   | true       | -                 | 10000 &lt; code &lt; 20000 の場合、成功。 20000 &lt; code &lt; 30000 の場合、不正なリクエスト。50000 &lt; code の場合、予期しないエラー | | message          | string                   | true       | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |  ### レスポンスの例 &#x60;&#x60;&#x60; { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60;  リクエストで &#x60;id&#x60; が指定されている場合のレスポンス例（ &#x60;id&#x60; の値が &#x60;ack&#x60; として返ります）:  &#x60;&#x60;&#x60; { \&quot;ack\&quot;: 1, \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } } &#x60;&#x60;&#x60; # 時系列データのペイロードフォーマット 時系列データポイントが格納するペイロードのフォーマットです。各データ型に対する &#x60;contents&#x60;のフォーマットは [このページ](https://git.aptpod.co.jp/intdash-protocol/dataformat/-/tree/master/data) を参照してください。 ## データ型 各データバイナリには、ペイロードのフォーマットを示すデータ型が付与されます。各データ型には、型を識別するためのコード名が割り当てられます。 ## 標準データ型 単一のデータを格納するデータ型です。  |          名称           |  コード   | バイト長 |             説明             | | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- | | Bytes     | &#x60;bytes&#x60;   |   可変   | フォーマットなしバイト列     | | String    | &#x60;string&#x60;  |   可変   | フォーマットなし文字列       | | Float64   | &#x60;float64&#x60; |    8     | IEEE754 64ビット浮動小数点数 | | Int64     | &#x60;int64&#x60;   |    8     | 符号付き 64ビット整数        | | Bool      | &#x60;bool&#x60;    |    1     | 真偽値                       |  ## メディアデータ型 メディア（動画/音声）関連のデータを格納するデータ型です。  |          名称           |    コード    | バイト長 |            説明            | | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- | | JPEG | &#x60;video/jpeg&#x60; |   可変   | JPEG 形式の画像データ      | | H264 | &#x60;video/h264&#x60; |   可変   | H264 形式の映像データ      |  ### 拡張バイナリ型 フォーマット付きのバイナリデータを格納するデータ型です。  |                       名称                        |      コード       | バイト長 |                   説明                    | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | BSON                                 | &#x60;bson&#x60;            |   可変   | BSON フォーマット                         | | CAN Frame                            | &#x60;can_frame&#x60;       |   可変   | CAN フレーム フォーマット                 | | CAN Data Field                       | &#x60;can_data_field&#x60;  |   可変   | CAN データフィールド フォーマット         | | MAVLink1 Packet                      | &#x60;mavlink1_packet&#x60; |   可変   | MAVLink パケット フォーマット             | | Generic (非推奨)                     | &#x60;generic&#x60;         |   可変   | iSCPv1互換 汎用フォーマット               | | Controlpad (非推奨)                  | &#x60;control_pad&#x60;     |   可変   | iSCPv1互換 コントロールパッドフォーマット | | GeneralSensor (非推奨)               | &#x60;general_sensor&#x60;  |   可変   | iSCPv1互換 汎用センサーフォーマット       |  ### 拡張文字列型 フォーマット付きの文字列データを格納するデータ型です。  |           名称           |    コード     | バイト長 |       説明        | | :- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- - | | JSON | &#x60;string/json&#x60;     |   可変   | JSON フォーマット | | CSV   | &#x60;string/csv&#x60;     |   可変   | CSV フォーマット  | | NMEA | &#x60;string/nmea&#x60;     |   可変   | NMEA フォーマット |
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> ProjectStreamWithHttpInfoAsync(string projectUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling BrokerStreamApi->ProjectStream");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/projects/{project_uuid}/stream", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProjectStream", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Realtime Streaming Data （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/stream&#x60; を使用してください）  WebSocketを使ってリアルタイムデータを取得します。    同じくWebSocketを使ってリアルタイムデータを扱う &#x60;/v1/ws/measurements&#x60; では、  iSCP (intdash Stream Control Protocol)を使用しますが、  本エンドポイントではJSONとしてデータポイントを取得することができます。   ## クエリパラメータ    | パラメータ名     | 型                         | 必須       | デフォルト | 説明  |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- - | - -- -- |   | flush_interval   | string                     | true       | -          |  メッセージがフラッシュされる間隔を指定します。  単位は\&quot;ns\&quot;、\&quot;us\&quot; (または\&quot;µs\&quot;)、\&quot;ms\&quot;、\&quot;s\&quot;、\&quot;m\&quot;、\&quot;h\&quot;のいずれかを使用してください  （参考: [Goのtimeパッケージ](https://golang.org/pkg/time/#ParseDuration)）。  指定がない場合は、メッセージごとにフラッシュされます。 |    ## メッセージのフォーマット   ###  JSON Lines   リクエストメッセージおよびレスポンスメッセージには [JSON lines](http://jsonlines.org/) 形式を使用します。   1つのメッセージが1行です。    例:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   .   .    &#x60;&#x60;&#x60;   注意: メッセージに改行を含むことはできません。   改行が入ったメッセージの例（悪い例）:   &#x60;&#x60;&#x60;   {    \&quot;type\&quot; : \&quot;message_type\&quot;,    \&quot;contents\&quot; : { depends on message_type }  }   &#x60;&#x60;&#x60;    メッセージには、 &#x60;type&#x60; 属性および &#x60;contents&#x60; 属性が必要です。  &#x60;contents&#x60; のスキーマは、 &#x60;type&#x60; により決定されます。   ## ダウンストリーム開始リクエスト   ### ダウンストリーム開始リクエストメッセージのスキーマ   | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 |   | type             | string                   | true       | &#x60;\&quot;open_downstream\&quot;&#x60; | 固定値  |   | contents         | object（次の表を参照）   | true       | -                 |         |    ### ダウンストリーム開始リクエスト内 &#x60;contents&#x60; のスキーマ   | 属性名           | 型                       | 必須       | デフォルト         | 説明   |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- - | - -- -- - |   | edge             | string                   | true       | -                  | データの送信元エッジを、エッジのUUIDまたはエッジの名前で指定します。  最初に、一致するエッジUUIDが検索され、一致するエッジUUIDがなければ一致する名前が検索されます。 |   | filter           | string array             | false      | &#x60;[]&#x60;               | 「フィルター」を参照してください。 |    ### フィルター   データコードとデータ名を指定することにより、指定にマッチしたデータポイントだけを受信することができます。   ただし、メタデータのデータポイントは、フィルターの設定に関係なくすべて受信されます。    フィルターは以下のフォーマットで設定します: &#x60;&lt;型コード&gt;:&lt;データ名&gt;&#x60;   データコードについては、後述の 時系列データのペイロードフォーマット を参照してください。   フィルター設定文字列の各セグメントにはワイルドカード( &#x60;**&#x60; )を使用することができます。    例:   - 型コードが &#x60;can_data_field&#x60; のデータポイント（CAN）を受信する -&gt; &#x60;can_data_field:**&#x60;   - 型コードが &#x60;string/&#x60; で始まるデータポイントを受信する（&#x60;string/json&#x60; 、 &#x60;string/csv&#x60; など） -&gt; &#x60;string/_**:**&#x60;   - 文字列のデータポイントのうち、データ名が &#x60;my-string&#x60; のものを受信する -&gt; &#x60;string:my-string&#x60;    &#x60;filter&#x60; として空の配列が指定された場合は、すべてのデータポイントを受信します。    ### ダウンストリーム開始リクエストの例   リクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;open_downstream\&quot;, \&quot;contents\&quot; : { \&quot;edge\&quot; : \&quot;edge_name_or_uuid\&quot;, \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } }   &#x60;&#x60;&#x60;   レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:    &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;    ## ダウンストリーム更新リクエスト   ### ダウンストリーム更新リクエストメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 |   | type             | string                   | true       | &#x60;\&quot;update_downstream\&quot;&#x60;  | 固定値  |   | contents         | object（次の表を参照）   | true       | -                 |         |    ### ダウンストリーム更新リクエスト内 &#x60;contents&#x60; のスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | filter           | string array             | true       | -                 |「フィルター」を参照してください。 |    ### ダウンストリーム更新リクエストの例   フィルターを指定する場合のリクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } }   &#x60;&#x60;&#x60;    フィルターを指定せずすべてのデータポイントを受信する場合のリクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [] } }   &#x60;&#x60;&#x60;    レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:    &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed:  update downstream\&quot; } }   &#x60;&#x60;&#x60;    ## ダウンストリーム終了リクエスト   ### ダウンストリーム終了リクエストメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。  |   | type             | string                   | true       | &#x60;\&quot;close_downstream\&quot;&#x60; | 固定値|    ### ダウンストリーム終了リクエストの例   リクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;close_downstream\&quot;}   &#x60;&#x60;&#x60;   レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: close downstream\&quot; } }   &#x60;&#x60;&#x60;    ## レスポンスメッセージ   リクエストの処理結果が返却されます。   ### レスポンスメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- |   | type             | string                   | true       | &#x60;\&quot;response\&quot;&#x60;      | 固定値|   | ack              | number                   | false      | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |   | contents         | object（次の表を参照）   | true       | -                 |       |    ### レスポンス内 &#x60;contents&#x60; のスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- |   | code             | number                   | true       | -                 | 10000 &lt; code &lt; 20000 の場合、成功。  20000 &lt; code &lt; 30000 の場合、不正なリクエスト。50000 &lt; code の場合、予期しないエラー |   | message          | string                   | true       | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |    ### レスポンスの例   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;    リクエストで &#x60;id&#x60; が指定されている場合のレスポンス例（ &#x60;id&#x60; の値が &#x60;ack&#x60; として返ります）:    &#x60;&#x60;&#x60;   { \&quot;ack\&quot;: 1, \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;   # 時系列データのペイロードフォーマット   時系列データポイントが格納するペイロードのフォーマットです。各データ型に対する &#x60;contents&#x60;のフォーマットは [このページ](https://git.aptpod.co.jp/intdash-protocol/dataformat/-/tree/master/data) を参照してください。   ## データ型   各データバイナリには、ペイロードのフォーマットを示すデータ型が付与されます。各データ型には、型を識別するためのコード名が割り当てられます。   ## 標準データ型   単一のデータを格納するデータ型です。    |          名称           |  コード   | バイト長 |             説明             |   | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- |   | Bytes     | &#x60;bytes&#x60;   |   可変   | フォーマットなしバイト列     |   | String    | &#x60;string&#x60;  |   可変   | フォーマットなし文字列       |   | Float64   | &#x60;float64&#x60; |    8     | IEEE754 64ビット浮動小数点数 |   | Int64     | &#x60;int64&#x60;   |    8     | 符号付き 64ビット整数        |   | Bool      | &#x60;bool&#x60;    |    1     | 真偽値                       |    ## メディアデータ型   メディア（動画/音声）関連のデータを格納するデータ型です。    |          名称           |    コード    | バイト長 |            説明            |   | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- |   | JPEG | &#x60;video/jpeg&#x60; |   可変   | JPEG 形式の画像データ      |   | H264 | &#x60;video/h264&#x60; |   可変   | H264 形式の映像データ      |    ### 拡張バイナリ型   フォーマット付きのバイナリデータを格納するデータ型です。    |                       名称                        |      コード       | バイト長 |                   説明                    |   | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |   | BSON                                 | &#x60;bson&#x60;            |   可変   | BSON フォーマット                         |   | CAN Frame                            | &#x60;can_frame&#x60;       |   可変   | CAN フレーム フォーマット                 |   | CAN Data Field                       | &#x60;can_data_field&#x60;  |   可変   | CAN データフィールド フォーマット         |   | MAVLink1 Packet                      | &#x60;mavlink1_packet&#x60; |   可変   | MAVLink パケット フォーマット             |   | Generic (非推奨)                     | &#x60;generic&#x60;         |   可変   | iSCPv1互換 汎用フォーマット               |   | Controlpad (非推奨)                  | &#x60;control_pad&#x60;     |   可変   | iSCPv1互換 コントロールパッドフォーマット |   | GeneralSensor (非推奨)               | &#x60;general_sensor&#x60;  |   可変   | iSCPv1互換 汎用センサーフォーマット       |    ### 拡張文字列型   フォーマット付きの文字列データを格納するデータ型です。    |           名称           |    コード     | バイト長 |       説明        |   | :- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- - |   | JSON | &#x60;string/json&#x60;     |   可変   | JSON フォーマット |   | CSV   | &#x60;string/csv&#x60;     |   可変   | CSV フォーマット  |   | NMEA | &#x60;string/nmea&#x60;     |   可変   | NMEA フォーマット |
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        [Obsolete]
        public void Stream()
        {
            StreamWithHttpInfo();
        }

        /// <summary>
        /// Get Realtime Streaming Data （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/stream&#x60; を使用してください）  WebSocketを使ってリアルタイムデータを取得します。    同じくWebSocketを使ってリアルタイムデータを扱う &#x60;/v1/ws/measurements&#x60; では、  iSCP (intdash Stream Control Protocol)を使用しますが、  本エンドポイントではJSONとしてデータポイントを取得することができます。   ## クエリパラメータ    | パラメータ名     | 型                         | 必須       | デフォルト | 説明  |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- - | - -- -- |   | flush_interval   | string                     | true       | -          |  メッセージがフラッシュされる間隔を指定します。  単位は\&quot;ns\&quot;、\&quot;us\&quot; (または\&quot;µs\&quot;)、\&quot;ms\&quot;、\&quot;s\&quot;、\&quot;m\&quot;、\&quot;h\&quot;のいずれかを使用してください  （参考: [Goのtimeパッケージ](https://golang.org/pkg/time/#ParseDuration)）。  指定がない場合は、メッセージごとにフラッシュされます。 |    ## メッセージのフォーマット   ###  JSON Lines   リクエストメッセージおよびレスポンスメッセージには [JSON lines](http://jsonlines.org/) 形式を使用します。   1つのメッセージが1行です。    例:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   .   .    &#x60;&#x60;&#x60;   注意: メッセージに改行を含むことはできません。   改行が入ったメッセージの例（悪い例）:   &#x60;&#x60;&#x60;   {    \&quot;type\&quot; : \&quot;message_type\&quot;,    \&quot;contents\&quot; : { depends on message_type }  }   &#x60;&#x60;&#x60;    メッセージには、 &#x60;type&#x60; 属性および &#x60;contents&#x60; 属性が必要です。  &#x60;contents&#x60; のスキーマは、 &#x60;type&#x60; により決定されます。   ## ダウンストリーム開始リクエスト   ### ダウンストリーム開始リクエストメッセージのスキーマ   | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 |   | type             | string                   | true       | &#x60;\&quot;open_downstream\&quot;&#x60; | 固定値  |   | contents         | object（次の表を参照）   | true       | -                 |         |    ### ダウンストリーム開始リクエスト内 &#x60;contents&#x60; のスキーマ   | 属性名           | 型                       | 必須       | デフォルト         | 説明   |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- - | - -- -- - |   | edge             | string                   | true       | -                  | データの送信元エッジを、エッジのUUIDまたはエッジの名前で指定します。  最初に、一致するエッジUUIDが検索され、一致するエッジUUIDがなければ一致する名前が検索されます。 |   | filter           | string array             | false      | &#x60;[]&#x60;               | 「フィルター」を参照してください。 |    ### フィルター   データコードとデータ名を指定することにより、指定にマッチしたデータポイントだけを受信することができます。   ただし、メタデータのデータポイントは、フィルターの設定に関係なくすべて受信されます。    フィルターは以下のフォーマットで設定します: &#x60;&lt;型コード&gt;:&lt;データ名&gt;&#x60;   データコードについては、後述の 時系列データのペイロードフォーマット を参照してください。   フィルター設定文字列の各セグメントにはワイルドカード( &#x60;**&#x60; )を使用することができます。    例:   - 型コードが &#x60;can_data_field&#x60; のデータポイント（CAN）を受信する -&gt; &#x60;can_data_field:**&#x60;   - 型コードが &#x60;string/&#x60; で始まるデータポイントを受信する（&#x60;string/json&#x60; 、 &#x60;string/csv&#x60; など） -&gt; &#x60;string/_**:**&#x60;   - 文字列のデータポイントのうち、データ名が &#x60;my-string&#x60; のものを受信する -&gt; &#x60;string:my-string&#x60;    &#x60;filter&#x60; として空の配列が指定された場合は、すべてのデータポイントを受信します。    ### ダウンストリーム開始リクエストの例   リクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;open_downstream\&quot;, \&quot;contents\&quot; : { \&quot;edge\&quot; : \&quot;edge_name_or_uuid\&quot;, \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } }   &#x60;&#x60;&#x60;   レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:    &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;    ## ダウンストリーム更新リクエスト   ### ダウンストリーム更新リクエストメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 |   | type             | string                   | true       | &#x60;\&quot;update_downstream\&quot;&#x60;  | 固定値  |   | contents         | object（次の表を参照）   | true       | -                 |         |    ### ダウンストリーム更新リクエスト内 &#x60;contents&#x60; のスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | filter           | string array             | true       | -                 |「フィルター」を参照してください。 |    ### ダウンストリーム更新リクエストの例   フィルターを指定する場合のリクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } }   &#x60;&#x60;&#x60;    フィルターを指定せずすべてのデータポイントを受信する場合のリクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [] } }   &#x60;&#x60;&#x60;    レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:    &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed:  update downstream\&quot; } }   &#x60;&#x60;&#x60;    ## ダウンストリーム終了リクエスト   ### ダウンストリーム終了リクエストメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。  |   | type             | string                   | true       | &#x60;\&quot;close_downstream\&quot;&#x60; | 固定値|    ### ダウンストリーム終了リクエストの例   リクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;close_downstream\&quot;}   &#x60;&#x60;&#x60;   レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: close downstream\&quot; } }   &#x60;&#x60;&#x60;    ## レスポンスメッセージ   リクエストの処理結果が返却されます。   ### レスポンスメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- |   | type             | string                   | true       | &#x60;\&quot;response\&quot;&#x60;      | 固定値|   | ack              | number                   | false      | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |   | contents         | object（次の表を参照）   | true       | -                 |       |    ### レスポンス内 &#x60;contents&#x60; のスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- |   | code             | number                   | true       | -                 | 10000 &lt; code &lt; 20000 の場合、成功。  20000 &lt; code &lt; 30000 の場合、不正なリクエスト。50000 &lt; code の場合、予期しないエラー |   | message          | string                   | true       | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |    ### レスポンスの例   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;    リクエストで &#x60;id&#x60; が指定されている場合のレスポンス例（ &#x60;id&#x60; の値が &#x60;ack&#x60; として返ります）:    &#x60;&#x60;&#x60;   { \&quot;ack\&quot;: 1, \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;   # 時系列データのペイロードフォーマット   時系列データポイントが格納するペイロードのフォーマットです。各データ型に対する &#x60;contents&#x60;のフォーマットは [このページ](https://git.aptpod.co.jp/intdash-protocol/dataformat/-/tree/master/data) を参照してください。   ## データ型   各データバイナリには、ペイロードのフォーマットを示すデータ型が付与されます。各データ型には、型を識別するためのコード名が割り当てられます。   ## 標準データ型   単一のデータを格納するデータ型です。    |          名称           |  コード   | バイト長 |             説明             |   | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- |   | Bytes     | &#x60;bytes&#x60;   |   可変   | フォーマットなしバイト列     |   | String    | &#x60;string&#x60;  |   可変   | フォーマットなし文字列       |   | Float64   | &#x60;float64&#x60; |    8     | IEEE754 64ビット浮動小数点数 |   | Int64     | &#x60;int64&#x60;   |    8     | 符号付き 64ビット整数        |   | Bool      | &#x60;bool&#x60;    |    1     | 真偽値                       |    ## メディアデータ型   メディア（動画/音声）関連のデータを格納するデータ型です。    |          名称           |    コード    | バイト長 |            説明            |   | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- |   | JPEG | &#x60;video/jpeg&#x60; |   可変   | JPEG 形式の画像データ      |   | H264 | &#x60;video/h264&#x60; |   可変   | H264 形式の映像データ      |    ### 拡張バイナリ型   フォーマット付きのバイナリデータを格納するデータ型です。    |                       名称                        |      コード       | バイト長 |                   説明                    |   | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |   | BSON                                 | &#x60;bson&#x60;            |   可変   | BSON フォーマット                         |   | CAN Frame                            | &#x60;can_frame&#x60;       |   可変   | CAN フレーム フォーマット                 |   | CAN Data Field                       | &#x60;can_data_field&#x60;  |   可変   | CAN データフィールド フォーマット         |   | MAVLink1 Packet                      | &#x60;mavlink1_packet&#x60; |   可変   | MAVLink パケット フォーマット             |   | Generic (非推奨)                     | &#x60;generic&#x60;         |   可変   | iSCPv1互換 汎用フォーマット               |   | Controlpad (非推奨)                  | &#x60;control_pad&#x60;     |   可変   | iSCPv1互換 コントロールパッドフォーマット |   | GeneralSensor (非推奨)               | &#x60;general_sensor&#x60;  |   可変   | iSCPv1互換 汎用センサーフォーマット       |    ### 拡張文字列型   フォーマット付きの文字列データを格納するデータ型です。    |           名称           |    コード     | バイト長 |       説明        |   | :- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- - |   | JSON | &#x60;string/json&#x60;     |   可変   | JSON フォーマット |   | CSV   | &#x60;string/csv&#x60;     |   可変   | CSV フォーマット  |   | NMEA | &#x60;string/nmea&#x60;     |   可変   | NMEA フォーマット |
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Object> StreamWithHttpInfo()
        {
            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/stream", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Stream", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Realtime Streaming Data （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/stream&#x60; を使用してください）  WebSocketを使ってリアルタイムデータを取得します。    同じくWebSocketを使ってリアルタイムデータを扱う &#x60;/v1/ws/measurements&#x60; では、  iSCP (intdash Stream Control Protocol)を使用しますが、  本エンドポイントではJSONとしてデータポイントを取得することができます。   ## クエリパラメータ    | パラメータ名     | 型                         | 必須       | デフォルト | 説明  |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- - | - -- -- |   | flush_interval   | string                     | true       | -          |  メッセージがフラッシュされる間隔を指定します。  単位は\&quot;ns\&quot;、\&quot;us\&quot; (または\&quot;µs\&quot;)、\&quot;ms\&quot;、\&quot;s\&quot;、\&quot;m\&quot;、\&quot;h\&quot;のいずれかを使用してください  （参考: [Goのtimeパッケージ](https://golang.org/pkg/time/#ParseDuration)）。  指定がない場合は、メッセージごとにフラッシュされます。 |    ## メッセージのフォーマット   ###  JSON Lines   リクエストメッセージおよびレスポンスメッセージには [JSON lines](http://jsonlines.org/) 形式を使用します。   1つのメッセージが1行です。    例:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   .   .    &#x60;&#x60;&#x60;   注意: メッセージに改行を含むことはできません。   改行が入ったメッセージの例（悪い例）:   &#x60;&#x60;&#x60;   {    \&quot;type\&quot; : \&quot;message_type\&quot;,    \&quot;contents\&quot; : { depends on message_type }  }   &#x60;&#x60;&#x60;    メッセージには、 &#x60;type&#x60; 属性および &#x60;contents&#x60; 属性が必要です。  &#x60;contents&#x60; のスキーマは、 &#x60;type&#x60; により決定されます。   ## ダウンストリーム開始リクエスト   ### ダウンストリーム開始リクエストメッセージのスキーマ   | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 |   | type             | string                   | true       | &#x60;\&quot;open_downstream\&quot;&#x60; | 固定値  |   | contents         | object（次の表を参照）   | true       | -                 |         |    ### ダウンストリーム開始リクエスト内 &#x60;contents&#x60; のスキーマ   | 属性名           | 型                       | 必須       | デフォルト         | 説明   |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- - | - -- -- - |   | edge             | string                   | true       | -                  | データの送信元エッジを、エッジのUUIDまたはエッジの名前で指定します。  最初に、一致するエッジUUIDが検索され、一致するエッジUUIDがなければ一致する名前が検索されます。 |   | filter           | string array             | false      | &#x60;[]&#x60;               | 「フィルター」を参照してください。 |    ### フィルター   データコードとデータ名を指定することにより、指定にマッチしたデータポイントだけを受信することができます。   ただし、メタデータのデータポイントは、フィルターの設定に関係なくすべて受信されます。    フィルターは以下のフォーマットで設定します: &#x60;&lt;型コード&gt;:&lt;データ名&gt;&#x60;   データコードについては、後述の 時系列データのペイロードフォーマット を参照してください。   フィルター設定文字列の各セグメントにはワイルドカード( &#x60;**&#x60; )を使用することができます。    例:   - 型コードが &#x60;can_data_field&#x60; のデータポイント（CAN）を受信する -&gt; &#x60;can_data_field:**&#x60;   - 型コードが &#x60;string/&#x60; で始まるデータポイントを受信する（&#x60;string/json&#x60; 、 &#x60;string/csv&#x60; など） -&gt; &#x60;string/_**:**&#x60;   - 文字列のデータポイントのうち、データ名が &#x60;my-string&#x60; のものを受信する -&gt; &#x60;string:my-string&#x60;    &#x60;filter&#x60; として空の配列が指定された場合は、すべてのデータポイントを受信します。    ### ダウンストリーム開始リクエストの例   リクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;open_downstream\&quot;, \&quot;contents\&quot; : { \&quot;edge\&quot; : \&quot;edge_name_or_uuid\&quot;, \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } }   &#x60;&#x60;&#x60;   レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:    &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;    ## ダウンストリーム更新リクエスト   ### ダウンストリーム更新リクエストメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 |   | type             | string                   | true       | &#x60;\&quot;update_downstream\&quot;&#x60;  | 固定値  |   | contents         | object（次の表を参照）   | true       | -                 |         |    ### ダウンストリーム更新リクエスト内 &#x60;contents&#x60; のスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | filter           | string array             | true       | -                 |「フィルター」を参照してください。 |    ### ダウンストリーム更新リクエストの例   フィルターを指定する場合のリクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } }   &#x60;&#x60;&#x60;    フィルターを指定せずすべてのデータポイントを受信する場合のリクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [] } }   &#x60;&#x60;&#x60;    レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:    &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed:  update downstream\&quot; } }   &#x60;&#x60;&#x60;    ## ダウンストリーム終了リクエスト   ### ダウンストリーム終了リクエストメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。  |   | type             | string                   | true       | &#x60;\&quot;close_downstream\&quot;&#x60; | 固定値|    ### ダウンストリーム終了リクエストの例   リクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;close_downstream\&quot;}   &#x60;&#x60;&#x60;   レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: close downstream\&quot; } }   &#x60;&#x60;&#x60;    ## レスポンスメッセージ   リクエストの処理結果が返却されます。   ### レスポンスメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- |   | type             | string                   | true       | &#x60;\&quot;response\&quot;&#x60;      | 固定値|   | ack              | number                   | false      | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |   | contents         | object（次の表を参照）   | true       | -                 |       |    ### レスポンス内 &#x60;contents&#x60; のスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- |   | code             | number                   | true       | -                 | 10000 &lt; code &lt; 20000 の場合、成功。  20000 &lt; code &lt; 30000 の場合、不正なリクエスト。50000 &lt; code の場合、予期しないエラー |   | message          | string                   | true       | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |    ### レスポンスの例   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;    リクエストで &#x60;id&#x60; が指定されている場合のレスポンス例（ &#x60;id&#x60; の値が &#x60;ack&#x60; として返ります）:    &#x60;&#x60;&#x60;   { \&quot;ack\&quot;: 1, \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;   # 時系列データのペイロードフォーマット   時系列データポイントが格納するペイロードのフォーマットです。各データ型に対する &#x60;contents&#x60;のフォーマットは [このページ](https://git.aptpod.co.jp/intdash-protocol/dataformat/-/tree/master/data) を参照してください。   ## データ型   各データバイナリには、ペイロードのフォーマットを示すデータ型が付与されます。各データ型には、型を識別するためのコード名が割り当てられます。   ## 標準データ型   単一のデータを格納するデータ型です。    |          名称           |  コード   | バイト長 |             説明             |   | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- |   | Bytes     | &#x60;bytes&#x60;   |   可変   | フォーマットなしバイト列     |   | String    | &#x60;string&#x60;  |   可変   | フォーマットなし文字列       |   | Float64   | &#x60;float64&#x60; |    8     | IEEE754 64ビット浮動小数点数 |   | Int64     | &#x60;int64&#x60;   |    8     | 符号付き 64ビット整数        |   | Bool      | &#x60;bool&#x60;    |    1     | 真偽値                       |    ## メディアデータ型   メディア（動画/音声）関連のデータを格納するデータ型です。    |          名称           |    コード    | バイト長 |            説明            |   | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- |   | JPEG | &#x60;video/jpeg&#x60; |   可変   | JPEG 形式の画像データ      |   | H264 | &#x60;video/h264&#x60; |   可変   | H264 形式の映像データ      |    ### 拡張バイナリ型   フォーマット付きのバイナリデータを格納するデータ型です。    |                       名称                        |      コード       | バイト長 |                   説明                    |   | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |   | BSON                                 | &#x60;bson&#x60;            |   可変   | BSON フォーマット                         |   | CAN Frame                            | &#x60;can_frame&#x60;       |   可変   | CAN フレーム フォーマット                 |   | CAN Data Field                       | &#x60;can_data_field&#x60;  |   可変   | CAN データフィールド フォーマット         |   | MAVLink1 Packet                      | &#x60;mavlink1_packet&#x60; |   可変   | MAVLink パケット フォーマット             |   | Generic (非推奨)                     | &#x60;generic&#x60;         |   可変   | iSCPv1互換 汎用フォーマット               |   | Controlpad (非推奨)                  | &#x60;control_pad&#x60;     |   可変   | iSCPv1互換 コントロールパッドフォーマット |   | GeneralSensor (非推奨)               | &#x60;general_sensor&#x60;  |   可変   | iSCPv1互換 汎用センサーフォーマット       |    ### 拡張文字列型   フォーマット付きの文字列データを格納するデータ型です。    |           名称           |    コード     | バイト長 |       説明        |   | :- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- - |   | JSON | &#x60;string/json&#x60;     |   可変   | JSON フォーマット |   | CSV   | &#x60;string/csv&#x60;     |   可変   | CSV フォーマット  |   | NMEA | &#x60;string/nmea&#x60;     |   可変   | NMEA フォーマット |
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task StreamAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await StreamWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Realtime Streaming Data （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/stream&#x60; を使用してください）  WebSocketを使ってリアルタイムデータを取得します。    同じくWebSocketを使ってリアルタイムデータを扱う &#x60;/v1/ws/measurements&#x60; では、  iSCP (intdash Stream Control Protocol)を使用しますが、  本エンドポイントではJSONとしてデータポイントを取得することができます。   ## クエリパラメータ    | パラメータ名     | 型                         | 必須       | デフォルト | 説明  |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- - | - -- -- |   | flush_interval   | string                     | true       | -          |  メッセージがフラッシュされる間隔を指定します。  単位は\&quot;ns\&quot;、\&quot;us\&quot; (または\&quot;µs\&quot;)、\&quot;ms\&quot;、\&quot;s\&quot;、\&quot;m\&quot;、\&quot;h\&quot;のいずれかを使用してください  （参考: [Goのtimeパッケージ](https://golang.org/pkg/time/#ParseDuration)）。  指定がない場合は、メッセージごとにフラッシュされます。 |    ## メッセージのフォーマット   ###  JSON Lines   リクエストメッセージおよびレスポンスメッセージには [JSON lines](http://jsonlines.org/) 形式を使用します。   1つのメッセージが1行です。    例:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   { \&quot;type\&quot; : \&quot;message_type\&quot;, \&quot;contents\&quot; : { depends on message_type }}   .   .    &#x60;&#x60;&#x60;   注意: メッセージに改行を含むことはできません。   改行が入ったメッセージの例（悪い例）:   &#x60;&#x60;&#x60;   {    \&quot;type\&quot; : \&quot;message_type\&quot;,    \&quot;contents\&quot; : { depends on message_type }  }   &#x60;&#x60;&#x60;    メッセージには、 &#x60;type&#x60; 属性および &#x60;contents&#x60; 属性が必要です。  &#x60;contents&#x60; のスキーマは、 &#x60;type&#x60; により決定されます。   ## ダウンストリーム開始リクエスト   ### ダウンストリーム開始リクエストメッセージのスキーマ   | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 |   | type             | string                   | true       | &#x60;\&quot;open_downstream\&quot;&#x60; | 固定値  |   | contents         | object（次の表を参照）   | true       | -                 |         |    ### ダウンストリーム開始リクエスト内 &#x60;contents&#x60; のスキーマ   | 属性名           | 型                       | 必須       | デフォルト         | 説明   |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- - | - -- -- - |   | edge             | string                   | true       | -                  | データの送信元エッジを、エッジのUUIDまたはエッジの名前で指定します。  最初に、一致するエッジUUIDが検索され、一致するエッジUUIDがなければ一致する名前が検索されます。 |   | filter           | string array             | false      | &#x60;[]&#x60;               | 「フィルター」を参照してください。 |    ### フィルター   データコードとデータ名を指定することにより、指定にマッチしたデータポイントだけを受信することができます。   ただし、メタデータのデータポイントは、フィルターの設定に関係なくすべて受信されます。    フィルターは以下のフォーマットで設定します: &#x60;&lt;型コード&gt;:&lt;データ名&gt;&#x60;   データコードについては、後述の 時系列データのペイロードフォーマット を参照してください。   フィルター設定文字列の各セグメントにはワイルドカード( &#x60;**&#x60; )を使用することができます。    例:   - 型コードが &#x60;can_data_field&#x60; のデータポイント（CAN）を受信する -&gt; &#x60;can_data_field:**&#x60;   - 型コードが &#x60;string/&#x60; で始まるデータポイントを受信する（&#x60;string/json&#x60; 、 &#x60;string/csv&#x60; など） -&gt; &#x60;string/_**:**&#x60;   - 文字列のデータポイントのうち、データ名が &#x60;my-string&#x60; のものを受信する -&gt; &#x60;string:my-string&#x60;    &#x60;filter&#x60; として空の配列が指定された場合は、すべてのデータポイントを受信します。    ### ダウンストリーム開始リクエストの例   リクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;open_downstream\&quot;, \&quot;contents\&quot; : { \&quot;edge\&quot; : \&quot;edge_name_or_uuid\&quot;, \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } }   &#x60;&#x60;&#x60;   レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:    &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;    ## ダウンストリーム更新リクエスト   ### ダウンストリーム更新リクエストメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。 |   | type             | string                   | true       | &#x60;\&quot;update_downstream\&quot;&#x60;  | 固定値  |   | contents         | object（次の表を参照）   | true       | -                 |         |    ### ダウンストリーム更新リクエスト内 &#x60;contents&#x60; のスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | filter           | string array             | true       | -                 |「フィルター」を参照してください。 |    ### ダウンストリーム更新リクエストの例   フィルターを指定する場合のリクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [\&quot;string:a/b\&quot;] } }   &#x60;&#x60;&#x60;    フィルターを指定せずすべてのデータポイントを受信する場合のリクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;update_downstream\&quot;, \&quot;contents\&quot; : { \&quot;filter\&quot; : [] } }   &#x60;&#x60;&#x60;    レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:    &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed:  update downstream\&quot; } }   &#x60;&#x60;&#x60;    ## ダウンストリーム終了リクエスト   ### ダウンストリーム終了リクエストメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- -- |   | id               | number                   | false      | -                 | idに指定した値は、レスポンスの &#x60;ack&#x60; 属性として返ります。  |   | type             | string                   | true       | &#x60;\&quot;close_downstream\&quot;&#x60; | 固定値|    ### ダウンストリーム終了リクエストの例   リクエスト:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;close_downstream\&quot;}   &#x60;&#x60;&#x60;   レスポンス（レスポンスの詳細については、「レスポンス」を参照してください）:   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: close downstream\&quot; } }   &#x60;&#x60;&#x60;    ## レスポンスメッセージ   リクエストの処理結果が返却されます。   ### レスポンスメッセージのスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- |   | type             | string                   | true       | &#x60;\&quot;response\&quot;&#x60;      | 固定値|   | ack              | number                   | false      | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |   | contents         | object（次の表を参照）   | true       | -                 |       |    ### レスポンス内 &#x60;contents&#x60; のスキーマ    | 属性名           | 型                       | 必須       | デフォルト        | 説明    |   | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- - | - -- -- -- -- -- -- -- -- | - -- -- |   | code             | number                   | true       | -                 | 10000 &lt; code &lt; 20000 の場合、成功。  20000 &lt; code &lt; 30000 の場合、不正なリクエスト。50000 &lt; code の場合、予期しないエラー |   | message          | string                   | true       | -                 | リクエストで &#x60;id&#x60; が指定されていた場合、その値 |    ### レスポンスの例   &#x60;&#x60;&#x60;   { \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;    リクエストで &#x60;id&#x60; が指定されている場合のレスポンス例（ &#x60;id&#x60; の値が &#x60;ack&#x60; として返ります）:    &#x60;&#x60;&#x60;   { \&quot;ack\&quot;: 1, \&quot;type\&quot; : \&quot;response\&quot;, \&quot;contents\&quot;: { \&quot;code\&quot; : 10000, \&quot;message\&quot;: \&quot;succeed: open downstream\&quot; } }   &#x60;&#x60;&#x60;   # 時系列データのペイロードフォーマット   時系列データポイントが格納するペイロードのフォーマットです。各データ型に対する &#x60;contents&#x60;のフォーマットは [このページ](https://git.aptpod.co.jp/intdash-protocol/dataformat/-/tree/master/data) を参照してください。   ## データ型   各データバイナリには、ペイロードのフォーマットを示すデータ型が付与されます。各データ型には、型を識別するためのコード名が割り当てられます。   ## 標準データ型   単一のデータを格納するデータ型です。    |          名称           |  コード   | バイト長 |             説明             |   | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- |   | Bytes     | &#x60;bytes&#x60;   |   可変   | フォーマットなしバイト列     |   | String    | &#x60;string&#x60;  |   可変   | フォーマットなし文字列       |   | Float64   | &#x60;float64&#x60; |    8     | IEEE754 64ビット浮動小数点数 |   | Int64     | &#x60;int64&#x60;   |    8     | 符号付き 64ビット整数        |   | Bool      | &#x60;bool&#x60;    |    1     | 真偽値                       |    ## メディアデータ型   メディア（動画/音声）関連のデータを格納するデータ型です。    |          名称           |    コード    | バイト長 |            説明            |   | :- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- |   | JPEG | &#x60;video/jpeg&#x60; |   可変   | JPEG 形式の画像データ      |   | H264 | &#x60;video/h264&#x60; |   可変   | H264 形式の映像データ      |    ### 拡張バイナリ型   フォーマット付きのバイナリデータを格納するデータ型です。    |                       名称                        |      コード       | バイト長 |                   説明                    |   | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |   | BSON                                 | &#x60;bson&#x60;            |   可変   | BSON フォーマット                         |   | CAN Frame                            | &#x60;can_frame&#x60;       |   可変   | CAN フレーム フォーマット                 |   | CAN Data Field                       | &#x60;can_data_field&#x60;  |   可変   | CAN データフィールド フォーマット         |   | MAVLink1 Packet                      | &#x60;mavlink1_packet&#x60; |   可変   | MAVLink パケット フォーマット             |   | Generic (非推奨)                     | &#x60;generic&#x60;         |   可変   | iSCPv1互換 汎用フォーマット               |   | Controlpad (非推奨)                  | &#x60;control_pad&#x60;     |   可変   | iSCPv1互換 コントロールパッドフォーマット |   | GeneralSensor (非推奨)               | &#x60;general_sensor&#x60;  |   可変   | iSCPv1互換 汎用センサーフォーマット       |    ### 拡張文字列型   フォーマット付きの文字列データを格納するデータ型です。    |           名称           |    コード     | バイト長 |       説明        |   | :- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- - | :- -- -- -: | :- -- -- -- -- -- -- -- - |   | JSON | &#x60;string/json&#x60;     |   可変   | JSON フォーマット |   | CSV   | &#x60;string/csv&#x60;     |   可変   | CSV フォーマット  |   | NMEA | &#x60;string/nmea&#x60;     |   可変   | NMEA フォーマット |
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> StreamWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/stream", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Stream", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
