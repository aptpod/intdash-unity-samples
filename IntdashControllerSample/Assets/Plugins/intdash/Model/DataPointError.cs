/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = intdash.Client.FileParameter;
using OpenAPIDateConverter = intdash.Client.OpenAPIDateConverter;

namespace intdash.Model
{
    /// <summary>
    /// DataPointError
    /// </summary>
    [DataContract(Name = "DataPointError")]
    public partial class DataPointError : IEquatable<DataPointError>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataPointError" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DataPointError() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataPointError" /> class.
        /// </summary>
        /// <param name="time">time (required).</param>
        /// <param name="measurementUuid">このデータポイントが含まれる計測のUUID (required).</param>
        /// <param name="createdAt">このデータポイントが作成された日時 (required).</param>
        /// <param name="dataType">データタイプ (required).</param>
        /// <param name="dataId">エラーが発生した場合、 &#x60;&lt;channel&gt;/intdash/measurement/get/data/error&#x60; (required).</param>
        /// <param name="data">data (required).</param>
        public DataPointError(DataPointTime time = default(DataPointTime), string measurementUuid = default(string), string createdAt = default(string), string dataType = default(string), string dataId = default(string), DataPointDataError data = default(DataPointDataError))
        {
            // to ensure "time" is required (not null)
            if (time == null)
            {
                throw new ArgumentNullException("time is a required property for DataPointError and cannot be null");
            }
            this.Time = time;
            // to ensure "measurementUuid" is required (not null)
            if (measurementUuid == null)
            {
                throw new ArgumentNullException("measurementUuid is a required property for DataPointError and cannot be null");
            }
            this.MeasurementUuid = measurementUuid;
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new ArgumentNullException("createdAt is a required property for DataPointError and cannot be null");
            }
            this.CreatedAt = createdAt;
            // to ensure "dataType" is required (not null)
            if (dataType == null)
            {
                throw new ArgumentNullException("dataType is a required property for DataPointError and cannot be null");
            }
            this.DataType = dataType;
            // to ensure "dataId" is required (not null)
            if (dataId == null)
            {
                throw new ArgumentNullException("dataId is a required property for DataPointError and cannot be null");
            }
            this.DataId = dataId;
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new ArgumentNullException("data is a required property for DataPointError and cannot be null");
            }
            this.Data = data;
        }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name = "time", IsRequired = true, EmitDefaultValue = true)]
        public DataPointTime Time { get; set; }

        /// <summary>
        /// このデータポイントが含まれる計測のUUID
        /// </summary>
        /// <value>このデータポイントが含まれる計測のUUID</value>
        [DataMember(Name = "measurement_uuid", IsRequired = true, EmitDefaultValue = true)]
        public string MeasurementUuid { get; set; }

        /// <summary>
        /// このデータポイントが作成された日時
        /// </summary>
        /// <value>このデータポイントが作成された日時</value>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// データタイプ
        /// </summary>
        /// <value>データタイプ</value>
        [DataMember(Name = "data_type", IsRequired = true, EmitDefaultValue = true)]
        public string DataType { get; set; }

        /// <summary>
        /// エラーが発生した場合、 &#x60;&lt;channel&gt;/intdash/measurement/get/data/error&#x60;
        /// </summary>
        /// <value>エラーが発生した場合、 &#x60;&lt;channel&gt;/intdash/measurement/get/data/error&#x60;</value>
        [DataMember(Name = "data_id", IsRequired = true, EmitDefaultValue = true)]
        public string DataId { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", IsRequired = true, EmitDefaultValue = true)]
        public DataPointDataError Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataPointError {\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  MeasurementUuid: ").Append(MeasurementUuid).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  DataId: ").Append(DataId).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataPointError);
        }

        /// <summary>
        /// Returns true if DataPointError instances are equal
        /// </summary>
        /// <param name="input">Instance of DataPointError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataPointError input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.MeasurementUuid == input.MeasurementUuid ||
                    (this.MeasurementUuid != null &&
                    this.MeasurementUuid.Equals(input.MeasurementUuid))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                ) && 
                (
                    this.DataId == input.DataId ||
                    (this.DataId != null &&
                    this.DataId.Equals(input.DataId))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Time != null)
                {
                    hashCode = (hashCode * 59) + this.Time.GetHashCode();
                }
                if (this.MeasurementUuid != null)
                {
                    hashCode = (hashCode * 59) + this.MeasurementUuid.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.DataType != null)
                {
                    hashCode = (hashCode * 59) + this.DataType.GetHashCode();
                }
                if (this.DataId != null)
                {
                    hashCode = (hashCode * 59) + this.DataId.GetHashCode();
                }
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
