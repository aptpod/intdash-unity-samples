/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = intdash.Client.FileParameter;
using OpenAPIDateConverter = intdash.Client.OpenAPIDateConverter;

namespace intdash.Model
{
    /// <summary>
    /// AuthPage
    /// </summary>
    [DataContract(Name = "AuthPage")]
    public partial class AuthPage : IEquatable<AuthPage>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthPage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthPage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthPage" /> class.
        /// </summary>
        /// <param name="next">次のページがあるかどうか (required).</param>
        /// <param name="prev">前のページがあるかどうか (required).</param>
        /// <param name="nextPage">取得対象の次のページ番号。&#x60;next&#x60; がtrueの場合のみ表示。.</param>
        /// <param name="prevPage">取得対象の前のページ番号。&#x60;next&#x60; がtrueの場合のみ表示。.</param>
        /// <param name="totalPage">取得対象の総ページ数 (required).</param>
        /// <param name="totalCount">取得対象の総件数 (required).</param>
        public AuthPage(bool next = default(bool), bool prev = default(bool), long nextPage = default(long), long prevPage = default(long), long totalPage = default(long), long totalCount = default(long))
        {
            this.Next = next;
            this.Prev = prev;
            this.TotalPage = totalPage;
            this.TotalCount = totalCount;
            this.NextPage = nextPage;
            this.PrevPage = prevPage;
        }

        /// <summary>
        /// 次のページがあるかどうか
        /// </summary>
        /// <value>次のページがあるかどうか</value>
        [DataMember(Name = "next", IsRequired = true, EmitDefaultValue = true)]
        public bool Next { get; set; }

        /// <summary>
        /// 前のページがあるかどうか
        /// </summary>
        /// <value>前のページがあるかどうか</value>
        [DataMember(Name = "prev", IsRequired = true, EmitDefaultValue = true)]
        public bool Prev { get; set; }

        /// <summary>
        /// 取得対象の次のページ番号。&#x60;next&#x60; がtrueの場合のみ表示。
        /// </summary>
        /// <value>取得対象の次のページ番号。&#x60;next&#x60; がtrueの場合のみ表示。</value>
        [DataMember(Name = "next_page", EmitDefaultValue = false)]
        public long NextPage { get; set; }

        /// <summary>
        /// 取得対象の前のページ番号。&#x60;next&#x60; がtrueの場合のみ表示。
        /// </summary>
        /// <value>取得対象の前のページ番号。&#x60;next&#x60; がtrueの場合のみ表示。</value>
        [DataMember(Name = "prev_page", EmitDefaultValue = false)]
        public long PrevPage { get; set; }

        /// <summary>
        /// 取得対象の総ページ数
        /// </summary>
        /// <value>取得対象の総ページ数</value>
        [DataMember(Name = "total_page", IsRequired = true, EmitDefaultValue = true)]
        public long TotalPage { get; set; }

        /// <summary>
        /// 取得対象の総件数
        /// </summary>
        /// <value>取得対象の総件数</value>
        [DataMember(Name = "total_count", IsRequired = true, EmitDefaultValue = true)]
        public long TotalCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthPage {\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Prev: ").Append(Prev).Append("\n");
            sb.Append("  NextPage: ").Append(NextPage).Append("\n");
            sb.Append("  PrevPage: ").Append(PrevPage).Append("\n");
            sb.Append("  TotalPage: ").Append(TotalPage).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthPage);
        }

        /// <summary>
        /// Returns true if AuthPage instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthPage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthPage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Next == input.Next ||
                    this.Next.Equals(input.Next)
                ) && 
                (
                    this.Prev == input.Prev ||
                    this.Prev.Equals(input.Prev)
                ) && 
                (
                    this.NextPage == input.NextPage ||
                    this.NextPage.Equals(input.NextPage)
                ) && 
                (
                    this.PrevPage == input.PrevPage ||
                    this.PrevPage.Equals(input.PrevPage)
                ) && 
                (
                    this.TotalPage == input.TotalPage ||
                    this.TotalPage.Equals(input.TotalPage)
                ) && 
                (
                    this.TotalCount == input.TotalCount ||
                    this.TotalCount.Equals(input.TotalCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Next.GetHashCode();
                hashCode = (hashCode * 59) + this.Prev.GetHashCode();
                hashCode = (hashCode * 59) + this.NextPage.GetHashCode();
                hashCode = (hashCode * 59) + this.PrevPage.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalPage.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalCount.GetHashCode();
                return hashCode;
            }
        }

    }

}
