/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = intdash.Client.FileParameter;
using OpenAPIDateConverter = intdash.Client.OpenAPIDateConverter;

namespace intdash.Model
{
    /// <summary>
    /// UpdateSignalRequest
    /// </summary>
    [DataContract(Name = "UpdateSignalRequest")]
    public partial class UpdateSignalRequest : IEquatable<UpdateSignalRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSignalRequest" /> class.
        /// </summary>
        /// <param name="channel">チャンネル.</param>
        /// <param name="conversion">conversion.</param>
        /// <param name="dataId">データID.</param>
        /// <param name="dataType">データタイプ.</param>
        /// <param name="description">信号定義の説明.</param>
        /// <param name="display">display.</param>
        /// <param name="label">信号定義のラベル.</param>
        public UpdateSignalRequest(int channel = default(int), SignalConversion conversion = default(SignalConversion), string dataId = default(string), int dataType = default(int), string description = default(string), SignalDisplay display = default(SignalDisplay), string label = default(string))
        {
            this.Channel = channel;
            this.Conversion = conversion;
            this.DataId = dataId;
            this.DataType = dataType;
            this.Description = description;
            this.Display = display;
            this.Label = label;
        }

        /// <summary>
        /// チャンネル
        /// </summary>
        /// <value>チャンネル</value>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public int Channel { get; set; }

        /// <summary>
        /// Gets or Sets Conversion
        /// </summary>
        [DataMember(Name = "conversion", EmitDefaultValue = false)]
        public SignalConversion Conversion { get; set; }

        /// <summary>
        /// データID
        /// </summary>
        /// <value>データID</value>
        [DataMember(Name = "data_id", EmitDefaultValue = false)]
        public string DataId { get; set; }

        /// <summary>
        /// データタイプ
        /// </summary>
        /// <value>データタイプ</value>
        [DataMember(Name = "data_type", EmitDefaultValue = false)]
        public int DataType { get; set; }

        /// <summary>
        /// 信号定義の説明
        /// </summary>
        /// <value>信号定義の説明</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Display
        /// </summary>
        [DataMember(Name = "display", EmitDefaultValue = false)]
        public SignalDisplay Display { get; set; }

        /// <summary>
        /// 信号定義のラベル
        /// </summary>
        /// <value>信号定義のラベル</value>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateSignalRequest {\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Conversion: ").Append(Conversion).Append("\n");
            sb.Append("  DataId: ").Append(DataId).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateSignalRequest);
        }

        /// <summary>
        /// Returns true if UpdateSignalRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateSignalRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateSignalRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Channel == input.Channel ||
                    this.Channel.Equals(input.Channel)
                ) && 
                (
                    this.Conversion == input.Conversion ||
                    (this.Conversion != null &&
                    this.Conversion.Equals(input.Conversion))
                ) && 
                (
                    this.DataId == input.DataId ||
                    (this.DataId != null &&
                    this.DataId.Equals(input.DataId))
                ) && 
                (
                    this.DataType == input.DataType ||
                    this.DataType.Equals(input.DataType)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Display == input.Display ||
                    (this.Display != null &&
                    this.Display.Equals(input.Display))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Channel.GetHashCode();
                if (this.Conversion != null)
                {
                    hashCode = (hashCode * 59) + this.Conversion.GetHashCode();
                }
                if (this.DataId != null)
                {
                    hashCode = (hashCode * 59) + this.DataId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DataType.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Display != null)
                {
                    hashCode = (hashCode * 59) + this.Display.GetHashCode();
                }
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
