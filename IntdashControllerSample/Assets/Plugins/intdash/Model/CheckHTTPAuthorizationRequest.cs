/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = intdash.Client.FileParameter;
using OpenAPIDateConverter = intdash.Client.OpenAPIDateConverter;

namespace intdash.Model
{
    /// <summary>
    /// アクセス制御可能かどうかを判定します。 ###  サブジェクト指定なしの場合 リクエストのスコープのみでアクセス判定を行います。 ###  サブジェクト指定ありの場合 パスを分類し、分類した結果によって処理が変わります。 ####  パスがプロジェクトコンテキストの場合 サブジェクトがプロジェクトに所属しているかを確認し、所属している場合は、サブジェクトがメンバーの場合そのプロジェクトにおけるスコープからアクセス判定を行います。サブジェクトがエッジの場合はリクエストのスコープからアクセス判定を行います。  ###  パスがグループコンテキストの場合 サブジェクトがプロジェクトに所属しているかを確認し、所属している場合は、そのプロジェクトにおけるスコープからアクセス判定を行います。 ###  パスがその他の場合 リクエストのスコープからアクセス判定を行います。
    /// </summary>
    [DataContract(Name = "CheckHTTPAuthorizationRequest")]
    public partial class CheckHTTPAuthorizationRequest : IEquatable<CheckHTTPAuthorizationRequest>
    {
        /// <summary>
        /// Defines Method
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            /// <summary>
            /// Enum GET for value: GET
            /// </summary>
            [EnumMember(Value = "GET")]
            GET = 1,

            /// <summary>
            /// Enum POST for value: POST
            /// </summary>
            [EnumMember(Value = "POST")]
            POST = 2,

            /// <summary>
            /// Enum PUT for value: PUT
            /// </summary>
            [EnumMember(Value = "PUT")]
            PUT = 3,

            /// <summary>
            /// Enum PATCH for value: PATCH
            /// </summary>
            [EnumMember(Value = "PATCH")]
            PATCH = 4,

            /// <summary>
            /// Enum DELETE for value: DELETE
            /// </summary>
            [EnumMember(Value = "DELETE")]
            DELETE = 5

        }


        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name = "method", IsRequired = true, EmitDefaultValue = true)]
        public MethodEnum Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckHTTPAuthorizationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CheckHTTPAuthorizationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckHTTPAuthorizationRequest" /> class.
        /// </summary>
        /// <param name="subject">認証主体を指定します。通常アクセスユーザーのUUIDかアクセスエッジのUUIDを指定します。.</param>
        /// <param name="scopes">スコープを指定します。前述の説明を参照ください。 (required).</param>
        /// <param name="path">path (required).</param>
        /// <param name="method">method (required).</param>
        public CheckHTTPAuthorizationRequest(string subject = default(string), List<string> scopes = default(List<string>), string path = default(string), MethodEnum method = default(MethodEnum))
        {
            // to ensure "scopes" is required (not null)
            if (scopes == null)
            {
                throw new ArgumentNullException("scopes is a required property for CheckHTTPAuthorizationRequest and cannot be null");
            }
            this.Scopes = scopes;
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new ArgumentNullException("path is a required property for CheckHTTPAuthorizationRequest and cannot be null");
            }
            this.Path = path;
            this.Method = method;
            this.Subject = subject;
        }

        /// <summary>
        /// 認証主体を指定します。通常アクセスユーザーのUUIDかアクセスエッジのUUIDを指定します。
        /// </summary>
        /// <value>認証主体を指定します。通常アクセスユーザーのUUIDかアクセスエッジのUUIDを指定します。</value>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// スコープを指定します。前述の説明を参照ください。
        /// </summary>
        /// <value>スコープを指定します。前述の説明を参照ください。</value>
        [DataMember(Name = "scopes", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Scopes { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckHTTPAuthorizationRequest {\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckHTTPAuthorizationRequest);
        }

        /// <summary>
        /// Returns true if CheckHTTPAuthorizationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckHTTPAuthorizationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckHTTPAuthorizationRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Scopes == input.Scopes ||
                    this.Scopes != null &&
                    input.Scopes != null &&
                    this.Scopes.SequenceEqual(input.Scopes)
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Method == input.Method ||
                    this.Method.Equals(input.Method)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                if (this.Scopes != null)
                {
                    hashCode = (hashCode * 59) + this.Scopes.GetHashCode();
                }
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Method.GetHashCode();
                return hashCode;
            }
        }

    }

}
