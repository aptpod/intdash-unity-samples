/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = intdash.Client.FileParameter;
using OpenAPIDateConverter = intdash.Client.OpenAPIDateConverter;

namespace intdash.Model
{
    /// <summary>
    /// See [JSON Web Key (JWK)](https://datatracker.ietf.org/doc/html/rfc7517)
    /// </summary>
    [DataContract(Name = "JSONWebKey")]
    public partial class JSONWebKey : IEquatable<JSONWebKey>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JSONWebKey" /> class.
        /// </summary>
        /// <param name="use">use.</param>
        /// <param name="kty">kty.</param>
        /// <param name="kid">kid.</param>
        /// <param name="crv">crv.</param>
        /// <param name="alg">alg.</param>
        /// <param name="k">k.</param>
        /// <param name="x">x.</param>
        /// <param name="y">y.</param>
        /// <param name="n">n.</param>
        /// <param name="e">e.</param>
        /// <param name="d">d.</param>
        /// <param name="p">p.</param>
        /// <param name="q">q.</param>
        /// <param name="dp">dp.</param>
        /// <param name="dq">dq.</param>
        /// <param name="qi">qi.</param>
        /// <param name="x5c">x5c.</param>
        /// <param name="x5u">x5u.</param>
        /// <param name="x5t">x5t.</param>
        /// <param name="x5tS256">x5tS256.</param>
        public JSONWebKey(string use = default(string), string kty = default(string), string kid = default(string), string crv = default(string), string alg = default(string), byte[] k = default(byte[]), byte[] x = default(byte[]), byte[] y = default(byte[]), byte[] n = default(byte[]), byte[] e = default(byte[]), byte[] d = default(byte[]), byte[] p = default(byte[]), byte[] q = default(byte[]), byte[] dp = default(byte[]), byte[] dq = default(byte[]), byte[] qi = default(byte[]), List<string> x5c = default(List<string>), string x5u = default(string), string x5t = default(string), string x5tS256 = default(string))
        {
            this.Use = use;
            this.Kty = kty;
            this.Kid = kid;
            this.Crv = crv;
            this.Alg = alg;
            this.K = k;
            this.X = x;
            this.Y = y;
            this.N = n;
            this.E = e;
            this.D = d;
            this.P = p;
            this.Q = q;
            this.Dp = dp;
            this.Dq = dq;
            this.Qi = qi;
            this.X5c = x5c;
            this.X5u = x5u;
            this.X5t = x5t;
            this.X5tS256 = x5tS256;
        }

        /// <summary>
        /// Gets or Sets Use
        /// </summary>
        [DataMember(Name = "use", EmitDefaultValue = false)]
        public string Use { get; set; }

        /// <summary>
        /// Gets or Sets Kty
        /// </summary>
        [DataMember(Name = "kty", EmitDefaultValue = false)]
        public string Kty { get; set; }

        /// <summary>
        /// Gets or Sets Kid
        /// </summary>
        [DataMember(Name = "kid", EmitDefaultValue = false)]
        public string Kid { get; set; }

        /// <summary>
        /// Gets or Sets Crv
        /// </summary>
        [DataMember(Name = "crv", EmitDefaultValue = false)]
        public string Crv { get; set; }

        /// <summary>
        /// Gets or Sets Alg
        /// </summary>
        [DataMember(Name = "alg", EmitDefaultValue = false)]
        public string Alg { get; set; }

        /// <summary>
        /// Gets or Sets K
        /// </summary>
        [DataMember(Name = "k", EmitDefaultValue = false)]
        public byte[] K { get; set; }

        /// <summary>
        /// Gets or Sets X
        /// </summary>
        [DataMember(Name = "x", EmitDefaultValue = false)]
        public byte[] X { get; set; }

        /// <summary>
        /// Gets or Sets Y
        /// </summary>
        [DataMember(Name = "y", EmitDefaultValue = false)]
        public byte[] Y { get; set; }

        /// <summary>
        /// Gets or Sets N
        /// </summary>
        [DataMember(Name = "n", EmitDefaultValue = false)]
        public byte[] N { get; set; }

        /// <summary>
        /// Gets or Sets E
        /// </summary>
        [DataMember(Name = "e", EmitDefaultValue = false)]
        public byte[] E { get; set; }

        /// <summary>
        /// Gets or Sets D
        /// </summary>
        [DataMember(Name = "d", EmitDefaultValue = false)]
        public byte[] D { get; set; }

        /// <summary>
        /// Gets or Sets P
        /// </summary>
        [DataMember(Name = "p", EmitDefaultValue = false)]
        public byte[] P { get; set; }

        /// <summary>
        /// Gets or Sets Q
        /// </summary>
        [DataMember(Name = "q", EmitDefaultValue = false)]
        public byte[] Q { get; set; }

        /// <summary>
        /// Gets or Sets Dp
        /// </summary>
        [DataMember(Name = "dp", EmitDefaultValue = false)]
        public byte[] Dp { get; set; }

        /// <summary>
        /// Gets or Sets Dq
        /// </summary>
        [DataMember(Name = "dq", EmitDefaultValue = false)]
        public byte[] Dq { get; set; }

        /// <summary>
        /// Gets or Sets Qi
        /// </summary>
        [DataMember(Name = "qi", EmitDefaultValue = false)]
        public byte[] Qi { get; set; }

        /// <summary>
        /// Gets or Sets X5c
        /// </summary>
        [DataMember(Name = "x5c", EmitDefaultValue = false)]
        public List<string> X5c { get; set; }

        /// <summary>
        /// Gets or Sets X5u
        /// </summary>
        [DataMember(Name = "x5u", EmitDefaultValue = false)]
        public string X5u { get; set; }

        /// <summary>
        /// Gets or Sets X5t
        /// </summary>
        [DataMember(Name = "x5t", EmitDefaultValue = false)]
        public string X5t { get; set; }

        /// <summary>
        /// Gets or Sets X5tS256
        /// </summary>
        [DataMember(Name = "x5t#S256", EmitDefaultValue = false)]
        public string X5tS256 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JSONWebKey {\n");
            sb.Append("  Use: ").Append(Use).Append("\n");
            sb.Append("  Kty: ").Append(Kty).Append("\n");
            sb.Append("  Kid: ").Append(Kid).Append("\n");
            sb.Append("  Crv: ").Append(Crv).Append("\n");
            sb.Append("  Alg: ").Append(Alg).Append("\n");
            sb.Append("  K: ").Append(K).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  N: ").Append(N).Append("\n");
            sb.Append("  E: ").Append(E).Append("\n");
            sb.Append("  D: ").Append(D).Append("\n");
            sb.Append("  P: ").Append(P).Append("\n");
            sb.Append("  Q: ").Append(Q).Append("\n");
            sb.Append("  Dp: ").Append(Dp).Append("\n");
            sb.Append("  Dq: ").Append(Dq).Append("\n");
            sb.Append("  Qi: ").Append(Qi).Append("\n");
            sb.Append("  X5c: ").Append(X5c).Append("\n");
            sb.Append("  X5u: ").Append(X5u).Append("\n");
            sb.Append("  X5t: ").Append(X5t).Append("\n");
            sb.Append("  X5tS256: ").Append(X5tS256).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JSONWebKey);
        }

        /// <summary>
        /// Returns true if JSONWebKey instances are equal
        /// </summary>
        /// <param name="input">Instance of JSONWebKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JSONWebKey input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Use == input.Use ||
                    (this.Use != null &&
                    this.Use.Equals(input.Use))
                ) && 
                (
                    this.Kty == input.Kty ||
                    (this.Kty != null &&
                    this.Kty.Equals(input.Kty))
                ) && 
                (
                    this.Kid == input.Kid ||
                    (this.Kid != null &&
                    this.Kid.Equals(input.Kid))
                ) && 
                (
                    this.Crv == input.Crv ||
                    (this.Crv != null &&
                    this.Crv.Equals(input.Crv))
                ) && 
                (
                    this.Alg == input.Alg ||
                    (this.Alg != null &&
                    this.Alg.Equals(input.Alg))
                ) && 
                (
                    this.K == input.K ||
                    (this.K != null &&
                    this.K.Equals(input.K))
                ) && 
                (
                    this.X == input.X ||
                    (this.X != null &&
                    this.X.Equals(input.X))
                ) && 
                (
                    this.Y == input.Y ||
                    (this.Y != null &&
                    this.Y.Equals(input.Y))
                ) && 
                (
                    this.N == input.N ||
                    (this.N != null &&
                    this.N.Equals(input.N))
                ) && 
                (
                    this.E == input.E ||
                    (this.E != null &&
                    this.E.Equals(input.E))
                ) && 
                (
                    this.D == input.D ||
                    (this.D != null &&
                    this.D.Equals(input.D))
                ) && 
                (
                    this.P == input.P ||
                    (this.P != null &&
                    this.P.Equals(input.P))
                ) && 
                (
                    this.Q == input.Q ||
                    (this.Q != null &&
                    this.Q.Equals(input.Q))
                ) && 
                (
                    this.Dp == input.Dp ||
                    (this.Dp != null &&
                    this.Dp.Equals(input.Dp))
                ) && 
                (
                    this.Dq == input.Dq ||
                    (this.Dq != null &&
                    this.Dq.Equals(input.Dq))
                ) && 
                (
                    this.Qi == input.Qi ||
                    (this.Qi != null &&
                    this.Qi.Equals(input.Qi))
                ) && 
                (
                    this.X5c == input.X5c ||
                    this.X5c != null &&
                    input.X5c != null &&
                    this.X5c.SequenceEqual(input.X5c)
                ) && 
                (
                    this.X5u == input.X5u ||
                    (this.X5u != null &&
                    this.X5u.Equals(input.X5u))
                ) && 
                (
                    this.X5t == input.X5t ||
                    (this.X5t != null &&
                    this.X5t.Equals(input.X5t))
                ) && 
                (
                    this.X5tS256 == input.X5tS256 ||
                    (this.X5tS256 != null &&
                    this.X5tS256.Equals(input.X5tS256))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Use != null)
                {
                    hashCode = (hashCode * 59) + this.Use.GetHashCode();
                }
                if (this.Kty != null)
                {
                    hashCode = (hashCode * 59) + this.Kty.GetHashCode();
                }
                if (this.Kid != null)
                {
                    hashCode = (hashCode * 59) + this.Kid.GetHashCode();
                }
                if (this.Crv != null)
                {
                    hashCode = (hashCode * 59) + this.Crv.GetHashCode();
                }
                if (this.Alg != null)
                {
                    hashCode = (hashCode * 59) + this.Alg.GetHashCode();
                }
                if (this.K != null)
                {
                    hashCode = (hashCode * 59) + this.K.GetHashCode();
                }
                if (this.X != null)
                {
                    hashCode = (hashCode * 59) + this.X.GetHashCode();
                }
                if (this.Y != null)
                {
                    hashCode = (hashCode * 59) + this.Y.GetHashCode();
                }
                if (this.N != null)
                {
                    hashCode = (hashCode * 59) + this.N.GetHashCode();
                }
                if (this.E != null)
                {
                    hashCode = (hashCode * 59) + this.E.GetHashCode();
                }
                if (this.D != null)
                {
                    hashCode = (hashCode * 59) + this.D.GetHashCode();
                }
                if (this.P != null)
                {
                    hashCode = (hashCode * 59) + this.P.GetHashCode();
                }
                if (this.Q != null)
                {
                    hashCode = (hashCode * 59) + this.Q.GetHashCode();
                }
                if (this.Dp != null)
                {
                    hashCode = (hashCode * 59) + this.Dp.GetHashCode();
                }
                if (this.Dq != null)
                {
                    hashCode = (hashCode * 59) + this.Dq.GetHashCode();
                }
                if (this.Qi != null)
                {
                    hashCode = (hashCode * 59) + this.Qi.GetHashCode();
                }
                if (this.X5c != null)
                {
                    hashCode = (hashCode * 59) + this.X5c.GetHashCode();
                }
                if (this.X5u != null)
                {
                    hashCode = (hashCode * 59) + this.X5u.GetHashCode();
                }
                if (this.X5t != null)
                {
                    hashCode = (hashCode * 59) + this.X5t.GetHashCode();
                }
                if (this.X5tS256 != null)
                {
                    hashCode = (hashCode * 59) + this.X5tS256.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
