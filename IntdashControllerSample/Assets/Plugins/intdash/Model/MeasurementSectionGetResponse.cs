/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = intdash.Client.FileParameter;
using OpenAPIDateConverter = intdash.Client.OpenAPIDateConverter;

namespace intdash.Model
{
    /// <summary>
    /// MeasurementSectionGetResponse
    /// </summary>
    [DataContract(Name = "MeasurementSectionGetResponse")]
    public partial class MeasurementSectionGetResponse : IEquatable<MeasurementSectionGetResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MeasurementSectionGetResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MeasurementSectionGetResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MeasurementSectionGetResponse" /> class.
        /// </summary>
        /// <param name="serialNumber">計測セクションのシリアルナンバー (required).</param>
        /// <param name="processed">&#x60;true&#x60; の場合、計測セクションは処理済みです。 (required).</param>
        /// <param name="createdAt">計測セクションの作成日時。 &#x60;processed&#x60; が &#x60;false&#x60; の場合は、この属性はありません。 (required).</param>
        /// <param name="updatedAt">計測セクションの最終更新日時。 &#x60;processed&#x60; が &#x60;false&#x60; の場合は、この属性はありません。 (required).</param>
        public MeasurementSectionGetResponse(string serialNumber = default(string), bool processed = default(bool), string createdAt = default(string), string updatedAt = default(string))
        {
            // to ensure "serialNumber" is required (not null)
            if (serialNumber == null)
            {
                throw new ArgumentNullException("serialNumber is a required property for MeasurementSectionGetResponse and cannot be null");
            }
            this.SerialNumber = serialNumber;
            this.Processed = processed;
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new ArgumentNullException("createdAt is a required property for MeasurementSectionGetResponse and cannot be null");
            }
            this.CreatedAt = createdAt;
            // to ensure "updatedAt" is required (not null)
            if (updatedAt == null)
            {
                throw new ArgumentNullException("updatedAt is a required property for MeasurementSectionGetResponse and cannot be null");
            }
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// 計測セクションのシリアルナンバー
        /// </summary>
        /// <value>計測セクションのシリアルナンバー</value>
        [DataMember(Name = "serial_number", IsRequired = true, EmitDefaultValue = true)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// &#x60;true&#x60; の場合、計測セクションは処理済みです。
        /// </summary>
        /// <value>&#x60;true&#x60; の場合、計測セクションは処理済みです。</value>
        [DataMember(Name = "processed", IsRequired = true, EmitDefaultValue = true)]
        public bool Processed { get; set; }

        /// <summary>
        /// 計測セクションの作成日時。 &#x60;processed&#x60; が &#x60;false&#x60; の場合は、この属性はありません。
        /// </summary>
        /// <value>計測セクションの作成日時。 &#x60;processed&#x60; が &#x60;false&#x60; の場合は、この属性はありません。</value>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// 計測セクションの最終更新日時。 &#x60;processed&#x60; が &#x60;false&#x60; の場合は、この属性はありません。
        /// </summary>
        /// <value>計測セクションの最終更新日時。 &#x60;processed&#x60; が &#x60;false&#x60; の場合は、この属性はありません。</value>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MeasurementSectionGetResponse {\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  Processed: ").Append(Processed).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MeasurementSectionGetResponse);
        }

        /// <summary>
        /// Returns true if MeasurementSectionGetResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MeasurementSectionGetResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeasurementSectionGetResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.Processed == input.Processed ||
                    this.Processed.Equals(input.Processed)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SerialNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Processed.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
