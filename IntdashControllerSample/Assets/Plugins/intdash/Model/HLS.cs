/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = intdash.Client.FileParameter;
using OpenAPIDateConverter = intdash.Client.OpenAPIDateConverter;

namespace intdash.Model
{
    /// <summary>
    /// HLS
    /// </summary>
    [DataContract(Name = "HLS")]
    public partial class HLS : IEquatable<HLS>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HLS" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HLS() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HLS" /> class.
        /// </summary>
        /// <param name="edgeUuid">エッジのUUID (required).</param>
        /// <param name="measurementUuid">計測のUUID (required).</param>
        /// <param name="basetime">基準時刻 (required).</param>
        /// <param name="basetimeType">基準時刻タイプ (required).</param>
        /// <param name="playlist">プレイリスト (required).</param>
        /// <param name="channel">チャンネル (required).</param>
        /// <param name="offsetTime">計測開始から動画の開始までのオフセット（マイクロ秒） (required).</param>
        /// <param name="duration">長さ（マイクロ秒） (required).</param>
        public HLS(string edgeUuid = default(string), string measurementUuid = default(string), string basetime = default(string), string basetimeType = default(string), string playlist = default(string), int channel = default(int), int offsetTime = default(int), int duration = default(int))
        {
            // to ensure "edgeUuid" is required (not null)
            if (edgeUuid == null)
            {
                throw new ArgumentNullException("edgeUuid is a required property for HLS and cannot be null");
            }
            this.EdgeUuid = edgeUuid;
            // to ensure "measurementUuid" is required (not null)
            if (measurementUuid == null)
            {
                throw new ArgumentNullException("measurementUuid is a required property for HLS and cannot be null");
            }
            this.MeasurementUuid = measurementUuid;
            // to ensure "basetime" is required (not null)
            if (basetime == null)
            {
                throw new ArgumentNullException("basetime is a required property for HLS and cannot be null");
            }
            this.Basetime = basetime;
            // to ensure "basetimeType" is required (not null)
            if (basetimeType == null)
            {
                throw new ArgumentNullException("basetimeType is a required property for HLS and cannot be null");
            }
            this.BasetimeType = basetimeType;
            // to ensure "playlist" is required (not null)
            if (playlist == null)
            {
                throw new ArgumentNullException("playlist is a required property for HLS and cannot be null");
            }
            this.Playlist = playlist;
            this.Channel = channel;
            this.OffsetTime = offsetTime;
            this.Duration = duration;
        }

        /// <summary>
        /// エッジのUUID
        /// </summary>
        /// <value>エッジのUUID</value>
        [DataMember(Name = "edge_uuid", IsRequired = true, EmitDefaultValue = true)]
        public string EdgeUuid { get; set; }

        /// <summary>
        /// 計測のUUID
        /// </summary>
        /// <value>計測のUUID</value>
        [DataMember(Name = "measurement_uuid", IsRequired = true, EmitDefaultValue = true)]
        public string MeasurementUuid { get; set; }

        /// <summary>
        /// 基準時刻
        /// </summary>
        /// <value>基準時刻</value>
        [DataMember(Name = "basetime", IsRequired = true, EmitDefaultValue = true)]
        public string Basetime { get; set; }

        /// <summary>
        /// 基準時刻タイプ
        /// </summary>
        /// <value>基準時刻タイプ</value>
        [DataMember(Name = "basetime_type", IsRequired = true, EmitDefaultValue = true)]
        public string BasetimeType { get; set; }

        /// <summary>
        /// プレイリスト
        /// </summary>
        /// <value>プレイリスト</value>
        [DataMember(Name = "playlist", IsRequired = true, EmitDefaultValue = true)]
        public string Playlist { get; set; }

        /// <summary>
        /// チャンネル
        /// </summary>
        /// <value>チャンネル</value>
        [DataMember(Name = "channel", IsRequired = true, EmitDefaultValue = true)]
        public int Channel { get; set; }

        /// <summary>
        /// 計測開始から動画の開始までのオフセット（マイクロ秒）
        /// </summary>
        /// <value>計測開始から動画の開始までのオフセット（マイクロ秒）</value>
        [DataMember(Name = "offset_time", IsRequired = true, EmitDefaultValue = true)]
        public int OffsetTime { get; set; }

        /// <summary>
        /// 長さ（マイクロ秒）
        /// </summary>
        /// <value>長さ（マイクロ秒）</value>
        [DataMember(Name = "duration", IsRequired = true, EmitDefaultValue = true)]
        public int Duration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HLS {\n");
            sb.Append("  EdgeUuid: ").Append(EdgeUuid).Append("\n");
            sb.Append("  MeasurementUuid: ").Append(MeasurementUuid).Append("\n");
            sb.Append("  Basetime: ").Append(Basetime).Append("\n");
            sb.Append("  BasetimeType: ").Append(BasetimeType).Append("\n");
            sb.Append("  Playlist: ").Append(Playlist).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  OffsetTime: ").Append(OffsetTime).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HLS);
        }

        /// <summary>
        /// Returns true if HLS instances are equal
        /// </summary>
        /// <param name="input">Instance of HLS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HLS input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EdgeUuid == input.EdgeUuid ||
                    (this.EdgeUuid != null &&
                    this.EdgeUuid.Equals(input.EdgeUuid))
                ) && 
                (
                    this.MeasurementUuid == input.MeasurementUuid ||
                    (this.MeasurementUuid != null &&
                    this.MeasurementUuid.Equals(input.MeasurementUuid))
                ) && 
                (
                    this.Basetime == input.Basetime ||
                    (this.Basetime != null &&
                    this.Basetime.Equals(input.Basetime))
                ) && 
                (
                    this.BasetimeType == input.BasetimeType ||
                    (this.BasetimeType != null &&
                    this.BasetimeType.Equals(input.BasetimeType))
                ) && 
                (
                    this.Playlist == input.Playlist ||
                    (this.Playlist != null &&
                    this.Playlist.Equals(input.Playlist))
                ) && 
                (
                    this.Channel == input.Channel ||
                    this.Channel.Equals(input.Channel)
                ) && 
                (
                    this.OffsetTime == input.OffsetTime ||
                    this.OffsetTime.Equals(input.OffsetTime)
                ) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EdgeUuid != null)
                {
                    hashCode = (hashCode * 59) + this.EdgeUuid.GetHashCode();
                }
                if (this.MeasurementUuid != null)
                {
                    hashCode = (hashCode * 59) + this.MeasurementUuid.GetHashCode();
                }
                if (this.Basetime != null)
                {
                    hashCode = (hashCode * 59) + this.Basetime.GetHashCode();
                }
                if (this.BasetimeType != null)
                {
                    hashCode = (hashCode * 59) + this.BasetimeType.GetHashCode();
                }
                if (this.Playlist != null)
                {
                    hashCode = (hashCode * 59) + this.Playlist.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Channel.GetHashCode();
                hashCode = (hashCode * 59) + this.OffsetTime.GetHashCode();
                hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                return hashCode;
            }
        }

    }

}
