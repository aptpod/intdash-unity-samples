/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = intdash.Client.FileParameter;
using OpenAPIDateConverter = intdash.Client.OpenAPIDateConverter;

namespace intdash.Model
{
    /// <summary>
    /// SignalConversionOptionNumFixedPoint
    /// </summary>
    [DataContract(Name = "SignalConversionOptionNumFixedPoint")]
    public partial class SignalConversionOptionNumFixedPoint : IEquatable<SignalConversionOptionNumFixedPoint>
    {
        /// <summary>
        /// エンディアン
        /// </summary>
        /// <value>エンディアン</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EndianEnum
        {
            /// <summary>
            /// Enum Big for value: big
            /// </summary>
            [EnumMember(Value = "big")]
            Big = 1,

            /// <summary>
            /// Enum Little for value: little
            /// </summary>
            [EnumMember(Value = "little")]
            Little = 2

        }


        /// <summary>
        /// エンディアン
        /// </summary>
        /// <value>エンディアン</value>
        [DataMember(Name = "endian", IsRequired = true, EmitDefaultValue = true)]
        public EndianEnum Endian { get; set; }
        /// <summary>
        /// 符号有無
        /// </summary>
        /// <value>符号有無</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SignEnum
        {
            /// <summary>
            /// Enum Signed for value: signed
            /// </summary>
            [EnumMember(Value = "signed")]
            Signed = 1,

            /// <summary>
            /// Enum Unsigned for value: unsigned
            /// </summary>
            [EnumMember(Value = "unsigned")]
            Unsigned = 2

        }


        /// <summary>
        /// 符号有無
        /// </summary>
        /// <value>符号有無</value>
        [DataMember(Name = "sign", IsRequired = true, EmitDefaultValue = true)]
        public SignEnum Sign { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignalConversionOptionNumFixedPoint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignalConversionOptionNumFixedPoint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignalConversionOptionNumFixedPoint" /> class.
        /// </summary>
        /// <param name="startbit">開始ビット位置 (required).</param>
        /// <param name="bitsize">ビットサイズ (required).</param>
        /// <param name="endian">エンディアン (required).</param>
        /// <param name="sign">符号有無 (required).</param>
        /// <param name="scale">スケールファクター (required).</param>
        /// <param name="offset">オフセット (required).</param>
        public SignalConversionOptionNumFixedPoint(int startbit = default(int), int bitsize = default(int), EndianEnum endian = default(EndianEnum), SignEnum sign = default(SignEnum), decimal scale = default(decimal), decimal offset = default(decimal))
        {
            this.Startbit = startbit;
            this.Bitsize = bitsize;
            this.Endian = endian;
            this.Sign = sign;
            this.Scale = scale;
            this.Offset = offset;
        }

        /// <summary>
        /// 開始ビット位置
        /// </summary>
        /// <value>開始ビット位置</value>
        [DataMember(Name = "startbit", IsRequired = true, EmitDefaultValue = true)]
        public int Startbit { get; set; }

        /// <summary>
        /// ビットサイズ
        /// </summary>
        /// <value>ビットサイズ</value>
        [DataMember(Name = "bitsize", IsRequired = true, EmitDefaultValue = true)]
        public int Bitsize { get; set; }

        /// <summary>
        /// スケールファクター
        /// </summary>
        /// <value>スケールファクター</value>
        [DataMember(Name = "scale", IsRequired = true, EmitDefaultValue = true)]
        public decimal Scale { get; set; }

        /// <summary>
        /// オフセット
        /// </summary>
        /// <value>オフセット</value>
        [DataMember(Name = "offset", IsRequired = true, EmitDefaultValue = true)]
        public decimal Offset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignalConversionOptionNumFixedPoint {\n");
            sb.Append("  Startbit: ").Append(Startbit).Append("\n");
            sb.Append("  Bitsize: ").Append(Bitsize).Append("\n");
            sb.Append("  Endian: ").Append(Endian).Append("\n");
            sb.Append("  Sign: ").Append(Sign).Append("\n");
            sb.Append("  Scale: ").Append(Scale).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignalConversionOptionNumFixedPoint);
        }

        /// <summary>
        /// Returns true if SignalConversionOptionNumFixedPoint instances are equal
        /// </summary>
        /// <param name="input">Instance of SignalConversionOptionNumFixedPoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignalConversionOptionNumFixedPoint input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Startbit == input.Startbit ||
                    this.Startbit.Equals(input.Startbit)
                ) && 
                (
                    this.Bitsize == input.Bitsize ||
                    this.Bitsize.Equals(input.Bitsize)
                ) && 
                (
                    this.Endian == input.Endian ||
                    this.Endian.Equals(input.Endian)
                ) && 
                (
                    this.Sign == input.Sign ||
                    this.Sign.Equals(input.Sign)
                ) && 
                (
                    this.Scale == input.Scale ||
                    this.Scale.Equals(input.Scale)
                ) && 
                (
                    this.Offset == input.Offset ||
                    this.Offset.Equals(input.Offset)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Startbit.GetHashCode();
                hashCode = (hashCode * 59) + this.Bitsize.GetHashCode();
                hashCode = (hashCode * 59) + this.Endian.GetHashCode();
                hashCode = (hashCode * 59) + this.Sign.GetHashCode();
                hashCode = (hashCode * 59) + this.Scale.GetHashCode();
                hashCode = (hashCode * 59) + this.Offset.GetHashCode();
                return hashCode;
            }
        }

    }

}
