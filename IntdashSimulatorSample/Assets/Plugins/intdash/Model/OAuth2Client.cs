/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = intdash.Client.FileParameter;
using OpenAPIDateConverter = intdash.Client.OpenAPIDateConverter;

namespace intdash.Model
{
    /// <summary>
    /// OAuth2Client
    /// </summary>
    [DataContract(Name = "OAuth2Client")]
    public partial class OAuth2Client : IEquatable<OAuth2Client>
    {
        /// <summary>
        /// トークンエンドポイントの認証方式
        /// </summary>
        /// <value>トークンエンドポイントの認証方式</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TokenEndpointAuthMethodEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum ClientSecretPost for value: client_secret_post
            /// </summary>
            [EnumMember(Value = "client_secret_post")]
            ClientSecretPost = 2,

            /// <summary>
            /// Enum ClientSecretBasic for value: client_secret_basic
            /// </summary>
            [EnumMember(Value = "client_secret_basic")]
            ClientSecretBasic = 3,

            /// <summary>
            /// Enum TlsClientAuth for value: tls_client_auth
            /// </summary>
            [EnumMember(Value = "tls_client_auth")]
            TlsClientAuth = 4

        }


        /// <summary>
        /// トークンエンドポイントの認証方式
        /// </summary>
        /// <value>トークンエンドポイントの認証方式</value>
        [DataMember(Name = "token_endpoint_auth_method", IsRequired = true, EmitDefaultValue = true)]
        public TokenEndpointAuthMethodEnum TokenEndpointAuthMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth2Client" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OAuth2Client() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth2Client" /> class.
        /// </summary>
        /// <param name="clientId">OAuth2クライアントID (required).</param>
        /// <param name="name">名前 (required).</param>
        /// <param name="grantTypes">グラントタイプ (required).</param>
        /// <param name="tokenEndpointAuthMethod">トークンエンドポイントの認証方式 (required).</param>
        /// <param name="redirectUris">認可後のリダイレクト先URI (required).</param>
        /// <param name="responseTypes">レスポンスタイプ (required).</param>
        /// <param name="scopes">スコープ (required).</param>
        /// <param name="audiences">オーディエンス (required).</param>
        /// <param name="tlsClientAuthSubjectDn">TLSクライアント認証のサブジェクトDN (required).</param>
        public OAuth2Client(string clientId = default(string), string name = default(string), List<OAuth2ClientGrantType> grantTypes = default(List<OAuth2ClientGrantType>), TokenEndpointAuthMethodEnum tokenEndpointAuthMethod = default(TokenEndpointAuthMethodEnum), List<string> redirectUris = default(List<string>), List<OAuth2ClientResponseType> responseTypes = default(List<OAuth2ClientResponseType>), List<string> scopes = default(List<string>), List<string> audiences = default(List<string>), string tlsClientAuthSubjectDn = default(string))
        {
            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new ArgumentNullException("clientId is a required property for OAuth2Client and cannot be null");
            }
            this.ClientId = clientId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for OAuth2Client and cannot be null");
            }
            this.Name = name;
            // to ensure "grantTypes" is required (not null)
            if (grantTypes == null)
            {
                throw new ArgumentNullException("grantTypes is a required property for OAuth2Client and cannot be null");
            }
            this.GrantTypes = grantTypes;
            this.TokenEndpointAuthMethod = tokenEndpointAuthMethod;
            // to ensure "redirectUris" is required (not null)
            if (redirectUris == null)
            {
                throw new ArgumentNullException("redirectUris is a required property for OAuth2Client and cannot be null");
            }
            this.RedirectUris = redirectUris;
            // to ensure "responseTypes" is required (not null)
            if (responseTypes == null)
            {
                throw new ArgumentNullException("responseTypes is a required property for OAuth2Client and cannot be null");
            }
            this.ResponseTypes = responseTypes;
            // to ensure "scopes" is required (not null)
            if (scopes == null)
            {
                throw new ArgumentNullException("scopes is a required property for OAuth2Client and cannot be null");
            }
            this.Scopes = scopes;
            // to ensure "audiences" is required (not null)
            if (audiences == null)
            {
                throw new ArgumentNullException("audiences is a required property for OAuth2Client and cannot be null");
            }
            this.Audiences = audiences;
            // to ensure "tlsClientAuthSubjectDn" is required (not null)
            if (tlsClientAuthSubjectDn == null)
            {
                throw new ArgumentNullException("tlsClientAuthSubjectDn is a required property for OAuth2Client and cannot be null");
            }
            this.TlsClientAuthSubjectDn = tlsClientAuthSubjectDn;
        }

        /// <summary>
        /// OAuth2クライアントID
        /// </summary>
        /// <value>OAuth2クライアントID</value>
        [DataMember(Name = "client_id", IsRequired = true, EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// 名前
        /// </summary>
        /// <value>名前</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// グラントタイプ
        /// </summary>
        /// <value>グラントタイプ</value>
        [DataMember(Name = "grant_types", IsRequired = true, EmitDefaultValue = true)]
        public List<OAuth2ClientGrantType> GrantTypes { get; set; }

        /// <summary>
        /// 認可後のリダイレクト先URI
        /// </summary>
        /// <value>認可後のリダイレクト先URI</value>
        [DataMember(Name = "redirect_uris", IsRequired = true, EmitDefaultValue = true)]
        public List<string> RedirectUris { get; set; }

        /// <summary>
        /// レスポンスタイプ
        /// </summary>
        /// <value>レスポンスタイプ</value>
        [DataMember(Name = "response_types", IsRequired = true, EmitDefaultValue = true)]
        public List<OAuth2ClientResponseType> ResponseTypes { get; set; }

        /// <summary>
        /// スコープ
        /// </summary>
        /// <value>スコープ</value>
        [DataMember(Name = "scopes", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Scopes { get; set; }

        /// <summary>
        /// オーディエンス
        /// </summary>
        /// <value>オーディエンス</value>
        [DataMember(Name = "audiences", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Audiences { get; set; }

        /// <summary>
        /// TLSクライアント認証のサブジェクトDN
        /// </summary>
        /// <value>TLSクライアント認証のサブジェクトDN</value>
        [DataMember(Name = "tls_client_auth_subject_dn", IsRequired = true, EmitDefaultValue = true)]
        public string TlsClientAuthSubjectDn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OAuth2Client {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  GrantTypes: ").Append(GrantTypes).Append("\n");
            sb.Append("  TokenEndpointAuthMethod: ").Append(TokenEndpointAuthMethod).Append("\n");
            sb.Append("  RedirectUris: ").Append(RedirectUris).Append("\n");
            sb.Append("  ResponseTypes: ").Append(ResponseTypes).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  Audiences: ").Append(Audiences).Append("\n");
            sb.Append("  TlsClientAuthSubjectDn: ").Append(TlsClientAuthSubjectDn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OAuth2Client);
        }

        /// <summary>
        /// Returns true if OAuth2Client instances are equal
        /// </summary>
        /// <param name="input">Instance of OAuth2Client to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OAuth2Client input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.GrantTypes == input.GrantTypes ||
                    this.GrantTypes != null &&
                    input.GrantTypes != null &&
                    this.GrantTypes.SequenceEqual(input.GrantTypes)
                ) && 
                (
                    this.TokenEndpointAuthMethod == input.TokenEndpointAuthMethod ||
                    this.TokenEndpointAuthMethod.Equals(input.TokenEndpointAuthMethod)
                ) && 
                (
                    this.RedirectUris == input.RedirectUris ||
                    this.RedirectUris != null &&
                    input.RedirectUris != null &&
                    this.RedirectUris.SequenceEqual(input.RedirectUris)
                ) && 
                (
                    this.ResponseTypes == input.ResponseTypes ||
                    this.ResponseTypes != null &&
                    input.ResponseTypes != null &&
                    this.ResponseTypes.SequenceEqual(input.ResponseTypes)
                ) && 
                (
                    this.Scopes == input.Scopes ||
                    this.Scopes != null &&
                    input.Scopes != null &&
                    this.Scopes.SequenceEqual(input.Scopes)
                ) && 
                (
                    this.Audiences == input.Audiences ||
                    this.Audiences != null &&
                    input.Audiences != null &&
                    this.Audiences.SequenceEqual(input.Audiences)
                ) && 
                (
                    this.TlsClientAuthSubjectDn == input.TlsClientAuthSubjectDn ||
                    (this.TlsClientAuthSubjectDn != null &&
                    this.TlsClientAuthSubjectDn.Equals(input.TlsClientAuthSubjectDn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.GrantTypes != null)
                {
                    hashCode = (hashCode * 59) + this.GrantTypes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TokenEndpointAuthMethod.GetHashCode();
                if (this.RedirectUris != null)
                {
                    hashCode = (hashCode * 59) + this.RedirectUris.GetHashCode();
                }
                if (this.ResponseTypes != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseTypes.GetHashCode();
                }
                if (this.Scopes != null)
                {
                    hashCode = (hashCode * 59) + this.Scopes.GetHashCode();
                }
                if (this.Audiences != null)
                {
                    hashCode = (hashCode * 59) + this.Audiences.GetHashCode();
                }
                if (this.TlsClientAuthSubjectDn != null)
                {
                    hashCode = (hashCode * 59) + this.TlsClientAuthSubjectDn.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
