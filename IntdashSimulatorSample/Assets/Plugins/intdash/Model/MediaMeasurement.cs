/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = intdash.Client.FileParameter;
using OpenAPIDateConverter = intdash.Client.OpenAPIDateConverter;

namespace intdash.Model
{
    /// <summary>
    /// MediaMeasurement
    /// </summary>
    [DataContract(Name = "MediaMeasurement")]
    public partial class MediaMeasurement : IEquatable<MediaMeasurement>
    {

        /// <summary>
        /// Gets or Sets BasetimeType
        /// </summary>
        [DataMember(Name = "basetime_type", IsRequired = true, EmitDefaultValue = true)]
        public MediaMeasurementBaseTimeType BasetimeType { get; set; }
        /// <summary>
        /// 代わりに &#x60;sequences.status&#x60; を使用してください。 計測のステータスを表します:   - measuring     - 計測中   - resending     - 再送中。計測（エッジにおけるデータの取得）は終了しましたが、エッジにデータが残っており、サーバーに再送中です。   - finished     - 完了。サーバーへのデータの回収が完了しています。
        /// </summary>
        /// <value>代わりに &#x60;sequences.status&#x60; を使用してください。 計測のステータスを表します:   - measuring     - 計測中   - resending     - 再送中。計測（エッジにおけるデータの取得）は終了しましたが、エッジにデータが残っており、サーバーに再送中です。   - finished     - 完了。サーバーへのデータの回収が完了しています。</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Measuring for value: measuring
            /// </summary>
            [EnumMember(Value = "measuring")]
            Measuring = 1,

            /// <summary>
            /// Enum Resending for value: resending
            /// </summary>
            [EnumMember(Value = "resending")]
            Resending = 2,

            /// <summary>
            /// Enum Finished for value: finished
            /// </summary>
            [EnumMember(Value = "finished")]
            Finished = 3

        }


        /// <summary>
        /// 代わりに &#x60;sequences.status&#x60; を使用してください。 計測のステータスを表します:   - measuring     - 計測中   - resending     - 再送中。計測（エッジにおけるデータの取得）は終了しましたが、エッジにデータが残っており、サーバーに再送中です。   - finished     - 完了。サーバーへのデータの回収が完了しています。
        /// </summary>
        /// <value>代わりに &#x60;sequences.status&#x60; を使用してください。 計測のステータスを表します:   - measuring     - 計測中   - resending     - 再送中。計測（エッジにおけるデータの取得）は終了しましたが、エッジにデータが残っており、サーバーに再送中です。   - finished     - 完了。サーバーへのデータの回収が完了しています。</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaMeasurement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MediaMeasurement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaMeasurement" /> class.
        /// </summary>
        /// <param name="uuid">計測のUUID (required).</param>
        /// <param name="name">計測の名前 (required).</param>
        /// <param name="description">計測の説明 (required).</param>
        /// <param name="basetime">計測の基準時刻（RFC3339形式） (required).</param>
        /// <param name="basetimeType">basetimeType (required).</param>
        /// <param name="edgeUuid">エッジのUUID (required).</param>
        /// <param name="duration">計測時間（ &#x60;max_elapsed_time&#x60; を使用してください） (required).</param>
        /// <param name="maxElapsedTime">計測時間（マイクロ秒）.</param>
        /// <param name="_protected">&#x60;true&#x60; の場合、計測は保護されています。保護されている計測は削除できません。 保護されている計測を削除したい場合は、まず保護を解除してください。 (required).</param>
        /// <param name="createdAt">計測の作成日時 (required).</param>
        /// <param name="updatedAt">計測の最終更新日時 (required).</param>
        /// <param name="processedRatio">代わりに &#x60;sequences.received_sequence_numbers_ratio&#x60; を使用してください。処理済み率を表します。 (required).</param>
        /// <param name="ended">代わりに &#x60;sequences.status&#x60; を使用してください。エッジにおいてデータの取得が終了しているかどうかを示します。 (required).</param>
        /// <param name="status">代わりに &#x60;sequences.status&#x60; を使用してください。 計測のステータスを表します:   - measuring     - 計測中   - resending     - 再送中。計測（エッジにおけるデータの取得）は終了しましたが、エッジにデータが残っており、サーバーに再送中です。   - finished     - 完了。サーバーへのデータの回収が完了しています。 (required).</param>
        public MediaMeasurement(string uuid = default(string), string name = default(string), string description = default(string), string basetime = default(string), MediaMeasurementBaseTimeType basetimeType = default(MediaMeasurementBaseTimeType), string edgeUuid = default(string), long duration = default(long), long maxElapsedTime = default(long), bool _protected = default(bool), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), decimal processedRatio = default(decimal), bool ended = default(bool), StatusEnum status = default(StatusEnum))
        {
            // to ensure "uuid" is required (not null)
            if (uuid == null)
            {
                throw new ArgumentNullException("uuid is a required property for MediaMeasurement and cannot be null");
            }
            this.Uuid = uuid;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for MediaMeasurement and cannot be null");
            }
            this.Name = name;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for MediaMeasurement and cannot be null");
            }
            this.Description = description;
            // to ensure "basetime" is required (not null)
            if (basetime == null)
            {
                throw new ArgumentNullException("basetime is a required property for MediaMeasurement and cannot be null");
            }
            this.Basetime = basetime;
            this.BasetimeType = basetimeType;
            // to ensure "edgeUuid" is required (not null)
            if (edgeUuid == null)
            {
                throw new ArgumentNullException("edgeUuid is a required property for MediaMeasurement and cannot be null");
            }
            this.EdgeUuid = edgeUuid;
            this.Duration = duration;
            this.Protected = _protected;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.ProcessedRatio = processedRatio;
            this.Ended = ended;
            this.Status = status;
            this.MaxElapsedTime = maxElapsedTime;
        }

        /// <summary>
        /// 計測のUUID
        /// </summary>
        /// <value>計測のUUID</value>
        [DataMember(Name = "uuid", IsRequired = true, EmitDefaultValue = true)]
        public string Uuid { get; set; }

        /// <summary>
        /// 計測の名前
        /// </summary>
        /// <value>計測の名前</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// 計測の説明
        /// </summary>
        /// <value>計測の説明</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// 計測の基準時刻（RFC3339形式）
        /// </summary>
        /// <value>計測の基準時刻（RFC3339形式）</value>
        [DataMember(Name = "basetime", IsRequired = true, EmitDefaultValue = true)]
        public string Basetime { get; set; }

        /// <summary>
        /// エッジのUUID
        /// </summary>
        /// <value>エッジのUUID</value>
        [DataMember(Name = "edge_uuid", IsRequired = true, EmitDefaultValue = true)]
        public string EdgeUuid { get; set; }

        /// <summary>
        /// 計測時間（ &#x60;max_elapsed_time&#x60; を使用してください）
        /// </summary>
        /// <value>計測時間（ &#x60;max_elapsed_time&#x60; を使用してください）</value>
        [DataMember(Name = "duration", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public long Duration { get; set; }

        /// <summary>
        /// 計測時間（マイクロ秒）
        /// </summary>
        /// <value>計測時間（マイクロ秒）</value>
        [DataMember(Name = "max_elapsed_time", EmitDefaultValue = false)]
        public long MaxElapsedTime { get; set; }

        /// <summary>
        /// &#x60;true&#x60; の場合、計測は保護されています。保護されている計測は削除できません。 保護されている計測を削除したい場合は、まず保護を解除してください。
        /// </summary>
        /// <value>&#x60;true&#x60; の場合、計測は保護されています。保護されている計測は削除できません。 保護されている計測を削除したい場合は、まず保護を解除してください。</value>
        [DataMember(Name = "protected", IsRequired = true, EmitDefaultValue = true)]
        public bool Protected { get; set; }

        /// <summary>
        /// 計測の作成日時
        /// </summary>
        /// <value>計測の作成日時</value>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// 計測の最終更新日時
        /// </summary>
        /// <value>計測の最終更新日時</value>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// 代わりに &#x60;sequences.received_sequence_numbers_ratio&#x60; を使用してください。処理済み率を表します。
        /// </summary>
        /// <value>代わりに &#x60;sequences.received_sequence_numbers_ratio&#x60; を使用してください。処理済み率を表します。</value>
        [DataMember(Name = "processed_ratio", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public decimal ProcessedRatio { get; set; }

        /// <summary>
        /// 代わりに &#x60;sequences.status&#x60; を使用してください。エッジにおいてデータの取得が終了しているかどうかを示します。
        /// </summary>
        /// <value>代わりに &#x60;sequences.status&#x60; を使用してください。エッジにおいてデータの取得が終了しているかどうかを示します。</value>
        [DataMember(Name = "ended", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public bool Ended { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MediaMeasurement {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Basetime: ").Append(Basetime).Append("\n");
            sb.Append("  BasetimeType: ").Append(BasetimeType).Append("\n");
            sb.Append("  EdgeUuid: ").Append(EdgeUuid).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  MaxElapsedTime: ").Append(MaxElapsedTime).Append("\n");
            sb.Append("  Protected: ").Append(Protected).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ProcessedRatio: ").Append(ProcessedRatio).Append("\n");
            sb.Append("  Ended: ").Append(Ended).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaMeasurement);
        }

        /// <summary>
        /// Returns true if MediaMeasurement instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaMeasurement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaMeasurement input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Basetime == input.Basetime ||
                    (this.Basetime != null &&
                    this.Basetime.Equals(input.Basetime))
                ) && 
                (
                    this.BasetimeType == input.BasetimeType ||
                    this.BasetimeType.Equals(input.BasetimeType)
                ) && 
                (
                    this.EdgeUuid == input.EdgeUuid ||
                    (this.EdgeUuid != null &&
                    this.EdgeUuid.Equals(input.EdgeUuid))
                ) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                ) && 
                (
                    this.MaxElapsedTime == input.MaxElapsedTime ||
                    this.MaxElapsedTime.Equals(input.MaxElapsedTime)
                ) && 
                (
                    this.Protected == input.Protected ||
                    this.Protected.Equals(input.Protected)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.ProcessedRatio == input.ProcessedRatio ||
                    this.ProcessedRatio.Equals(input.ProcessedRatio)
                ) && 
                (
                    this.Ended == input.Ended ||
                    this.Ended.Equals(input.Ended)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Basetime != null)
                {
                    hashCode = (hashCode * 59) + this.Basetime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BasetimeType.GetHashCode();
                if (this.EdgeUuid != null)
                {
                    hashCode = (hashCode * 59) + this.EdgeUuid.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxElapsedTime.GetHashCode();
                hashCode = (hashCode * 59) + this.Protected.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProcessedRatio.GetHashCode();
                hashCode = (hashCode * 59) + this.Ended.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }

    }

}
