/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = intdash.Client.FileParameter;
using OpenAPIDateConverter = intdash.Client.OpenAPIDateConverter;

namespace intdash.Model
{
    /// <summary>
    /// EdgeConnectionDownstream
    /// </summary>
    [DataContract(Name = "EdgeConnectionDownstream")]
    public partial class EdgeConnectionDownstream : IEquatable<EdgeConnectionDownstream>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdgeConnectionDownstream" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdgeConnectionDownstream() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdgeConnectionDownstream" /> class.
        /// </summary>
        /// <param name="streamId">ダウンストリームのストリームID (required).</param>
        /// <param name="srcEdgeUuid">ダウンストリームの送信元エッジUUID (required).</param>
        /// <param name="dstEdgeUuid">ダウンストリームの宛先エッジUUID (required).</param>
        /// <param name="lastReceivedAt">ダウンストリームで最後にデータポイントが受信された日時。 実際の最後のデータポイントの受信よりも最大で10秒後の値となる場合があります。 (required).</param>
        /// <param name="receivedCloseRequest">* &#x60;true&#x60; : このダウンストリームについてのclose requestを受信済みです。 * &#x60;false&#x60; : このダウンストリームについてのclose requestを受信していません。 (required).</param>
        /// <param name="createdAt">ダウンストリームが作成された日時 (required).</param>
        /// <param name="updatedAt">ダウンストリームの最終更新日時 (required).</param>
        public EdgeConnectionDownstream(int streamId = default(int), string srcEdgeUuid = default(string), string dstEdgeUuid = default(string), string lastReceivedAt = default(string), bool receivedCloseRequest = default(bool), string createdAt = default(string), string updatedAt = default(string))
        {
            this.StreamId = streamId;
            // to ensure "srcEdgeUuid" is required (not null)
            if (srcEdgeUuid == null)
            {
                throw new ArgumentNullException("srcEdgeUuid is a required property for EdgeConnectionDownstream and cannot be null");
            }
            this.SrcEdgeUuid = srcEdgeUuid;
            // to ensure "dstEdgeUuid" is required (not null)
            if (dstEdgeUuid == null)
            {
                throw new ArgumentNullException("dstEdgeUuid is a required property for EdgeConnectionDownstream and cannot be null");
            }
            this.DstEdgeUuid = dstEdgeUuid;
            // to ensure "lastReceivedAt" is required (not null)
            if (lastReceivedAt == null)
            {
                throw new ArgumentNullException("lastReceivedAt is a required property for EdgeConnectionDownstream and cannot be null");
            }
            this.LastReceivedAt = lastReceivedAt;
            this.ReceivedCloseRequest = receivedCloseRequest;
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new ArgumentNullException("createdAt is a required property for EdgeConnectionDownstream and cannot be null");
            }
            this.CreatedAt = createdAt;
            // to ensure "updatedAt" is required (not null)
            if (updatedAt == null)
            {
                throw new ArgumentNullException("updatedAt is a required property for EdgeConnectionDownstream and cannot be null");
            }
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// ダウンストリームのストリームID
        /// </summary>
        /// <value>ダウンストリームのストリームID</value>
        [DataMember(Name = "stream_id", IsRequired = true, EmitDefaultValue = true)]
        public int StreamId { get; set; }

        /// <summary>
        /// ダウンストリームの送信元エッジUUID
        /// </summary>
        /// <value>ダウンストリームの送信元エッジUUID</value>
        [DataMember(Name = "src_edge_uuid", IsRequired = true, EmitDefaultValue = true)]
        public string SrcEdgeUuid { get; set; }

        /// <summary>
        /// ダウンストリームの宛先エッジUUID
        /// </summary>
        /// <value>ダウンストリームの宛先エッジUUID</value>
        [DataMember(Name = "dst_edge_uuid", IsRequired = true, EmitDefaultValue = true)]
        public string DstEdgeUuid { get; set; }

        /// <summary>
        /// ダウンストリームで最後にデータポイントが受信された日時。 実際の最後のデータポイントの受信よりも最大で10秒後の値となる場合があります。
        /// </summary>
        /// <value>ダウンストリームで最後にデータポイントが受信された日時。 実際の最後のデータポイントの受信よりも最大で10秒後の値となる場合があります。</value>
        [DataMember(Name = "last_received_at", IsRequired = true, EmitDefaultValue = true)]
        public string LastReceivedAt { get; set; }

        /// <summary>
        /// * &#x60;true&#x60; : このダウンストリームについてのclose requestを受信済みです。 * &#x60;false&#x60; : このダウンストリームについてのclose requestを受信していません。
        /// </summary>
        /// <value>* &#x60;true&#x60; : このダウンストリームについてのclose requestを受信済みです。 * &#x60;false&#x60; : このダウンストリームについてのclose requestを受信していません。</value>
        [DataMember(Name = "received_close_request", IsRequired = true, EmitDefaultValue = true)]
        public bool ReceivedCloseRequest { get; set; }

        /// <summary>
        /// ダウンストリームが作成された日時
        /// </summary>
        /// <value>ダウンストリームが作成された日時</value>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// ダウンストリームの最終更新日時
        /// </summary>
        /// <value>ダウンストリームの最終更新日時</value>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdgeConnectionDownstream {\n");
            sb.Append("  StreamId: ").Append(StreamId).Append("\n");
            sb.Append("  SrcEdgeUuid: ").Append(SrcEdgeUuid).Append("\n");
            sb.Append("  DstEdgeUuid: ").Append(DstEdgeUuid).Append("\n");
            sb.Append("  LastReceivedAt: ").Append(LastReceivedAt).Append("\n");
            sb.Append("  ReceivedCloseRequest: ").Append(ReceivedCloseRequest).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdgeConnectionDownstream);
        }

        /// <summary>
        /// Returns true if EdgeConnectionDownstream instances are equal
        /// </summary>
        /// <param name="input">Instance of EdgeConnectionDownstream to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdgeConnectionDownstream input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StreamId == input.StreamId ||
                    this.StreamId.Equals(input.StreamId)
                ) && 
                (
                    this.SrcEdgeUuid == input.SrcEdgeUuid ||
                    (this.SrcEdgeUuid != null &&
                    this.SrcEdgeUuid.Equals(input.SrcEdgeUuid))
                ) && 
                (
                    this.DstEdgeUuid == input.DstEdgeUuid ||
                    (this.DstEdgeUuid != null &&
                    this.DstEdgeUuid.Equals(input.DstEdgeUuid))
                ) && 
                (
                    this.LastReceivedAt == input.LastReceivedAt ||
                    (this.LastReceivedAt != null &&
                    this.LastReceivedAt.Equals(input.LastReceivedAt))
                ) && 
                (
                    this.ReceivedCloseRequest == input.ReceivedCloseRequest ||
                    this.ReceivedCloseRequest.Equals(input.ReceivedCloseRequest)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.StreamId.GetHashCode();
                if (this.SrcEdgeUuid != null)
                {
                    hashCode = (hashCode * 59) + this.SrcEdgeUuid.GetHashCode();
                }
                if (this.DstEdgeUuid != null)
                {
                    hashCode = (hashCode * 59) + this.DstEdgeUuid.GetHashCode();
                }
                if (this.LastReceivedAt != null)
                {
                    hashCode = (hashCode * 59) + this.LastReceivedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReceivedCloseRequest.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
