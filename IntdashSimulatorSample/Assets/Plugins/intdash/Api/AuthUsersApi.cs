/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using intdash.Client;
using intdash.Model;

namespace intdash.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign Role
        /// </summary>
        /// <remarks>
        /// ユーザーにロールを割り当てます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="roleUuid">ロールのUUID</param>
        /// <returns>Role</returns>
        Role AssignRole(string userUuid, string roleUuid);

        /// <summary>
        /// Assign Role
        /// </summary>
        /// <remarks>
        /// ユーザーにロールを割り当てます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="roleUuid">ロールのUUID</param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> AssignRoleWithHttpInfo(string userUuid, string roleUuid);
        /// <summary>
        /// Create API Token
        /// </summary>
        /// <remarks>
        /// ユーザーのAPIトークンを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createUserAPITokenRequest"> (optional)</param>
        /// <returns>UserAPIToken</returns>
        UserAPIToken CreateAPIToken(string userUuid, CreateUserAPITokenRequest createUserAPITokenRequest = default(CreateUserAPITokenRequest));

        /// <summary>
        /// Create API Token
        /// </summary>
        /// <remarks>
        /// ユーザーのAPIトークンを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createUserAPITokenRequest"> (optional)</param>
        /// <returns>ApiResponse of UserAPIToken</returns>
        ApiResponse<UserAPIToken> CreateAPITokenWithHttpInfo(string userUuid, CreateUserAPITokenRequest createUserAPITokenRequest = default(CreateUserAPITokenRequest));
        /// <summary>
        /// Create Email
        /// </summary>
        /// <remarks>
        /// ユーザーのメールアドレスを設定します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createEmailRequest"> (optional)</param>
        /// <returns>UserEmail</returns>
        UserEmail CreateEmail(string userUuid, CreateEmailRequest createEmailRequest = default(CreateEmailRequest));

        /// <summary>
        /// Create Email
        /// </summary>
        /// <remarks>
        /// ユーザーのメールアドレスを設定します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createEmailRequest"> (optional)</param>
        /// <returns>ApiResponse of UserEmail</returns>
        ApiResponse<UserEmail> CreateEmailWithHttpInfo(string userUuid, CreateEmailRequest createEmailRequest = default(CreateEmailRequest));
        /// <summary>
        /// Create Temporary Password
        /// </summary>
        /// <remarks>
        /// ユーザーのパスワードを、ランダムな一時パスワードに変更します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>UserPassword</returns>
        UserPassword CreateTemporaryPassword(string userUuid);

        /// <summary>
        /// Create Temporary Password
        /// </summary>
        /// <remarks>
        /// ユーザーのパスワードを、ランダムな一時パスワードに変更します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>ApiResponse of UserPassword</returns>
        ApiResponse<UserPassword> CreateTemporaryPasswordWithHttpInfo(string userUuid);
        /// <summary>
        /// Create User
        /// </summary>
        /// <remarks>
        /// ユーザーを作成します。新しいユーザーには自動生成された一時パスワードが設定されます。 ユーザー作成のリクエストにメールアドレス（ &#x60;email&#x60; ）が含まれていた場合は、 そのメールアドレスに確認メールが送信されます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest"> (optional)</param>
        /// <returns>User</returns>
        User CreateUser(CreateUserRequest createUserRequest = default(CreateUserRequest));

        /// <summary>
        /// Create User
        /// </summary>
        /// <remarks>
        /// ユーザーを作成します。新しいユーザーには自動生成された一時パスワードが設定されます。 ユーザー作成のリクエストにメールアドレス（ &#x60;email&#x60; ）が含まれていた場合は、 そのメールアドレスに確認メールが送信されます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest"> (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> CreateUserWithHttpInfo(CreateUserRequest createUserRequest = default(CreateUserRequest));
        /// <summary>
        /// Delete API Token
        /// </summary>
        /// <remarks>
        /// ユーザーのAPIトークンを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userApiTokenId">APIトークンのID</param>
        /// <returns></returns>
        void DeleteAPIToken(string userUuid, long userApiTokenId);

        /// <summary>
        /// Delete API Token
        /// </summary>
        /// <remarks>
        /// ユーザーのAPIトークンを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userApiTokenId">APIトークンのID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAPITokenWithHttpInfo(string userUuid, long userApiTokenId);
        /// <summary>
        /// Delete Email
        /// </summary>
        /// <remarks>
        /// ユーザーのメールアドレスを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <returns></returns>
        void DeleteEmail(string userUuid, long userEmailId);

        /// <summary>
        /// Delete Email
        /// </summary>
        /// <remarks>
        /// ユーザーのメールアドレスを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEmailWithHttpInfo(string userUuid, long userEmailId);
        /// <summary>
        /// Delete User
        /// </summary>
        /// <remarks>
        /// ユーザーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns></returns>
        void DeleteUser(string userUuid);

        /// <summary>
        /// Delete User
        /// </summary>
        /// <remarks>
        /// ユーザーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo(string userUuid);
        /// <summary>
        /// Disable User
        /// </summary>
        /// <remarks>
        /// ユーザーを無効化します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>User</returns>
        User DisableUser(string userUuid);

        /// <summary>
        /// Disable User
        /// </summary>
        /// <remarks>
        /// ユーザーを無効化します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> DisableUserWithHttpInfo(string userUuid);
        /// <summary>
        /// Enable User
        /// </summary>
        /// <remarks>
        /// ユーザーを有効化します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>User</returns>
        User EnableUser(string userUuid);

        /// <summary>
        /// Enable User
        /// </summary>
        /// <remarks>
        /// ユーザーを有効化します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> EnableUserWithHttpInfo(string userUuid);
        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// ユーザーを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>User</returns>
        User GetUser(string userUuid);

        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// ユーザーを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserWithHttpInfo(string userUuid);
        /// <summary>
        /// Introspect API Token
        /// </summary>
        /// <remarks>
        /// APIトークンの検証を行います。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPITokenIntrospectionRequest"> (optional)</param>
        /// <returns>APITokenIntrospectionResponse</returns>
        APITokenIntrospectionResponse IntrospectAPIToken(APITokenIntrospectionRequest aPITokenIntrospectionRequest = default(APITokenIntrospectionRequest));

        /// <summary>
        /// Introspect API Token
        /// </summary>
        /// <remarks>
        /// APIトークンの検証を行います。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPITokenIntrospectionRequest"> (optional)</param>
        /// <returns>ApiResponse of APITokenIntrospectionResponse</returns>
        ApiResponse<APITokenIntrospectionResponse> IntrospectAPITokenWithHttpInfo(APITokenIntrospectionRequest aPITokenIntrospectionRequest = default(APITokenIntrospectionRequest));
        /// <summary>
        /// List API Tokens
        /// </summary>
        /// <remarks>
        /// ユーザーのAPIトークンのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>UserAPITokens</returns>
        UserAPITokens ListAPITokens(string userUuid);

        /// <summary>
        /// List API Tokens
        /// </summary>
        /// <remarks>
        /// ユーザーのAPIトークンのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>ApiResponse of UserAPITokens</returns>
        ApiResponse<UserAPITokens> ListAPITokensWithHttpInfo(string userUuid);
        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// ユーザーのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">ユーザーのUUID (optional)</param>
        /// <param name="roleUuid">ロールのUUID (optional)</param>
        /// <param name="name">ユーザーの名前による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="nickname">ユーザーの表示名による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="email">メールアドレスによる部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="disabled">* &#x60;true&#x60; を指定した場合、無効化されているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、有効なユーザーのみを取得します。 * 指定を省略した場合、有効／無効にかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="isSuper">* &#x60;true&#x60; を指定した場合、スーパーユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、スーパーユーザー以外を取得します。 * 指定を省略した場合、スーパーユーザーであるかにかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="isTemporary">* &#x60;true&#x60; を指定した場合、一時パスワードを使用しているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、パスワードを設定済みのユーザーのみを取得します。 * 指定を省略した場合、一時パスワードを使用しているかにかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="minSignInAttemptCount">ログイン失敗回数の最小値。ログイン失敗回数がこの数値以上のユーザーを取得します。 (optional)</param>
        /// <param name="maxSignInAttemptCount">ログイン失敗回数の最大値。ログイン失敗回数がこの数値以下のユーザーを取得します。 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at   - last_sign_in_at (optional, default to &quot;name+&quot;)</param>
        /// <param name="page">取得するページの番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 30)</param>
        /// <returns>Users</returns>
        Users ListUsers(List<string> uuid = default(List<string>), List<string> roleUuid = default(List<string>), List<string> name = default(List<string>), List<string> nickname = default(List<string>), List<string> email = default(List<string>), bool? disabled = default(bool?), bool? isSuper = default(bool?), bool? isTemporary = default(bool?), int? minSignInAttemptCount = default(int?), int? maxSignInAttemptCount = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// ユーザーのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">ユーザーのUUID (optional)</param>
        /// <param name="roleUuid">ロールのUUID (optional)</param>
        /// <param name="name">ユーザーの名前による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="nickname">ユーザーの表示名による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="email">メールアドレスによる部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="disabled">* &#x60;true&#x60; を指定した場合、無効化されているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、有効なユーザーのみを取得します。 * 指定を省略した場合、有効／無効にかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="isSuper">* &#x60;true&#x60; を指定した場合、スーパーユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、スーパーユーザー以外を取得します。 * 指定を省略した場合、スーパーユーザーであるかにかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="isTemporary">* &#x60;true&#x60; を指定した場合、一時パスワードを使用しているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、パスワードを設定済みのユーザーのみを取得します。 * 指定を省略した場合、一時パスワードを使用しているかにかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="minSignInAttemptCount">ログイン失敗回数の最小値。ログイン失敗回数がこの数値以上のユーザーを取得します。 (optional)</param>
        /// <param name="maxSignInAttemptCount">ログイン失敗回数の最大値。ログイン失敗回数がこの数値以下のユーザーを取得します。 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at   - last_sign_in_at (optional, default to &quot;name+&quot;)</param>
        /// <param name="page">取得するページの番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 30)</param>
        /// <returns>ApiResponse of Users</returns>
        ApiResponse<Users> ListUsersWithHttpInfo(List<string> uuid = default(List<string>), List<string> roleUuid = default(List<string>), List<string> name = default(List<string>), List<string> nickname = default(List<string>), List<string> email = default(List<string>), bool? disabled = default(bool?), bool? isSuper = default(bool?), bool? isTemporary = default(bool?), int? minSignInAttemptCount = default(int?), int? maxSignInAttemptCount = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// List User&#39;s Roles
        /// </summary>
        /// <remarks>
        /// ユーザーのロールのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>Roles</returns>
        Roles ListUsersRoles(string userUuid);

        /// <summary>
        /// List User&#39;s Roles
        /// </summary>
        /// <remarks>
        /// ユーザーのロールのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>ApiResponse of Roles</returns>
        ApiResponse<Roles> ListUsersRolesWithHttpInfo(string userUuid);
        /// <summary>
        /// Send Verification Email
        /// </summary>
        /// <remarks>
        /// メールアドレスを確認するため確認メールを送信します。メールアドレス確認用トークンを使用します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <returns>UserEmailVerification</returns>
        UserEmailVerification SendVerificationEmail(string userUuid, long userEmailId);

        /// <summary>
        /// Send Verification Email
        /// </summary>
        /// <remarks>
        /// メールアドレスを確認するため確認メールを送信します。メールアドレス確認用トークンを使用します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <returns>ApiResponse of UserEmailVerification</returns>
        ApiResponse<UserEmailVerification> SendVerificationEmailWithHttpInfo(string userUuid, long userEmailId);
        /// <summary>
        /// Unassign Role
        /// </summary>
        /// <remarks>
        /// ユーザーへのロールの割り当てを解除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="roleUuid">ロールのUUID</param>
        /// <returns></returns>
        void UnassignRole(string userUuid, string roleUuid);

        /// <summary>
        /// Unassign Role
        /// </summary>
        /// <remarks>
        /// ユーザーへのロールの割り当てを解除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="roleUuid">ロールのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnassignRoleWithHttpInfo(string userUuid, string roleUuid);
        /// <summary>
        /// Unlock Password
        /// </summary>
        /// <remarks>
        /// ユーザーのパスワードのロックを解除します。このユーザーのログイン失敗回数は0にリセットされます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>UserPassword</returns>
        UserPassword UnlockPassword(string userUuid);

        /// <summary>
        /// Unlock Password
        /// </summary>
        /// <remarks>
        /// ユーザーのパスワードのロックを解除します。このユーザーのログイン失敗回数は0にリセットされます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>ApiResponse of UserPassword</returns>
        ApiResponse<UserPassword> UnlockPasswordWithHttpInfo(string userUuid);
        /// <summary>
        /// Update API Token
        /// </summary>
        /// <remarks>
        /// ユーザーのAPIトークンを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userApiTokenId">APIトークンのID</param>
        /// <param name="updateUserAPITokenRequest"> (optional)</param>
        /// <returns>UserAPIToken</returns>
        UserAPIToken UpdateAPIToken(string userUuid, long userApiTokenId, UpdateUserAPITokenRequest updateUserAPITokenRequest = default(UpdateUserAPITokenRequest));

        /// <summary>
        /// Update API Token
        /// </summary>
        /// <remarks>
        /// ユーザーのAPIトークンを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userApiTokenId">APIトークンのID</param>
        /// <param name="updateUserAPITokenRequest"> (optional)</param>
        /// <returns>ApiResponse of UserAPIToken</returns>
        ApiResponse<UserAPIToken> UpdateAPITokenWithHttpInfo(string userUuid, long userApiTokenId, UpdateUserAPITokenRequest updateUserAPITokenRequest = default(UpdateUserAPITokenRequest));
        /// <summary>
        /// Update Email
        /// </summary>
        /// <remarks>
        /// ユーザーのメールアドレスを更新します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="patchEmailRequest"> (optional)</param>
        /// <returns>UserEmail</returns>
        UserEmail UpdateEmail(string userUuid, long userEmailId, PatchEmailRequest patchEmailRequest = default(PatchEmailRequest));

        /// <summary>
        /// Update Email
        /// </summary>
        /// <remarks>
        /// ユーザーのメールアドレスを更新します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="patchEmailRequest"> (optional)</param>
        /// <returns>ApiResponse of UserEmail</returns>
        ApiResponse<UserEmail> UpdateEmailWithHttpInfo(string userUuid, long userEmailId, PatchEmailRequest patchEmailRequest = default(PatchEmailRequest));
        /// <summary>
        /// Set Email as Verified
        /// </summary>
        /// <remarks>
        /// ユーザーのメールアドレスを確認済みにします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="updateEmailVerifiedRequest"> (optional)</param>
        /// <returns>UserEmail</returns>
        UserEmail UpdateToVerified(string userUuid, long userEmailId, UpdateEmailVerifiedRequest updateEmailVerifiedRequest = default(UpdateEmailVerifiedRequest));

        /// <summary>
        /// Set Email as Verified
        /// </summary>
        /// <remarks>
        /// ユーザーのメールアドレスを確認済みにします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="updateEmailVerifiedRequest"> (optional)</param>
        /// <returns>ApiResponse of UserEmail</returns>
        ApiResponse<UserEmail> UpdateToVerifiedWithHttpInfo(string userUuid, long userEmailId, UpdateEmailVerifiedRequest updateEmailVerifiedRequest = default(UpdateEmailVerifiedRequest));
        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// ユーザーを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <returns>User</returns>
        User UpdateUser(string userUuid, PatchUserRequest patchUserRequest = default(PatchUserRequest));

        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// ユーザーを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UpdateUserWithHttpInfo(string userUuid, PatchUserRequest patchUserRequest = default(PatchUserRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Assign Role
        /// </summary>
        /// <remarks>
        /// ユーザーにロールを割り当てます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="roleUuid">ロールのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> AssignRoleAsync(string userUuid, string roleUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Assign Role
        /// </summary>
        /// <remarks>
        /// ユーザーにロールを割り当てます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="roleUuid">ロールのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> AssignRoleWithHttpInfoAsync(string userUuid, string roleUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create API Token
        /// </summary>
        /// <remarks>
        /// ユーザーのAPIトークンを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createUserAPITokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserAPIToken</returns>
        System.Threading.Tasks.Task<UserAPIToken> CreateAPITokenAsync(string userUuid, CreateUserAPITokenRequest createUserAPITokenRequest = default(CreateUserAPITokenRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create API Token
        /// </summary>
        /// <remarks>
        /// ユーザーのAPIトークンを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createUserAPITokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserAPIToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAPIToken>> CreateAPITokenWithHttpInfoAsync(string userUuid, CreateUserAPITokenRequest createUserAPITokenRequest = default(CreateUserAPITokenRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Email
        /// </summary>
        /// <remarks>
        /// ユーザーのメールアドレスを設定します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createEmailRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserEmail</returns>
        System.Threading.Tasks.Task<UserEmail> CreateEmailAsync(string userUuid, CreateEmailRequest createEmailRequest = default(CreateEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Email
        /// </summary>
        /// <remarks>
        /// ユーザーのメールアドレスを設定します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createEmailRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserEmail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserEmail>> CreateEmailWithHttpInfoAsync(string userUuid, CreateEmailRequest createEmailRequest = default(CreateEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Temporary Password
        /// </summary>
        /// <remarks>
        /// ユーザーのパスワードを、ランダムな一時パスワードに変更します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserPassword</returns>
        System.Threading.Tasks.Task<UserPassword> CreateTemporaryPasswordAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Temporary Password
        /// </summary>
        /// <remarks>
        /// ユーザーのパスワードを、ランダムな一時パスワードに変更します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserPassword)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserPassword>> CreateTemporaryPasswordWithHttpInfoAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create User
        /// </summary>
        /// <remarks>
        /// ユーザーを作成します。新しいユーザーには自動生成された一時パスワードが設定されます。 ユーザー作成のリクエストにメールアドレス（ &#x60;email&#x60; ）が含まれていた場合は、 そのメールアドレスに確認メールが送信されます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> CreateUserAsync(CreateUserRequest createUserRequest = default(CreateUserRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create User
        /// </summary>
        /// <remarks>
        /// ユーザーを作成します。新しいユーザーには自動生成された一時パスワードが設定されます。 ユーザー作成のリクエストにメールアドレス（ &#x60;email&#x60; ）が含まれていた場合は、 そのメールアドレスに確認メールが送信されます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> CreateUserWithHttpInfoAsync(CreateUserRequest createUserRequest = default(CreateUserRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete API Token
        /// </summary>
        /// <remarks>
        /// ユーザーのAPIトークンを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userApiTokenId">APIトークンのID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAPITokenAsync(string userUuid, long userApiTokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete API Token
        /// </summary>
        /// <remarks>
        /// ユーザーのAPIトークンを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userApiTokenId">APIトークンのID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAPITokenWithHttpInfoAsync(string userUuid, long userApiTokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Email
        /// </summary>
        /// <remarks>
        /// ユーザーのメールアドレスを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEmailAsync(string userUuid, long userEmailId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Email
        /// </summary>
        /// <remarks>
        /// ユーザーのメールアドレスを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmailWithHttpInfoAsync(string userUuid, long userEmailId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete User
        /// </summary>
        /// <remarks>
        /// ユーザーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete User
        /// </summary>
        /// <remarks>
        /// ユーザーを削除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserWithHttpInfoAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Disable User
        /// </summary>
        /// <remarks>
        /// ユーザーを無効化します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> DisableUserAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Disable User
        /// </summary>
        /// <remarks>
        /// ユーザーを無効化します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> DisableUserWithHttpInfoAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Enable User
        /// </summary>
        /// <remarks>
        /// ユーザーを有効化します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> EnableUserAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Enable User
        /// </summary>
        /// <remarks>
        /// ユーザーを有効化します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> EnableUserWithHttpInfoAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// ユーザーを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// ユーザーを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserWithHttpInfoAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Introspect API Token
        /// </summary>
        /// <remarks>
        /// APIトークンの検証を行います。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPITokenIntrospectionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of APITokenIntrospectionResponse</returns>
        System.Threading.Tasks.Task<APITokenIntrospectionResponse> IntrospectAPITokenAsync(APITokenIntrospectionRequest aPITokenIntrospectionRequest = default(APITokenIntrospectionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Introspect API Token
        /// </summary>
        /// <remarks>
        /// APIトークンの検証を行います。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPITokenIntrospectionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (APITokenIntrospectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APITokenIntrospectionResponse>> IntrospectAPITokenWithHttpInfoAsync(APITokenIntrospectionRequest aPITokenIntrospectionRequest = default(APITokenIntrospectionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List API Tokens
        /// </summary>
        /// <remarks>
        /// ユーザーのAPIトークンのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserAPITokens</returns>
        System.Threading.Tasks.Task<UserAPITokens> ListAPITokensAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List API Tokens
        /// </summary>
        /// <remarks>
        /// ユーザーのAPIトークンのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserAPITokens)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAPITokens>> ListAPITokensWithHttpInfoAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// ユーザーのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">ユーザーのUUID (optional)</param>
        /// <param name="roleUuid">ロールのUUID (optional)</param>
        /// <param name="name">ユーザーの名前による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="nickname">ユーザーの表示名による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="email">メールアドレスによる部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="disabled">* &#x60;true&#x60; を指定した場合、無効化されているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、有効なユーザーのみを取得します。 * 指定を省略した場合、有効／無効にかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="isSuper">* &#x60;true&#x60; を指定した場合、スーパーユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、スーパーユーザー以外を取得します。 * 指定を省略した場合、スーパーユーザーであるかにかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="isTemporary">* &#x60;true&#x60; を指定した場合、一時パスワードを使用しているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、パスワードを設定済みのユーザーのみを取得します。 * 指定を省略した場合、一時パスワードを使用しているかにかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="minSignInAttemptCount">ログイン失敗回数の最小値。ログイン失敗回数がこの数値以上のユーザーを取得します。 (optional)</param>
        /// <param name="maxSignInAttemptCount">ログイン失敗回数の最大値。ログイン失敗回数がこの数値以下のユーザーを取得します。 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at   - last_sign_in_at (optional, default to &quot;name+&quot;)</param>
        /// <param name="page">取得するページの番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Users</returns>
        System.Threading.Tasks.Task<Users> ListUsersAsync(List<string> uuid = default(List<string>), List<string> roleUuid = default(List<string>), List<string> name = default(List<string>), List<string> nickname = default(List<string>), List<string> email = default(List<string>), bool? disabled = default(bool?), bool? isSuper = default(bool?), bool? isTemporary = default(bool?), int? minSignInAttemptCount = default(int?), int? maxSignInAttemptCount = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// ユーザーのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">ユーザーのUUID (optional)</param>
        /// <param name="roleUuid">ロールのUUID (optional)</param>
        /// <param name="name">ユーザーの名前による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="nickname">ユーザーの表示名による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="email">メールアドレスによる部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="disabled">* &#x60;true&#x60; を指定した場合、無効化されているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、有効なユーザーのみを取得します。 * 指定を省略した場合、有効／無効にかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="isSuper">* &#x60;true&#x60; を指定した場合、スーパーユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、スーパーユーザー以外を取得します。 * 指定を省略した場合、スーパーユーザーであるかにかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="isTemporary">* &#x60;true&#x60; を指定した場合、一時パスワードを使用しているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、パスワードを設定済みのユーザーのみを取得します。 * 指定を省略した場合、一時パスワードを使用しているかにかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="minSignInAttemptCount">ログイン失敗回数の最小値。ログイン失敗回数がこの数値以上のユーザーを取得します。 (optional)</param>
        /// <param name="maxSignInAttemptCount">ログイン失敗回数の最大値。ログイン失敗回数がこの数値以下のユーザーを取得します。 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at   - last_sign_in_at (optional, default to &quot;name+&quot;)</param>
        /// <param name="page">取得するページの番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        System.Threading.Tasks.Task<ApiResponse<Users>> ListUsersWithHttpInfoAsync(List<string> uuid = default(List<string>), List<string> roleUuid = default(List<string>), List<string> name = default(List<string>), List<string> nickname = default(List<string>), List<string> email = default(List<string>), bool? disabled = default(bool?), bool? isSuper = default(bool?), bool? isTemporary = default(bool?), int? minSignInAttemptCount = default(int?), int? maxSignInAttemptCount = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List User&#39;s Roles
        /// </summary>
        /// <remarks>
        /// ユーザーのロールのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Roles</returns>
        System.Threading.Tasks.Task<Roles> ListUsersRolesAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List User&#39;s Roles
        /// </summary>
        /// <remarks>
        /// ユーザーのロールのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Roles)</returns>
        System.Threading.Tasks.Task<ApiResponse<Roles>> ListUsersRolesWithHttpInfoAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send Verification Email
        /// </summary>
        /// <remarks>
        /// メールアドレスを確認するため確認メールを送信します。メールアドレス確認用トークンを使用します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserEmailVerification</returns>
        System.Threading.Tasks.Task<UserEmailVerification> SendVerificationEmailAsync(string userUuid, long userEmailId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send Verification Email
        /// </summary>
        /// <remarks>
        /// メールアドレスを確認するため確認メールを送信します。メールアドレス確認用トークンを使用します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserEmailVerification)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserEmailVerification>> SendVerificationEmailWithHttpInfoAsync(string userUuid, long userEmailId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unassign Role
        /// </summary>
        /// <remarks>
        /// ユーザーへのロールの割り当てを解除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="roleUuid">ロールのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnassignRoleAsync(string userUuid, string roleUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unassign Role
        /// </summary>
        /// <remarks>
        /// ユーザーへのロールの割り当てを解除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="roleUuid">ロールのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnassignRoleWithHttpInfoAsync(string userUuid, string roleUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unlock Password
        /// </summary>
        /// <remarks>
        /// ユーザーのパスワードのロックを解除します。このユーザーのログイン失敗回数は0にリセットされます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserPassword</returns>
        System.Threading.Tasks.Task<UserPassword> UnlockPasswordAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unlock Password
        /// </summary>
        /// <remarks>
        /// ユーザーのパスワードのロックを解除します。このユーザーのログイン失敗回数は0にリセットされます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserPassword)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserPassword>> UnlockPasswordWithHttpInfoAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update API Token
        /// </summary>
        /// <remarks>
        /// ユーザーのAPIトークンを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userApiTokenId">APIトークンのID</param>
        /// <param name="updateUserAPITokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserAPIToken</returns>
        System.Threading.Tasks.Task<UserAPIToken> UpdateAPITokenAsync(string userUuid, long userApiTokenId, UpdateUserAPITokenRequest updateUserAPITokenRequest = default(UpdateUserAPITokenRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update API Token
        /// </summary>
        /// <remarks>
        /// ユーザーのAPIトークンを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userApiTokenId">APIトークンのID</param>
        /// <param name="updateUserAPITokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserAPIToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAPIToken>> UpdateAPITokenWithHttpInfoAsync(string userUuid, long userApiTokenId, UpdateUserAPITokenRequest updateUserAPITokenRequest = default(UpdateUserAPITokenRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Email
        /// </summary>
        /// <remarks>
        /// ユーザーのメールアドレスを更新します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="patchEmailRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserEmail</returns>
        System.Threading.Tasks.Task<UserEmail> UpdateEmailAsync(string userUuid, long userEmailId, PatchEmailRequest patchEmailRequest = default(PatchEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Email
        /// </summary>
        /// <remarks>
        /// ユーザーのメールアドレスを更新します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="patchEmailRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserEmail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserEmail>> UpdateEmailWithHttpInfoAsync(string userUuid, long userEmailId, PatchEmailRequest patchEmailRequest = default(PatchEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Email as Verified
        /// </summary>
        /// <remarks>
        /// ユーザーのメールアドレスを確認済みにします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="updateEmailVerifiedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserEmail</returns>
        System.Threading.Tasks.Task<UserEmail> UpdateToVerifiedAsync(string userUuid, long userEmailId, UpdateEmailVerifiedRequest updateEmailVerifiedRequest = default(UpdateEmailVerifiedRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Email as Verified
        /// </summary>
        /// <remarks>
        /// ユーザーのメールアドレスを確認済みにします。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="updateEmailVerifiedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserEmail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserEmail>> UpdateToVerifiedWithHttpInfoAsync(string userUuid, long userEmailId, UpdateEmailVerifiedRequest updateEmailVerifiedRequest = default(UpdateEmailVerifiedRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// ユーザーを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UpdateUserAsync(string userUuid, PatchUserRequest patchUserRequest = default(PatchUserRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// ユーザーを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UpdateUserWithHttpInfoAsync(string userUuid, PatchUserRequest patchUserRequest = default(PatchUserRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthUsersApi : IAuthUsersApiSync, IAuthUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthUsersApi : IDisposable, IAuthUsersApi
    {
        private intdash.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthUsersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AuthUsersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthUsersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AuthUsersApi(string basePath)
        {
            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                new intdash.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new intdash.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthUsersApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AuthUsersApi(intdash.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new intdash.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthUsersApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthUsersApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthUsersApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthUsersApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                new intdash.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new intdash.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthUsersApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthUsersApi(HttpClient client, intdash.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new intdash.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthUsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AuthUsersApi(intdash.Client.ISynchronousClient client, intdash.Client.IAsynchronousClient asyncClient, intdash.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public intdash.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public intdash.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public intdash.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public intdash.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public intdash.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Assign Role ユーザーにロールを割り当てます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="roleUuid">ロールのUUID</param>
        /// <returns>Role</returns>
        public Role AssignRole(string userUuid, string roleUuid)
        {
            intdash.Client.ApiResponse<Role> localVarResponse = AssignRoleWithHttpInfo(userUuid, roleUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign Role ユーザーにロールを割り当てます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="roleUuid">ロールのUUID</param>
        /// <returns>ApiResponse of Role</returns>
        public intdash.Client.ApiResponse<Role> AssignRoleWithHttpInfo(string userUuid, string roleUuid)
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->AssignRole");

            // verify the required parameter 'roleUuid' is set
            if (roleUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'roleUuid' when calling AuthUsersApi->AssignRole");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("role_uuid", intdash.Client.ClientUtils.ParameterToString(roleUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Role>("/auth/users/{user_uuid}/roles/{role_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign Role ユーザーにロールを割り当てます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="roleUuid">ロールのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> AssignRoleAsync(string userUuid, string roleUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Role> localVarResponse = await AssignRoleWithHttpInfoAsync(userUuid, roleUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign Role ユーザーにロールを割り当てます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="roleUuid">ロールのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Role>> AssignRoleWithHttpInfoAsync(string userUuid, string roleUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->AssignRole");

            // verify the required parameter 'roleUuid' is set
            if (roleUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'roleUuid' when calling AuthUsersApi->AssignRole");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("role_uuid", intdash.Client.ClientUtils.ParameterToString(roleUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Role>("/auth/users/{user_uuid}/roles/{role_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create API Token ユーザーのAPIトークンを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createUserAPITokenRequest"> (optional)</param>
        /// <returns>UserAPIToken</returns>
        public UserAPIToken CreateAPIToken(string userUuid, CreateUserAPITokenRequest createUserAPITokenRequest = default(CreateUserAPITokenRequest))
        {
            intdash.Client.ApiResponse<UserAPIToken> localVarResponse = CreateAPITokenWithHttpInfo(userUuid, createUserAPITokenRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create API Token ユーザーのAPIトークンを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createUserAPITokenRequest"> (optional)</param>
        /// <returns>ApiResponse of UserAPIToken</returns>
        public intdash.Client.ApiResponse<UserAPIToken> CreateAPITokenWithHttpInfo(string userUuid, CreateUserAPITokenRequest createUserAPITokenRequest = default(CreateUserAPITokenRequest))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->CreateAPIToken");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.Data = createUserAPITokenRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserAPIToken>("/auth/users/{user_uuid}/tokens", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAPIToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create API Token ユーザーのAPIトークンを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createUserAPITokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserAPIToken</returns>
        public async System.Threading.Tasks.Task<UserAPIToken> CreateAPITokenAsync(string userUuid, CreateUserAPITokenRequest createUserAPITokenRequest = default(CreateUserAPITokenRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<UserAPIToken> localVarResponse = await CreateAPITokenWithHttpInfoAsync(userUuid, createUserAPITokenRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create API Token ユーザーのAPIトークンを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createUserAPITokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserAPIToken)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<UserAPIToken>> CreateAPITokenWithHttpInfoAsync(string userUuid, CreateUserAPITokenRequest createUserAPITokenRequest = default(CreateUserAPITokenRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->CreateAPIToken");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.Data = createUserAPITokenRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UserAPIToken>("/auth/users/{user_uuid}/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAPIToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Email ユーザーのメールアドレスを設定します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createEmailRequest"> (optional)</param>
        /// <returns>UserEmail</returns>
        public UserEmail CreateEmail(string userUuid, CreateEmailRequest createEmailRequest = default(CreateEmailRequest))
        {
            intdash.Client.ApiResponse<UserEmail> localVarResponse = CreateEmailWithHttpInfo(userUuid, createEmailRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Email ユーザーのメールアドレスを設定します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createEmailRequest"> (optional)</param>
        /// <returns>ApiResponse of UserEmail</returns>
        public intdash.Client.ApiResponse<UserEmail> CreateEmailWithHttpInfo(string userUuid, CreateEmailRequest createEmailRequest = default(CreateEmailRequest))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->CreateEmail");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.Data = createEmailRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserEmail>("/auth/users/{user_uuid}/emails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Email ユーザーのメールアドレスを設定します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createEmailRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserEmail</returns>
        public async System.Threading.Tasks.Task<UserEmail> CreateEmailAsync(string userUuid, CreateEmailRequest createEmailRequest = default(CreateEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<UserEmail> localVarResponse = await CreateEmailWithHttpInfoAsync(userUuid, createEmailRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Email ユーザーのメールアドレスを設定します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="createEmailRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserEmail)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<UserEmail>> CreateEmailWithHttpInfoAsync(string userUuid, CreateEmailRequest createEmailRequest = default(CreateEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->CreateEmail");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.Data = createEmailRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UserEmail>("/auth/users/{user_uuid}/emails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Temporary Password ユーザーのパスワードを、ランダムな一時パスワードに変更します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>UserPassword</returns>
        public UserPassword CreateTemporaryPassword(string userUuid)
        {
            intdash.Client.ApiResponse<UserPassword> localVarResponse = CreateTemporaryPasswordWithHttpInfo(userUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Temporary Password ユーザーのパスワードを、ランダムな一時パスワードに変更します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>ApiResponse of UserPassword</returns>
        public intdash.Client.ApiResponse<UserPassword> CreateTemporaryPasswordWithHttpInfo(string userUuid)
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->CreateTemporaryPassword");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UserPassword>("/auth/users/{user_uuid}/password", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTemporaryPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Temporary Password ユーザーのパスワードを、ランダムな一時パスワードに変更します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserPassword</returns>
        public async System.Threading.Tasks.Task<UserPassword> CreateTemporaryPasswordAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<UserPassword> localVarResponse = await CreateTemporaryPasswordWithHttpInfoAsync(userUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Temporary Password ユーザーのパスワードを、ランダムな一時パスワードに変更します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserPassword)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<UserPassword>> CreateTemporaryPasswordWithHttpInfoAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->CreateTemporaryPassword");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<UserPassword>("/auth/users/{user_uuid}/password", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTemporaryPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create User ユーザーを作成します。新しいユーザーには自動生成された一時パスワードが設定されます。 ユーザー作成のリクエストにメールアドレス（ &#x60;email&#x60; ）が含まれていた場合は、 そのメールアドレスに確認メールが送信されます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest"> (optional)</param>
        /// <returns>User</returns>
        public User CreateUser(CreateUserRequest createUserRequest = default(CreateUserRequest))
        {
            intdash.Client.ApiResponse<User> localVarResponse = CreateUserWithHttpInfo(createUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create User ユーザーを作成します。新しいユーザーには自動生成された一時パスワードが設定されます。 ユーザー作成のリクエストにメールアドレス（ &#x60;email&#x60; ）が含まれていた場合は、 そのメールアドレスに確認メールが送信されます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest"> (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public intdash.Client.ApiResponse<User> CreateUserWithHttpInfo(CreateUserRequest createUserRequest = default(CreateUserRequest))
        {
            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createUserRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<User>("/auth/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create User ユーザーを作成します。新しいユーザーには自動生成された一時パスワードが設定されます。 ユーザー作成のリクエストにメールアドレス（ &#x60;email&#x60; ）が含まれていた場合は、 そのメールアドレスに確認メールが送信されます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> CreateUserAsync(CreateUserRequest createUserRequest = default(CreateUserRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<User> localVarResponse = await CreateUserWithHttpInfoAsync(createUserRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create User ユーザーを作成します。新しいユーザーには自動生成された一時パスワードが設定されます。 ユーザー作成のリクエストにメールアドレス（ &#x60;email&#x60; ）が含まれていた場合は、 そのメールアドレスに確認メールが送信されます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<User>> CreateUserWithHttpInfoAsync(CreateUserRequest createUserRequest = default(CreateUserRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createUserRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<User>("/auth/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete API Token ユーザーのAPIトークンを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userApiTokenId">APIトークンのID</param>
        /// <returns></returns>
        public void DeleteAPIToken(string userUuid, long userApiTokenId)
        {
            DeleteAPITokenWithHttpInfo(userUuid, userApiTokenId);
        }

        /// <summary>
        /// Delete API Token ユーザーのAPIトークンを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userApiTokenId">APIトークンのID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> DeleteAPITokenWithHttpInfo(string userUuid, long userApiTokenId)
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->DeleteAPIToken");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_api_token_id", intdash.Client.ClientUtils.ParameterToString(userApiTokenId)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/users/{user_uuid}/tokens/{user_api_token_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAPIToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete API Token ユーザーのAPIトークンを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userApiTokenId">APIトークンのID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAPITokenAsync(string userUuid, long userApiTokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAPITokenWithHttpInfoAsync(userUuid, userApiTokenId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete API Token ユーザーのAPIトークンを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userApiTokenId">APIトークンのID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> DeleteAPITokenWithHttpInfoAsync(string userUuid, long userApiTokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->DeleteAPIToken");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_api_token_id", intdash.Client.ClientUtils.ParameterToString(userApiTokenId)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/users/{user_uuid}/tokens/{user_api_token_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAPIToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Email ユーザーのメールアドレスを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <returns></returns>
        public void DeleteEmail(string userUuid, long userEmailId)
        {
            DeleteEmailWithHttpInfo(userUuid, userEmailId);
        }

        /// <summary>
        /// Delete Email ユーザーのメールアドレスを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> DeleteEmailWithHttpInfo(string userUuid, long userEmailId)
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->DeleteEmail");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_email_id", intdash.Client.ClientUtils.ParameterToString(userEmailId)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/users/{user_uuid}/emails/{user_email_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Email ユーザーのメールアドレスを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEmailAsync(string userUuid, long userEmailId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteEmailWithHttpInfoAsync(userUuid, userEmailId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Email ユーザーのメールアドレスを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> DeleteEmailWithHttpInfoAsync(string userUuid, long userEmailId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->DeleteEmail");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_email_id", intdash.Client.ClientUtils.ParameterToString(userEmailId)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/users/{user_uuid}/emails/{user_email_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete User ユーザーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns></returns>
        public void DeleteUser(string userUuid)
        {
            DeleteUserWithHttpInfo(userUuid);
        }

        /// <summary>
        /// Delete User ユーザーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> DeleteUserWithHttpInfo(string userUuid)
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->DeleteUser");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/users/{user_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete User ユーザーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteUserWithHttpInfoAsync(userUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete User ユーザーを削除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> DeleteUserWithHttpInfoAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->DeleteUser");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/users/{user_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable User ユーザーを無効化します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>User</returns>
        public User DisableUser(string userUuid)
        {
            intdash.Client.ApiResponse<User> localVarResponse = DisableUserWithHttpInfo(userUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable User ユーザーを無効化します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>ApiResponse of User</returns>
        public intdash.Client.ApiResponse<User> DisableUserWithHttpInfo(string userUuid)
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->DisableUser");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<User>("/auth/users/{user_uuid}/disable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable User ユーザーを無効化します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> DisableUserAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<User> localVarResponse = await DisableUserWithHttpInfoAsync(userUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable User ユーザーを無効化します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<User>> DisableUserWithHttpInfoAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->DisableUser");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<User>("/auth/users/{user_uuid}/disable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable User ユーザーを有効化します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>User</returns>
        public User EnableUser(string userUuid)
        {
            intdash.Client.ApiResponse<User> localVarResponse = EnableUserWithHttpInfo(userUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable User ユーザーを有効化します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>ApiResponse of User</returns>
        public intdash.Client.ApiResponse<User> EnableUserWithHttpInfo(string userUuid)
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->EnableUser");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<User>("/auth/users/{user_uuid}/enable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnableUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable User ユーザーを有効化します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> EnableUserAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<User> localVarResponse = await EnableUserWithHttpInfoAsync(userUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable User ユーザーを有効化します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<User>> EnableUserWithHttpInfoAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->EnableUser");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<User>("/auth/users/{user_uuid}/enable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnableUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User ユーザーを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>User</returns>
        public User GetUser(string userUuid)
        {
            intdash.Client.ApiResponse<User> localVarResponse = GetUserWithHttpInfo(userUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User ユーザーを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>ApiResponse of User</returns>
        public intdash.Client.ApiResponse<User> GetUserWithHttpInfo(string userUuid)
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->GetUser");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<User>("/auth/users/{user_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User ユーザーを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<User> localVarResponse = await GetUserWithHttpInfoAsync(userUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User ユーザーを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<User>> GetUserWithHttpInfoAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->GetUser");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/auth/users/{user_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Introspect API Token APIトークンの検証を行います。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPITokenIntrospectionRequest"> (optional)</param>
        /// <returns>APITokenIntrospectionResponse</returns>
        public APITokenIntrospectionResponse IntrospectAPIToken(APITokenIntrospectionRequest aPITokenIntrospectionRequest = default(APITokenIntrospectionRequest))
        {
            intdash.Client.ApiResponse<APITokenIntrospectionResponse> localVarResponse = IntrospectAPITokenWithHttpInfo(aPITokenIntrospectionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Introspect API Token APIトークンの検証を行います。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPITokenIntrospectionRequest"> (optional)</param>
        /// <returns>ApiResponse of APITokenIntrospectionResponse</returns>
        public intdash.Client.ApiResponse<APITokenIntrospectionResponse> IntrospectAPITokenWithHttpInfo(APITokenIntrospectionRequest aPITokenIntrospectionRequest = default(APITokenIntrospectionRequest))
        {
            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = aPITokenIntrospectionRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<APITokenIntrospectionResponse>("/auth/users/tokens/introspection", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IntrospectAPIToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Introspect API Token APIトークンの検証を行います。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPITokenIntrospectionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of APITokenIntrospectionResponse</returns>
        public async System.Threading.Tasks.Task<APITokenIntrospectionResponse> IntrospectAPITokenAsync(APITokenIntrospectionRequest aPITokenIntrospectionRequest = default(APITokenIntrospectionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<APITokenIntrospectionResponse> localVarResponse = await IntrospectAPITokenWithHttpInfoAsync(aPITokenIntrospectionRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Introspect API Token APIトークンの検証を行います。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aPITokenIntrospectionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (APITokenIntrospectionResponse)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<APITokenIntrospectionResponse>> IntrospectAPITokenWithHttpInfoAsync(APITokenIntrospectionRequest aPITokenIntrospectionRequest = default(APITokenIntrospectionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = aPITokenIntrospectionRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<APITokenIntrospectionResponse>("/auth/users/tokens/introspection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IntrospectAPIToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List API Tokens ユーザーのAPIトークンのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>UserAPITokens</returns>
        public UserAPITokens ListAPITokens(string userUuid)
        {
            intdash.Client.ApiResponse<UserAPITokens> localVarResponse = ListAPITokensWithHttpInfo(userUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List API Tokens ユーザーのAPIトークンのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>ApiResponse of UserAPITokens</returns>
        public intdash.Client.ApiResponse<UserAPITokens> ListAPITokensWithHttpInfo(string userUuid)
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->ListAPITokens");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserAPITokens>("/auth/users/{user_uuid}/tokens", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAPITokens", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List API Tokens ユーザーのAPIトークンのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserAPITokens</returns>
        public async System.Threading.Tasks.Task<UserAPITokens> ListAPITokensAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<UserAPITokens> localVarResponse = await ListAPITokensWithHttpInfoAsync(userUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List API Tokens ユーザーのAPIトークンのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserAPITokens)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<UserAPITokens>> ListAPITokensWithHttpInfoAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->ListAPITokens");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserAPITokens>("/auth/users/{user_uuid}/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAPITokens", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Users ユーザーのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">ユーザーのUUID (optional)</param>
        /// <param name="roleUuid">ロールのUUID (optional)</param>
        /// <param name="name">ユーザーの名前による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="nickname">ユーザーの表示名による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="email">メールアドレスによる部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="disabled">* &#x60;true&#x60; を指定した場合、無効化されているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、有効なユーザーのみを取得します。 * 指定を省略した場合、有効／無効にかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="isSuper">* &#x60;true&#x60; を指定した場合、スーパーユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、スーパーユーザー以外を取得します。 * 指定を省略した場合、スーパーユーザーであるかにかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="isTemporary">* &#x60;true&#x60; を指定した場合、一時パスワードを使用しているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、パスワードを設定済みのユーザーのみを取得します。 * 指定を省略した場合、一時パスワードを使用しているかにかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="minSignInAttemptCount">ログイン失敗回数の最小値。ログイン失敗回数がこの数値以上のユーザーを取得します。 (optional)</param>
        /// <param name="maxSignInAttemptCount">ログイン失敗回数の最大値。ログイン失敗回数がこの数値以下のユーザーを取得します。 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at   - last_sign_in_at (optional, default to &quot;name+&quot;)</param>
        /// <param name="page">取得するページの番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 30)</param>
        /// <returns>Users</returns>
        public Users ListUsers(List<string> uuid = default(List<string>), List<string> roleUuid = default(List<string>), List<string> name = default(List<string>), List<string> nickname = default(List<string>), List<string> email = default(List<string>), bool? disabled = default(bool?), bool? isSuper = default(bool?), bool? isTemporary = default(bool?), int? minSignInAttemptCount = default(int?), int? maxSignInAttemptCount = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?))
        {
            intdash.Client.ApiResponse<Users> localVarResponse = ListUsersWithHttpInfo(uuid, roleUuid, name, nickname, email, disabled, isSuper, isTemporary, minSignInAttemptCount, maxSignInAttemptCount, sort, page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Users ユーザーのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">ユーザーのUUID (optional)</param>
        /// <param name="roleUuid">ロールのUUID (optional)</param>
        /// <param name="name">ユーザーの名前による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="nickname">ユーザーの表示名による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="email">メールアドレスによる部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="disabled">* &#x60;true&#x60; を指定した場合、無効化されているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、有効なユーザーのみを取得します。 * 指定を省略した場合、有効／無効にかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="isSuper">* &#x60;true&#x60; を指定した場合、スーパーユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、スーパーユーザー以外を取得します。 * 指定を省略した場合、スーパーユーザーであるかにかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="isTemporary">* &#x60;true&#x60; を指定した場合、一時パスワードを使用しているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、パスワードを設定済みのユーザーのみを取得します。 * 指定を省略した場合、一時パスワードを使用しているかにかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="minSignInAttemptCount">ログイン失敗回数の最小値。ログイン失敗回数がこの数値以上のユーザーを取得します。 (optional)</param>
        /// <param name="maxSignInAttemptCount">ログイン失敗回数の最大値。ログイン失敗回数がこの数値以下のユーザーを取得します。 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at   - last_sign_in_at (optional, default to &quot;name+&quot;)</param>
        /// <param name="page">取得するページの番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 30)</param>
        /// <returns>ApiResponse of Users</returns>
        public intdash.Client.ApiResponse<Users> ListUsersWithHttpInfo(List<string> uuid = default(List<string>), List<string> roleUuid = default(List<string>), List<string> name = default(List<string>), List<string> nickname = default(List<string>), List<string> email = default(List<string>), bool? disabled = default(bool?), bool? isSuper = default(bool?), bool? isTemporary = default(bool?), int? minSignInAttemptCount = default(int?), int? maxSignInAttemptCount = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?))
        {
            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "uuid", uuid));
            }
            if (roleUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "role_uuid", roleUuid));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "name", name));
            }
            if (nickname != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "nickname", nickname));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "email", email));
            }
            if (disabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "disabled", disabled));
            }
            if (isSuper != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "is_super", isSuper));
            }
            if (isTemporary != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "is_temporary", isTemporary));
            }
            if (minSignInAttemptCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "min_sign_in_attempt_count", minSignInAttemptCount));
            }
            if (maxSignInAttemptCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "max_sign_in_attempt_count", maxSignInAttemptCount));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Users>("/auth/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Users ユーザーのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">ユーザーのUUID (optional)</param>
        /// <param name="roleUuid">ロールのUUID (optional)</param>
        /// <param name="name">ユーザーの名前による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="nickname">ユーザーの表示名による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="email">メールアドレスによる部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="disabled">* &#x60;true&#x60; を指定した場合、無効化されているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、有効なユーザーのみを取得します。 * 指定を省略した場合、有効／無効にかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="isSuper">* &#x60;true&#x60; を指定した場合、スーパーユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、スーパーユーザー以外を取得します。 * 指定を省略した場合、スーパーユーザーであるかにかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="isTemporary">* &#x60;true&#x60; を指定した場合、一時パスワードを使用しているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、パスワードを設定済みのユーザーのみを取得します。 * 指定を省略した場合、一時パスワードを使用しているかにかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="minSignInAttemptCount">ログイン失敗回数の最小値。ログイン失敗回数がこの数値以上のユーザーを取得します。 (optional)</param>
        /// <param name="maxSignInAttemptCount">ログイン失敗回数の最大値。ログイン失敗回数がこの数値以下のユーザーを取得します。 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at   - last_sign_in_at (optional, default to &quot;name+&quot;)</param>
        /// <param name="page">取得するページの番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Users</returns>
        public async System.Threading.Tasks.Task<Users> ListUsersAsync(List<string> uuid = default(List<string>), List<string> roleUuid = default(List<string>), List<string> name = default(List<string>), List<string> nickname = default(List<string>), List<string> email = default(List<string>), bool? disabled = default(bool?), bool? isSuper = default(bool?), bool? isTemporary = default(bool?), int? minSignInAttemptCount = default(int?), int? maxSignInAttemptCount = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Users> localVarResponse = await ListUsersWithHttpInfoAsync(uuid, roleUuid, name, nickname, email, disabled, isSuper, isTemporary, minSignInAttemptCount, maxSignInAttemptCount, sort, page, perPage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Users ユーザーのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">ユーザーのUUID (optional)</param>
        /// <param name="roleUuid">ロールのUUID (optional)</param>
        /// <param name="name">ユーザーの名前による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="nickname">ユーザーの表示名による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="email">メールアドレスによる部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)</param>
        /// <param name="disabled">* &#x60;true&#x60; を指定した場合、無効化されているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、有効なユーザーのみを取得します。 * 指定を省略した場合、有効／無効にかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="isSuper">* &#x60;true&#x60; を指定した場合、スーパーユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、スーパーユーザー以外を取得します。 * 指定を省略した場合、スーパーユーザーであるかにかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="isTemporary">* &#x60;true&#x60; を指定した場合、一時パスワードを使用しているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、パスワードを設定済みのユーザーのみを取得します。 * 指定を省略した場合、一時パスワードを使用しているかにかかわらずユーザーを取得します。 (optional)</param>
        /// <param name="minSignInAttemptCount">ログイン失敗回数の最小値。ログイン失敗回数がこの数値以上のユーザーを取得します。 (optional)</param>
        /// <param name="maxSignInAttemptCount">ログイン失敗回数の最大値。ログイン失敗回数がこの数値以下のユーザーを取得します。 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at   - last_sign_in_at (optional, default to &quot;name+&quot;)</param>
        /// <param name="page">取得するページの番号 (optional, default to 1)</param>
        /// <param name="perPage">1回のリクエストで取得する件数 (optional, default to 30)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Users>> ListUsersWithHttpInfoAsync(List<string> uuid = default(List<string>), List<string> roleUuid = default(List<string>), List<string> name = default(List<string>), List<string> nickname = default(List<string>), List<string> email = default(List<string>), bool? disabled = default(bool?), bool? isSuper = default(bool?), bool? isTemporary = default(bool?), int? minSignInAttemptCount = default(int?), int? maxSignInAttemptCount = default(int?), string sort = default(string), int? page = default(int?), int? perPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "uuid", uuid));
            }
            if (roleUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "role_uuid", roleUuid));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "name", name));
            }
            if (nickname != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "nickname", nickname));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "email", email));
            }
            if (disabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "disabled", disabled));
            }
            if (isSuper != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "is_super", isSuper));
            }
            if (isTemporary != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "is_temporary", isTemporary));
            }
            if (minSignInAttemptCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "min_sign_in_attempt_count", minSignInAttemptCount));
            }
            if (maxSignInAttemptCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "max_sign_in_attempt_count", maxSignInAttemptCount));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Users>("/auth/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List User&#39;s Roles ユーザーのロールのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>Roles</returns>
        public Roles ListUsersRoles(string userUuid)
        {
            intdash.Client.ApiResponse<Roles> localVarResponse = ListUsersRolesWithHttpInfo(userUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List User&#39;s Roles ユーザーのロールのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>ApiResponse of Roles</returns>
        public intdash.Client.ApiResponse<Roles> ListUsersRolesWithHttpInfo(string userUuid)
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->ListUsersRoles");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Roles>("/auth/users/{user_uuid}/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUsersRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List User&#39;s Roles ユーザーのロールのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Roles</returns>
        public async System.Threading.Tasks.Task<Roles> ListUsersRolesAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Roles> localVarResponse = await ListUsersRolesWithHttpInfoAsync(userUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List User&#39;s Roles ユーザーのロールのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Roles)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Roles>> ListUsersRolesWithHttpInfoAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->ListUsersRoles");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Roles>("/auth/users/{user_uuid}/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUsersRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Verification Email メールアドレスを確認するため確認メールを送信します。メールアドレス確認用トークンを使用します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <returns>UserEmailVerification</returns>
        public UserEmailVerification SendVerificationEmail(string userUuid, long userEmailId)
        {
            intdash.Client.ApiResponse<UserEmailVerification> localVarResponse = SendVerificationEmailWithHttpInfo(userUuid, userEmailId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Verification Email メールアドレスを確認するため確認メールを送信します。メールアドレス確認用トークンを使用します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <returns>ApiResponse of UserEmailVerification</returns>
        public intdash.Client.ApiResponse<UserEmailVerification> SendVerificationEmailWithHttpInfo(string userUuid, long userEmailId)
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->SendVerificationEmail");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_email_id", intdash.Client.ClientUtils.ParameterToString(userEmailId)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UserEmailVerification>("/auth/users/{user_uuid}/emails/{user_email_id}/verification", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendVerificationEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Verification Email メールアドレスを確認するため確認メールを送信します。メールアドレス確認用トークンを使用します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserEmailVerification</returns>
        public async System.Threading.Tasks.Task<UserEmailVerification> SendVerificationEmailAsync(string userUuid, long userEmailId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<UserEmailVerification> localVarResponse = await SendVerificationEmailWithHttpInfoAsync(userUuid, userEmailId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send Verification Email メールアドレスを確認するため確認メールを送信します。メールアドレス確認用トークンを使用します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserEmailVerification)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<UserEmailVerification>> SendVerificationEmailWithHttpInfoAsync(string userUuid, long userEmailId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->SendVerificationEmail");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_email_id", intdash.Client.ClientUtils.ParameterToString(userEmailId)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<UserEmailVerification>("/auth/users/{user_uuid}/emails/{user_email_id}/verification", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendVerificationEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unassign Role ユーザーへのロールの割り当てを解除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="roleUuid">ロールのUUID</param>
        /// <returns></returns>
        public void UnassignRole(string userUuid, string roleUuid)
        {
            UnassignRoleWithHttpInfo(userUuid, roleUuid);
        }

        /// <summary>
        /// Unassign Role ユーザーへのロールの割り当てを解除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="roleUuid">ロールのUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> UnassignRoleWithHttpInfo(string userUuid, string roleUuid)
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->UnassignRole");

            // verify the required parameter 'roleUuid' is set
            if (roleUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'roleUuid' when calling AuthUsersApi->UnassignRole");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("role_uuid", intdash.Client.ClientUtils.ParameterToString(roleUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/users/{user_uuid}/roles/{role_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnassignRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unassign Role ユーザーへのロールの割り当てを解除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="roleUuid">ロールのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnassignRoleAsync(string userUuid, string roleUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UnassignRoleWithHttpInfoAsync(userUuid, roleUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Unassign Role ユーザーへのロールの割り当てを解除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="roleUuid">ロールのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> UnassignRoleWithHttpInfoAsync(string userUuid, string roleUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->UnassignRole");

            // verify the required parameter 'roleUuid' is set
            if (roleUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'roleUuid' when calling AuthUsersApi->UnassignRole");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("role_uuid", intdash.Client.ClientUtils.ParameterToString(roleUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/users/{user_uuid}/roles/{role_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnassignRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlock Password ユーザーのパスワードのロックを解除します。このユーザーのログイン失敗回数は0にリセットされます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>UserPassword</returns>
        public UserPassword UnlockPassword(string userUuid)
        {
            intdash.Client.ApiResponse<UserPassword> localVarResponse = UnlockPasswordWithHttpInfo(userUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unlock Password ユーザーのパスワードのロックを解除します。このユーザーのログイン失敗回数は0にリセットされます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <returns>ApiResponse of UserPassword</returns>
        public intdash.Client.ApiResponse<UserPassword> UnlockPasswordWithHttpInfo(string userUuid)
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->UnlockPassword");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UserPassword>("/auth/users/{user_uuid}/password/unlock", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlockPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlock Password ユーザーのパスワードのロックを解除します。このユーザーのログイン失敗回数は0にリセットされます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserPassword</returns>
        public async System.Threading.Tasks.Task<UserPassword> UnlockPasswordAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<UserPassword> localVarResponse = await UnlockPasswordWithHttpInfoAsync(userUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unlock Password ユーザーのパスワードのロックを解除します。このユーザーのログイン失敗回数は0にリセットされます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserPassword)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<UserPassword>> UnlockPasswordWithHttpInfoAsync(string userUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->UnlockPassword");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<UserPassword>("/auth/users/{user_uuid}/password/unlock", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlockPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update API Token ユーザーのAPIトークンを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userApiTokenId">APIトークンのID</param>
        /// <param name="updateUserAPITokenRequest"> (optional)</param>
        /// <returns>UserAPIToken</returns>
        public UserAPIToken UpdateAPIToken(string userUuid, long userApiTokenId, UpdateUserAPITokenRequest updateUserAPITokenRequest = default(UpdateUserAPITokenRequest))
        {
            intdash.Client.ApiResponse<UserAPIToken> localVarResponse = UpdateAPITokenWithHttpInfo(userUuid, userApiTokenId, updateUserAPITokenRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update API Token ユーザーのAPIトークンを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userApiTokenId">APIトークンのID</param>
        /// <param name="updateUserAPITokenRequest"> (optional)</param>
        /// <returns>ApiResponse of UserAPIToken</returns>
        public intdash.Client.ApiResponse<UserAPIToken> UpdateAPITokenWithHttpInfo(string userUuid, long userApiTokenId, UpdateUserAPITokenRequest updateUserAPITokenRequest = default(UpdateUserAPITokenRequest))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->UpdateAPIToken");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_api_token_id", intdash.Client.ClientUtils.ParameterToString(userApiTokenId)); // path parameter
            localVarRequestOptions.Data = updateUserAPITokenRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UserAPIToken>("/auth/users/{user_uuid}/tokens/{user_api_token_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAPIToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update API Token ユーザーのAPIトークンを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userApiTokenId">APIトークンのID</param>
        /// <param name="updateUserAPITokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserAPIToken</returns>
        public async System.Threading.Tasks.Task<UserAPIToken> UpdateAPITokenAsync(string userUuid, long userApiTokenId, UpdateUserAPITokenRequest updateUserAPITokenRequest = default(UpdateUserAPITokenRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<UserAPIToken> localVarResponse = await UpdateAPITokenWithHttpInfoAsync(userUuid, userApiTokenId, updateUserAPITokenRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update API Token ユーザーのAPIトークンを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userApiTokenId">APIトークンのID</param>
        /// <param name="updateUserAPITokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserAPIToken)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<UserAPIToken>> UpdateAPITokenWithHttpInfoAsync(string userUuid, long userApiTokenId, UpdateUserAPITokenRequest updateUserAPITokenRequest = default(UpdateUserAPITokenRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->UpdateAPIToken");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; charset=utf-8"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_api_token_id", intdash.Client.ClientUtils.ParameterToString(userApiTokenId)); // path parameter
            localVarRequestOptions.Data = updateUserAPITokenRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<UserAPIToken>("/auth/users/{user_uuid}/tokens/{user_api_token_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAPIToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Email ユーザーのメールアドレスを更新します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="patchEmailRequest"> (optional)</param>
        /// <returns>UserEmail</returns>
        public UserEmail UpdateEmail(string userUuid, long userEmailId, PatchEmailRequest patchEmailRequest = default(PatchEmailRequest))
        {
            intdash.Client.ApiResponse<UserEmail> localVarResponse = UpdateEmailWithHttpInfo(userUuid, userEmailId, patchEmailRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Email ユーザーのメールアドレスを更新します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="patchEmailRequest"> (optional)</param>
        /// <returns>ApiResponse of UserEmail</returns>
        public intdash.Client.ApiResponse<UserEmail> UpdateEmailWithHttpInfo(string userUuid, long userEmailId, PatchEmailRequest patchEmailRequest = default(PatchEmailRequest))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->UpdateEmail");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_email_id", intdash.Client.ClientUtils.ParameterToString(userEmailId)); // path parameter
            localVarRequestOptions.Data = patchEmailRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UserEmail>("/auth/users/{user_uuid}/emails/{user_email_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Email ユーザーのメールアドレスを更新します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="patchEmailRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserEmail</returns>
        public async System.Threading.Tasks.Task<UserEmail> UpdateEmailAsync(string userUuid, long userEmailId, PatchEmailRequest patchEmailRequest = default(PatchEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<UserEmail> localVarResponse = await UpdateEmailWithHttpInfoAsync(userUuid, userEmailId, patchEmailRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Email ユーザーのメールアドレスを更新します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="patchEmailRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserEmail)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<UserEmail>> UpdateEmailWithHttpInfoAsync(string userUuid, long userEmailId, PatchEmailRequest patchEmailRequest = default(PatchEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->UpdateEmail");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_email_id", intdash.Client.ClientUtils.ParameterToString(userEmailId)); // path parameter
            localVarRequestOptions.Data = patchEmailRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<UserEmail>("/auth/users/{user_uuid}/emails/{user_email_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Email as Verified ユーザーのメールアドレスを確認済みにします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="updateEmailVerifiedRequest"> (optional)</param>
        /// <returns>UserEmail</returns>
        public UserEmail UpdateToVerified(string userUuid, long userEmailId, UpdateEmailVerifiedRequest updateEmailVerifiedRequest = default(UpdateEmailVerifiedRequest))
        {
            intdash.Client.ApiResponse<UserEmail> localVarResponse = UpdateToVerifiedWithHttpInfo(userUuid, userEmailId, updateEmailVerifiedRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Email as Verified ユーザーのメールアドレスを確認済みにします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="updateEmailVerifiedRequest"> (optional)</param>
        /// <returns>ApiResponse of UserEmail</returns>
        public intdash.Client.ApiResponse<UserEmail> UpdateToVerifiedWithHttpInfo(string userUuid, long userEmailId, UpdateEmailVerifiedRequest updateEmailVerifiedRequest = default(UpdateEmailVerifiedRequest))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->UpdateToVerified");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_email_id", intdash.Client.ClientUtils.ParameterToString(userEmailId)); // path parameter
            localVarRequestOptions.Data = updateEmailVerifiedRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UserEmail>("/auth/users/{user_uuid}/emails/{user_email_id}/verified", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateToVerified", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Email as Verified ユーザーのメールアドレスを確認済みにします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="updateEmailVerifiedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserEmail</returns>
        public async System.Threading.Tasks.Task<UserEmail> UpdateToVerifiedAsync(string userUuid, long userEmailId, UpdateEmailVerifiedRequest updateEmailVerifiedRequest = default(UpdateEmailVerifiedRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<UserEmail> localVarResponse = await UpdateToVerifiedWithHttpInfoAsync(userUuid, userEmailId, updateEmailVerifiedRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Email as Verified ユーザーのメールアドレスを確認済みにします。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="userEmailId">ユーザーのメールアドレスのID</param>
        /// <param name="updateEmailVerifiedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserEmail)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<UserEmail>> UpdateToVerifiedWithHttpInfoAsync(string userUuid, long userEmailId, UpdateEmailVerifiedRequest updateEmailVerifiedRequest = default(UpdateEmailVerifiedRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->UpdateToVerified");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_email_id", intdash.Client.ClientUtils.ParameterToString(userEmailId)); // path parameter
            localVarRequestOptions.Data = updateEmailVerifiedRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<UserEmail>("/auth/users/{user_uuid}/emails/{user_email_id}/verified", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateToVerified", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User ユーザーを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <returns>User</returns>
        public User UpdateUser(string userUuid, PatchUserRequest patchUserRequest = default(PatchUserRequest))
        {
            intdash.Client.ApiResponse<User> localVarResponse = UpdateUserWithHttpInfo(userUuid, patchUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update User ユーザーを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public intdash.Client.ApiResponse<User> UpdateUserWithHttpInfo(string userUuid, PatchUserRequest patchUserRequest = default(PatchUserRequest))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->UpdateUser");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.Data = patchUserRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<User>("/auth/users/{user_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User ユーザーを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UpdateUserAsync(string userUuid, PatchUserRequest patchUserRequest = default(PatchUserRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<User> localVarResponse = await UpdateUserWithHttpInfoAsync(userUuid, patchUserRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update User ユーザーを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUuid"></param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<User>> UpdateUserWithHttpInfoAsync(string userUuid, PatchUserRequest patchUserRequest = default(PatchUserRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUuid' is set
            if (userUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'userUuid' when calling AuthUsersApi->UpdateUser");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_uuid", intdash.Client.ClientUtils.ParameterToString(userUuid)); // path parameter
            localVarRequestOptions.Data = patchUserRequest;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<User>("/auth/users/{user_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
