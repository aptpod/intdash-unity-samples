/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using intdash.Client;
using intdash.Model;

namespace intdash.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeasUploadingMeasurementsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List Uploading Statuses of Measurements
        /// </summary>
        /// <remarks>
        /// （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to created_at)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>MeasurementUploadStatusesGetResponse</returns>
        [Obsolete]
        MeasurementUploadStatusesGetResponse ListMeasurementStatuses(int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string));

        /// <summary>
        /// List Uploading Statuses of Measurements
        /// </summary>
        /// <remarks>
        /// （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to created_at)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>ApiResponse of MeasurementUploadStatusesGetResponse</returns>
        [Obsolete]
        ApiResponse<MeasurementUploadStatusesGetResponse> ListMeasurementStatusesWithHttpInfo(int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string));
        /// <summary>
        /// List Project Uploading Statuses of Measurements
        /// </summary>
        /// <remarks>
        /// （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to created_at)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>MeasurementUploadStatusesGetResponse</returns>
        [Obsolete]
        MeasurementUploadStatusesGetResponse ListProjectMeasurementStatuses(string projectUuid, int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string));

        /// <summary>
        /// List Project Uploading Statuses of Measurements
        /// </summary>
        /// <remarks>
        /// （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to created_at)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>ApiResponse of MeasurementUploadStatusesGetResponse</returns>
        [Obsolete]
        ApiResponse<MeasurementUploadStatusesGetResponse> ListProjectMeasurementStatusesWithHttpInfo(string projectUuid, int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string));
        /// <summary>
        /// Create Measurement from CSV File
        /// </summary>
        /// <remarks>
        /// CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="baseTime">計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)</param>
        /// <param name="baseTimeType">基準時刻のタイプ (optional, default to edge_rtc)</param>
        /// <param name="channel">計測のチャンネル（十進表記の文字列） (optional)</param>
        /// <param name="measEnd">&#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <returns>MeasurementUploadPostResponse</returns>
        MeasurementUploadPostResponse UploadMeasurement(Guid edgeUuid, FileParameter dataFile, DateTime? baseTime = default(DateTime?), string baseTimeType = default(string), int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string));

        /// <summary>
        /// Create Measurement from CSV File
        /// </summary>
        /// <remarks>
        /// CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="baseTime">計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)</param>
        /// <param name="baseTimeType">基準時刻のタイプ (optional, default to edge_rtc)</param>
        /// <param name="channel">計測のチャンネル（十進表記の文字列） (optional)</param>
        /// <param name="measEnd">&#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <returns>ApiResponse of MeasurementUploadPostResponse</returns>
        ApiResponse<MeasurementUploadPostResponse> UploadMeasurementWithHttpInfo(Guid edgeUuid, FileParameter dataFile, DateTime? baseTime = default(DateTime?), string baseTimeType = default(string), int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string));
        /// <summary>
        /// Store Data Points by CSV File
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/upload&#x60; を使用してください）  CSVファイルをアップロードし、計測にデータを追加します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="channel">作成された計測のチャンネル (optional)</param>
        /// <param name="measEnd">* &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <returns>MeasurementUploadPostResponse</returns>
        [Obsolete]
        MeasurementUploadPostResponse UploadMeasurementIntoMeasurement(string measurementUuid, FileParameter dataFile, int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string));

        /// <summary>
        /// Store Data Points by CSV File
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/upload&#x60; を使用してください）  CSVファイルをアップロードし、計測にデータを追加します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="channel">作成された計測のチャンネル (optional)</param>
        /// <param name="measEnd">* &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <returns>ApiResponse of MeasurementUploadPostResponse</returns>
        [Obsolete]
        ApiResponse<MeasurementUploadPostResponse> UploadMeasurementIntoMeasurementWithHttpInfo(string measurementUuid, FileParameter dataFile, int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string));
        /// <summary>
        /// Create Project Measurement from CSV File
        /// </summary>
        /// <remarks>
        /// CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="baseTime">計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)</param>
        /// <param name="baseTimeType">基準時刻のタイプ (optional, default to edge_rtc)</param>
        /// <param name="channel">計測のチャンネル（十進表記の文字列） (optional)</param>
        /// <param name="measEnd">&#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <returns>MeasurementUploadPostResponse</returns>
        MeasurementUploadPostResponse UploadProjectMeasurement(string projectUuid, Guid edgeUuid, FileParameter dataFile, DateTime? baseTime = default(DateTime?), string baseTimeType = default(string), int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string));

        /// <summary>
        /// Create Project Measurement from CSV File
        /// </summary>
        /// <remarks>
        /// CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="baseTime">計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)</param>
        /// <param name="baseTimeType">基準時刻のタイプ (optional, default to edge_rtc)</param>
        /// <param name="channel">計測のチャンネル（十進表記の文字列） (optional)</param>
        /// <param name="measEnd">&#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <returns>ApiResponse of MeasurementUploadPostResponse</returns>
        ApiResponse<MeasurementUploadPostResponse> UploadProjectMeasurementWithHttpInfo(string projectUuid, Guid edgeUuid, FileParameter dataFile, DateTime? baseTime = default(DateTime?), string baseTimeType = default(string), int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string));
        /// <summary>
        /// Store Project Data Points by CSV File
        /// </summary>
        /// <remarks>
        /// CSVファイルをアップロードし、計測にデータを追加します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="channel">作成された計測のチャンネル (optional)</param>
        /// <param name="measEnd">* &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <returns>MeasurementUploadPostResponse</returns>
        MeasurementUploadPostResponse UploadProjectMeasurementIntoMeasurement(string projectUuid, string measurementUuid, FileParameter dataFile, int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string));

        /// <summary>
        /// Store Project Data Points by CSV File
        /// </summary>
        /// <remarks>
        /// CSVファイルをアップロードし、計測にデータを追加します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="channel">作成された計測のチャンネル (optional)</param>
        /// <param name="measEnd">* &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <returns>ApiResponse of MeasurementUploadPostResponse</returns>
        ApiResponse<MeasurementUploadPostResponse> UploadProjectMeasurementIntoMeasurementWithHttpInfo(string projectUuid, string measurementUuid, FileParameter dataFile, int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeasUploadingMeasurementsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List Uploading Statuses of Measurements
        /// </summary>
        /// <remarks>
        /// （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to created_at)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementUploadStatusesGetResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MeasurementUploadStatusesGetResponse> ListMeasurementStatusesAsync(int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Uploading Statuses of Measurements
        /// </summary>
        /// <remarks>
        /// （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to created_at)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementUploadStatusesGetResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MeasurementUploadStatusesGetResponse>> ListMeasurementStatusesWithHttpInfoAsync(int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Project Uploading Statuses of Measurements
        /// </summary>
        /// <remarks>
        /// （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to created_at)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementUploadStatusesGetResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MeasurementUploadStatusesGetResponse> ListProjectMeasurementStatusesAsync(string projectUuid, int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Project Uploading Statuses of Measurements
        /// </summary>
        /// <remarks>
        /// （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to created_at)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementUploadStatusesGetResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MeasurementUploadStatusesGetResponse>> ListProjectMeasurementStatusesWithHttpInfoAsync(string projectUuid, int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Measurement from CSV File
        /// </summary>
        /// <remarks>
        /// CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="baseTime">計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)</param>
        /// <param name="baseTimeType">基準時刻のタイプ (optional, default to edge_rtc)</param>
        /// <param name="channel">計測のチャンネル（十進表記の文字列） (optional)</param>
        /// <param name="measEnd">&#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementUploadPostResponse</returns>
        System.Threading.Tasks.Task<MeasurementUploadPostResponse> UploadMeasurementAsync(Guid edgeUuid, FileParameter dataFile, DateTime? baseTime = default(DateTime?), string baseTimeType = default(string), int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Measurement from CSV File
        /// </summary>
        /// <remarks>
        /// CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="baseTime">計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)</param>
        /// <param name="baseTimeType">基準時刻のタイプ (optional, default to edge_rtc)</param>
        /// <param name="channel">計測のチャンネル（十進表記の文字列） (optional)</param>
        /// <param name="measEnd">&#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementUploadPostResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeasurementUploadPostResponse>> UploadMeasurementWithHttpInfoAsync(Guid edgeUuid, FileParameter dataFile, DateTime? baseTime = default(DateTime?), string baseTimeType = default(string), int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Store Data Points by CSV File
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/upload&#x60; を使用してください）  CSVファイルをアップロードし、計測にデータを追加します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="channel">作成された計測のチャンネル (optional)</param>
        /// <param name="measEnd">* &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementUploadPostResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MeasurementUploadPostResponse> UploadMeasurementIntoMeasurementAsync(string measurementUuid, FileParameter dataFile, int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Store Data Points by CSV File
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/upload&#x60; を使用してください）  CSVファイルをアップロードし、計測にデータを追加します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="channel">作成された計測のチャンネル (optional)</param>
        /// <param name="measEnd">* &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementUploadPostResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MeasurementUploadPostResponse>> UploadMeasurementIntoMeasurementWithHttpInfoAsync(string measurementUuid, FileParameter dataFile, int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Project Measurement from CSV File
        /// </summary>
        /// <remarks>
        /// CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="baseTime">計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)</param>
        /// <param name="baseTimeType">基準時刻のタイプ (optional, default to edge_rtc)</param>
        /// <param name="channel">計測のチャンネル（十進表記の文字列） (optional)</param>
        /// <param name="measEnd">&#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementUploadPostResponse</returns>
        System.Threading.Tasks.Task<MeasurementUploadPostResponse> UploadProjectMeasurementAsync(string projectUuid, Guid edgeUuid, FileParameter dataFile, DateTime? baseTime = default(DateTime?), string baseTimeType = default(string), int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Project Measurement from CSV File
        /// </summary>
        /// <remarks>
        /// CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="baseTime">計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)</param>
        /// <param name="baseTimeType">基準時刻のタイプ (optional, default to edge_rtc)</param>
        /// <param name="channel">計測のチャンネル（十進表記の文字列） (optional)</param>
        /// <param name="measEnd">&#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementUploadPostResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeasurementUploadPostResponse>> UploadProjectMeasurementWithHttpInfoAsync(string projectUuid, Guid edgeUuid, FileParameter dataFile, DateTime? baseTime = default(DateTime?), string baseTimeType = default(string), int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Store Project Data Points by CSV File
        /// </summary>
        /// <remarks>
        /// CSVファイルをアップロードし、計測にデータを追加します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="channel">作成された計測のチャンネル (optional)</param>
        /// <param name="measEnd">* &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementUploadPostResponse</returns>
        System.Threading.Tasks.Task<MeasurementUploadPostResponse> UploadProjectMeasurementIntoMeasurementAsync(string projectUuid, string measurementUuid, FileParameter dataFile, int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Store Project Data Points by CSV File
        /// </summary>
        /// <remarks>
        /// CSVファイルをアップロードし、計測にデータを追加します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="channel">作成された計測のチャンネル (optional)</param>
        /// <param name="measEnd">* &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementUploadPostResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeasurementUploadPostResponse>> UploadProjectMeasurementIntoMeasurementWithHttpInfoAsync(string projectUuid, string measurementUuid, FileParameter dataFile, int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeasUploadingMeasurementsApi : IMeasUploadingMeasurementsApiSync, IMeasUploadingMeasurementsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MeasUploadingMeasurementsApi : IDisposable, IMeasUploadingMeasurementsApi
    {
        private intdash.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasUploadingMeasurementsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public MeasUploadingMeasurementsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasUploadingMeasurementsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public MeasUploadingMeasurementsApi(string basePath)
        {
            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                new intdash.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new intdash.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasUploadingMeasurementsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public MeasUploadingMeasurementsApi(intdash.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new intdash.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasUploadingMeasurementsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MeasUploadingMeasurementsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasUploadingMeasurementsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MeasUploadingMeasurementsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                new intdash.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new intdash.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasUploadingMeasurementsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MeasUploadingMeasurementsApi(HttpClient client, intdash.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new intdash.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasUploadingMeasurementsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public MeasUploadingMeasurementsApi(intdash.Client.ISynchronousClient client, intdash.Client.IAsynchronousClient asyncClient, intdash.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public intdash.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public intdash.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public intdash.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public intdash.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public intdash.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List Uploading Statuses of Measurements （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to created_at)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>MeasurementUploadStatusesGetResponse</returns>
        [Obsolete]
        public MeasurementUploadStatusesGetResponse ListMeasurementStatuses(int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string))
        {
            intdash.Client.ApiResponse<MeasurementUploadStatusesGetResponse> localVarResponse = ListMeasurementStatusesWithHttpInfo(limit, sort, page, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Uploading Statuses of Measurements （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to created_at)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>ApiResponse of MeasurementUploadStatusesGetResponse</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MeasurementUploadStatusesGetResponse> ListMeasurementStatusesWithHttpInfo(int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string))
        {
            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeasurementUploadStatusesGetResponse>("/v1/measurements/upload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMeasurementStatuses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Uploading Statuses of Measurements （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to created_at)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementUploadStatusesGetResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MeasurementUploadStatusesGetResponse> ListMeasurementStatusesAsync(int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementUploadStatusesGetResponse> localVarResponse = await ListMeasurementStatusesWithHttpInfoAsync(limit, sort, page, order, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Uploading Statuses of Measurements （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to created_at)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementUploadStatusesGetResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementUploadStatusesGetResponse>> ListMeasurementStatusesWithHttpInfoAsync(int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeasurementUploadStatusesGetResponse>("/v1/measurements/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMeasurementStatuses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Project Uploading Statuses of Measurements （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to created_at)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>MeasurementUploadStatusesGetResponse</returns>
        [Obsolete]
        public MeasurementUploadStatusesGetResponse ListProjectMeasurementStatuses(string projectUuid, int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string))
        {
            intdash.Client.ApiResponse<MeasurementUploadStatusesGetResponse> localVarResponse = ListProjectMeasurementStatusesWithHttpInfo(projectUuid, limit, sort, page, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Project Uploading Statuses of Measurements （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to created_at)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>ApiResponse of MeasurementUploadStatusesGetResponse</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MeasurementUploadStatusesGetResponse> ListProjectMeasurementStatusesWithHttpInfo(string projectUuid, int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasUploadingMeasurementsApi->ListProjectMeasurementStatuses");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeasurementUploadStatusesGetResponse>("/v1/projects/{project_uuid}/measurements/upload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProjectMeasurementStatuses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Project Uploading Statuses of Measurements （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to created_at)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementUploadStatusesGetResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MeasurementUploadStatusesGetResponse> ListProjectMeasurementStatusesAsync(string projectUuid, int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementUploadStatusesGetResponse> localVarResponse = await ListProjectMeasurementStatusesWithHttpInfoAsync(projectUuid, limit, sort, page, order, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Project Uploading Statuses of Measurements （ **Deprecated** このエンドポイントではなく、&#x60;GET /measurements/jobs&#x60; を使用してください。） 計測のアップロードのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to created_at)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementUploadStatusesGetResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementUploadStatusesGetResponse>> ListProjectMeasurementStatusesWithHttpInfoAsync(string projectUuid, int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasUploadingMeasurementsApi->ListProjectMeasurementStatuses");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeasurementUploadStatusesGetResponse>("/v1/projects/{project_uuid}/measurements/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProjectMeasurementStatuses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Measurement from CSV File CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="baseTime">計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)</param>
        /// <param name="baseTimeType">基準時刻のタイプ (optional, default to edge_rtc)</param>
        /// <param name="channel">計測のチャンネル（十進表記の文字列） (optional)</param>
        /// <param name="measEnd">&#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <returns>MeasurementUploadPostResponse</returns>
        public MeasurementUploadPostResponse UploadMeasurement(Guid edgeUuid, FileParameter dataFile, DateTime? baseTime = default(DateTime?), string baseTimeType = default(string), int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string))
        {
            intdash.Client.ApiResponse<MeasurementUploadPostResponse> localVarResponse = UploadMeasurementWithHttpInfo(edgeUuid, dataFile, baseTime, baseTimeType, channel, measEnd, labelDataType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Measurement from CSV File CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="baseTime">計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)</param>
        /// <param name="baseTimeType">基準時刻のタイプ (optional, default to edge_rtc)</param>
        /// <param name="channel">計測のチャンネル（十進表記の文字列） (optional)</param>
        /// <param name="measEnd">&#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <returns>ApiResponse of MeasurementUploadPostResponse</returns>
        public intdash.Client.ApiResponse<MeasurementUploadPostResponse> UploadMeasurementWithHttpInfo(Guid edgeUuid, FileParameter dataFile, DateTime? baseTime = default(DateTime?), string baseTimeType = default(string), int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string))
        {
            // verify the required parameter 'dataFile' is set
            if (dataFile == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'dataFile' when calling MeasUploadingMeasurementsApi->UploadMeasurement");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // form parameter
            if (baseTime != null)
            {
                localVarRequestOptions.FormParameters.Add("base_time", intdash.Client.ClientUtils.ParameterToString(baseTime)); // form parameter
            }
            if (baseTimeType != null)
            {
                localVarRequestOptions.FormParameters.Add("base_time_type", intdash.Client.ClientUtils.ParameterToString(baseTimeType)); // form parameter
            }
            if (channel != null)
            {
                localVarRequestOptions.FormParameters.Add("channel", intdash.Client.ClientUtils.ParameterToString(channel)); // form parameter
            }
            if (measEnd != null)
            {
                localVarRequestOptions.FormParameters.Add("meas_end", intdash.Client.ClientUtils.ParameterToString(measEnd)); // form parameter
            }
            if (labelDataType != null)
            {
                localVarRequestOptions.FormParameters.Add("label_data_type", intdash.Client.ClientUtils.ParameterToString(labelDataType)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("data_file", dataFile);

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MeasurementUploadPostResponse>("/v1/measurements/upload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Measurement from CSV File CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="baseTime">計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)</param>
        /// <param name="baseTimeType">基準時刻のタイプ (optional, default to edge_rtc)</param>
        /// <param name="channel">計測のチャンネル（十進表記の文字列） (optional)</param>
        /// <param name="measEnd">&#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementUploadPostResponse</returns>
        public async System.Threading.Tasks.Task<MeasurementUploadPostResponse> UploadMeasurementAsync(Guid edgeUuid, FileParameter dataFile, DateTime? baseTime = default(DateTime?), string baseTimeType = default(string), int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementUploadPostResponse> localVarResponse = await UploadMeasurementWithHttpInfoAsync(edgeUuid, dataFile, baseTime, baseTimeType, channel, measEnd, labelDataType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Measurement from CSV File CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="baseTime">計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)</param>
        /// <param name="baseTimeType">基準時刻のタイプ (optional, default to edge_rtc)</param>
        /// <param name="channel">計測のチャンネル（十進表記の文字列） (optional)</param>
        /// <param name="measEnd">&#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementUploadPostResponse)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementUploadPostResponse>> UploadMeasurementWithHttpInfoAsync(Guid edgeUuid, FileParameter dataFile, DateTime? baseTime = default(DateTime?), string baseTimeType = default(string), int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dataFile' is set
            if (dataFile == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'dataFile' when calling MeasUploadingMeasurementsApi->UploadMeasurement");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // form parameter
            if (baseTime != null)
            {
                localVarRequestOptions.FormParameters.Add("base_time", intdash.Client.ClientUtils.ParameterToString(baseTime)); // form parameter
            }
            if (baseTimeType != null)
            {
                localVarRequestOptions.FormParameters.Add("base_time_type", intdash.Client.ClientUtils.ParameterToString(baseTimeType)); // form parameter
            }
            if (channel != null)
            {
                localVarRequestOptions.FormParameters.Add("channel", intdash.Client.ClientUtils.ParameterToString(channel)); // form parameter
            }
            if (measEnd != null)
            {
                localVarRequestOptions.FormParameters.Add("meas_end", intdash.Client.ClientUtils.ParameterToString(measEnd)); // form parameter
            }
            if (labelDataType != null)
            {
                localVarRequestOptions.FormParameters.Add("label_data_type", intdash.Client.ClientUtils.ParameterToString(labelDataType)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("data_file", dataFile);

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MeasurementUploadPostResponse>("/v1/measurements/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store Data Points by CSV File （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/upload&#x60; を使用してください）  CSVファイルをアップロードし、計測にデータを追加します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="channel">作成された計測のチャンネル (optional)</param>
        /// <param name="measEnd">* &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <returns>MeasurementUploadPostResponse</returns>
        [Obsolete]
        public MeasurementUploadPostResponse UploadMeasurementIntoMeasurement(string measurementUuid, FileParameter dataFile, int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string))
        {
            intdash.Client.ApiResponse<MeasurementUploadPostResponse> localVarResponse = UploadMeasurementIntoMeasurementWithHttpInfo(measurementUuid, dataFile, channel, measEnd, labelDataType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Store Data Points by CSV File （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/upload&#x60; を使用してください）  CSVファイルをアップロードし、計測にデータを追加します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="channel">作成された計測のチャンネル (optional)</param>
        /// <param name="measEnd">* &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <returns>ApiResponse of MeasurementUploadPostResponse</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MeasurementUploadPostResponse> UploadMeasurementIntoMeasurementWithHttpInfo(string measurementUuid, FileParameter dataFile, int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasUploadingMeasurementsApi->UploadMeasurementIntoMeasurement");

            // verify the required parameter 'dataFile' is set
            if (dataFile == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'dataFile' when calling MeasUploadingMeasurementsApi->UploadMeasurementIntoMeasurement");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            if (channel != null)
            {
                localVarRequestOptions.FormParameters.Add("channel", intdash.Client.ClientUtils.ParameterToString(channel)); // form parameter
            }
            if (measEnd != null)
            {
                localVarRequestOptions.FormParameters.Add("meas_end", intdash.Client.ClientUtils.ParameterToString(measEnd)); // form parameter
            }
            if (labelDataType != null)
            {
                localVarRequestOptions.FormParameters.Add("label_data_type", intdash.Client.ClientUtils.ParameterToString(labelDataType)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("data_file", dataFile);

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MeasurementUploadPostResponse>("/v1/measurements/{measurement_uuid}/upload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadMeasurementIntoMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store Data Points by CSV File （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/upload&#x60; を使用してください）  CSVファイルをアップロードし、計測にデータを追加します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="channel">作成された計測のチャンネル (optional)</param>
        /// <param name="measEnd">* &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementUploadPostResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MeasurementUploadPostResponse> UploadMeasurementIntoMeasurementAsync(string measurementUuid, FileParameter dataFile, int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementUploadPostResponse> localVarResponse = await UploadMeasurementIntoMeasurementWithHttpInfoAsync(measurementUuid, dataFile, channel, measEnd, labelDataType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Store Data Points by CSV File （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/upload&#x60; を使用してください）  CSVファイルをアップロードし、計測にデータを追加します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="channel">作成された計測のチャンネル (optional)</param>
        /// <param name="measEnd">* &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementUploadPostResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementUploadPostResponse>> UploadMeasurementIntoMeasurementWithHttpInfoAsync(string measurementUuid, FileParameter dataFile, int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasUploadingMeasurementsApi->UploadMeasurementIntoMeasurement");

            // verify the required parameter 'dataFile' is set
            if (dataFile == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'dataFile' when calling MeasUploadingMeasurementsApi->UploadMeasurementIntoMeasurement");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            if (channel != null)
            {
                localVarRequestOptions.FormParameters.Add("channel", intdash.Client.ClientUtils.ParameterToString(channel)); // form parameter
            }
            if (measEnd != null)
            {
                localVarRequestOptions.FormParameters.Add("meas_end", intdash.Client.ClientUtils.ParameterToString(measEnd)); // form parameter
            }
            if (labelDataType != null)
            {
                localVarRequestOptions.FormParameters.Add("label_data_type", intdash.Client.ClientUtils.ParameterToString(labelDataType)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("data_file", dataFile);

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MeasurementUploadPostResponse>("/v1/measurements/{measurement_uuid}/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadMeasurementIntoMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Project Measurement from CSV File CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="baseTime">計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)</param>
        /// <param name="baseTimeType">基準時刻のタイプ (optional, default to edge_rtc)</param>
        /// <param name="channel">計測のチャンネル（十進表記の文字列） (optional)</param>
        /// <param name="measEnd">&#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <returns>MeasurementUploadPostResponse</returns>
        public MeasurementUploadPostResponse UploadProjectMeasurement(string projectUuid, Guid edgeUuid, FileParameter dataFile, DateTime? baseTime = default(DateTime?), string baseTimeType = default(string), int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string))
        {
            intdash.Client.ApiResponse<MeasurementUploadPostResponse> localVarResponse = UploadProjectMeasurementWithHttpInfo(projectUuid, edgeUuid, dataFile, baseTime, baseTimeType, channel, measEnd, labelDataType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Project Measurement from CSV File CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="baseTime">計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)</param>
        /// <param name="baseTimeType">基準時刻のタイプ (optional, default to edge_rtc)</param>
        /// <param name="channel">計測のチャンネル（十進表記の文字列） (optional)</param>
        /// <param name="measEnd">&#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <returns>ApiResponse of MeasurementUploadPostResponse</returns>
        public intdash.Client.ApiResponse<MeasurementUploadPostResponse> UploadProjectMeasurementWithHttpInfo(string projectUuid, Guid edgeUuid, FileParameter dataFile, DateTime? baseTime = default(DateTime?), string baseTimeType = default(string), int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasUploadingMeasurementsApi->UploadProjectMeasurement");

            // verify the required parameter 'dataFile' is set
            if (dataFile == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'dataFile' when calling MeasUploadingMeasurementsApi->UploadProjectMeasurement");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.FormParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // form parameter
            if (baseTime != null)
            {
                localVarRequestOptions.FormParameters.Add("base_time", intdash.Client.ClientUtils.ParameterToString(baseTime)); // form parameter
            }
            if (baseTimeType != null)
            {
                localVarRequestOptions.FormParameters.Add("base_time_type", intdash.Client.ClientUtils.ParameterToString(baseTimeType)); // form parameter
            }
            if (channel != null)
            {
                localVarRequestOptions.FormParameters.Add("channel", intdash.Client.ClientUtils.ParameterToString(channel)); // form parameter
            }
            if (measEnd != null)
            {
                localVarRequestOptions.FormParameters.Add("meas_end", intdash.Client.ClientUtils.ParameterToString(measEnd)); // form parameter
            }
            if (labelDataType != null)
            {
                localVarRequestOptions.FormParameters.Add("label_data_type", intdash.Client.ClientUtils.ParameterToString(labelDataType)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("data_file", dataFile);

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MeasurementUploadPostResponse>("/v1/projects/{project_uuid}/measurements/upload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadProjectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Project Measurement from CSV File CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="baseTime">計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)</param>
        /// <param name="baseTimeType">基準時刻のタイプ (optional, default to edge_rtc)</param>
        /// <param name="channel">計測のチャンネル（十進表記の文字列） (optional)</param>
        /// <param name="measEnd">&#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementUploadPostResponse</returns>
        public async System.Threading.Tasks.Task<MeasurementUploadPostResponse> UploadProjectMeasurementAsync(string projectUuid, Guid edgeUuid, FileParameter dataFile, DateTime? baseTime = default(DateTime?), string baseTimeType = default(string), int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementUploadPostResponse> localVarResponse = await UploadProjectMeasurementWithHttpInfoAsync(projectUuid, edgeUuid, dataFile, baseTime, baseTimeType, channel, measEnd, labelDataType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Project Measurement from CSV File CSVまたはMP4（**MP4はexperimental**）ファイルをアップロードし、計測を作成します。 計測には、指定されたエッジUUIDが関連付けられます。  &#x60;base_time&#x60; （基準時刻）は、RFC3339による表現か、UNIX時刻（マイクロ秒）を指定してください。 基準時刻が指定されていない場合は、CSVファイルのデータ行の1行目の時刻が基準時刻として使用されます。 CSVファイルのデータは、時刻順にソートされている必要があります。 &#x60;meas_end&#x60; パラメーターの設定は任意です。指定しない場合、 &#x60;true&#x60; となります。  CSVファイルの例: &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110 1539263580, val21,  22,   23.12345,  val24,  25,   26.12345,  val27,  28, 29.12345,  val210 1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60; 空白行がある場合、行番号のカウントは加算されますが、その行は処理されません。 例えば、以下のような場合の空白行は無視されます。 &#x60;&#x60;&#x60; time,       col1,   col2, col3,      col4,   col5, col6,      col7,   col8, col9,      col10 1539263579, val11,  12,   13.12345,  val14,  15,   16.12345,  val17,  18, 19.12345,  val110  1539263581, val31,  32,   33.12345,  val34,  35,   36.12345,  val37,  38, 39.12345,  val310 1539263582, val41,  42,   43.12345,  val44,  45,   46.12345,  val47,  48, 49.12345,  val410 &#x60;&#x60;&#x60;  [Go parser library](https://golang.org/pkg/encoding/csv/) も参照してください。  時刻の列には、RFC3339による表現か、UNIX時刻（秒）を使用することができます。 ## エスケープ 値の内部で &#x60;,&#x60; を使用したい場合は、その値全体を &#x60;\&quot;&#x60; で囲んでください。 また、値の内部で &#x60;\&quot;&#x60; を使用したい場合は、値全体を &#x60;\&quot;&#x60; で囲み、さらに、 &#x60;\&quot;&#x60; を &#x60;\&quot;\&quot;&#x60; のように表記してください。 値を &#x60;\&quot;&#x60; で囲まないと、CSVファイルのパースの際にエラーが発生します。  エスケープの例: &#x60;&#x60;&#x60; time,col1 1539263579,\&quot;ab,cde\&quot;                  .....OK (parsed as &#39;ab,cde&#39;) 1539263579,\&quot;ab\&quot;\&quot;cde\&quot;                 .....OK (parsed as &#39;ab\&quot;cde&#39;) 1539263579,     abcde                .....OK (parsed as &#39;     abcde&#39;) 1539263579,\&quot;     abcde\&quot;              .....OK (parsed as &#39;     abcde&#39;) 1539263579,ab\&quot;cde                    .....NG 1539263579, \&quot;abcde\&quot;                  .....NG 1539263579,ab,cde                    .....NG(wrong number of fields) &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="edgeUuid">エッジのUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="baseTime">計測の基準時刻。MP4ファイルをアップロードする場合は必須です。 (optional)</param>
        /// <param name="baseTimeType">基準時刻のタイプ (optional, default to edge_rtc)</param>
        /// <param name="channel">計測のチャンネル（十進表記の文字列） (optional)</param>
        /// <param name="measEnd">&#x60;true&#x60; にすると、計測は終了したものとして扱われます。 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementUploadPostResponse)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementUploadPostResponse>> UploadProjectMeasurementWithHttpInfoAsync(string projectUuid, Guid edgeUuid, FileParameter dataFile, DateTime? baseTime = default(DateTime?), string baseTimeType = default(string), int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasUploadingMeasurementsApi->UploadProjectMeasurement");

            // verify the required parameter 'dataFile' is set
            if (dataFile == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'dataFile' when calling MeasUploadingMeasurementsApi->UploadProjectMeasurement");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.FormParameters.Add("edge_uuid", intdash.Client.ClientUtils.ParameterToString(edgeUuid)); // form parameter
            if (baseTime != null)
            {
                localVarRequestOptions.FormParameters.Add("base_time", intdash.Client.ClientUtils.ParameterToString(baseTime)); // form parameter
            }
            if (baseTimeType != null)
            {
                localVarRequestOptions.FormParameters.Add("base_time_type", intdash.Client.ClientUtils.ParameterToString(baseTimeType)); // form parameter
            }
            if (channel != null)
            {
                localVarRequestOptions.FormParameters.Add("channel", intdash.Client.ClientUtils.ParameterToString(channel)); // form parameter
            }
            if (measEnd != null)
            {
                localVarRequestOptions.FormParameters.Add("meas_end", intdash.Client.ClientUtils.ParameterToString(measEnd)); // form parameter
            }
            if (labelDataType != null)
            {
                localVarRequestOptions.FormParameters.Add("label_data_type", intdash.Client.ClientUtils.ParameterToString(labelDataType)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("data_file", dataFile);

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MeasurementUploadPostResponse>("/v1/projects/{project_uuid}/measurements/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadProjectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store Project Data Points by CSV File CSVファイルをアップロードし、計測にデータを追加します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="channel">作成された計測のチャンネル (optional)</param>
        /// <param name="measEnd">* &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <returns>MeasurementUploadPostResponse</returns>
        public MeasurementUploadPostResponse UploadProjectMeasurementIntoMeasurement(string projectUuid, string measurementUuid, FileParameter dataFile, int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string))
        {
            intdash.Client.ApiResponse<MeasurementUploadPostResponse> localVarResponse = UploadProjectMeasurementIntoMeasurementWithHttpInfo(projectUuid, measurementUuid, dataFile, channel, measEnd, labelDataType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Store Project Data Points by CSV File CSVファイルをアップロードし、計測にデータを追加します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="channel">作成された計測のチャンネル (optional)</param>
        /// <param name="measEnd">* &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <returns>ApiResponse of MeasurementUploadPostResponse</returns>
        public intdash.Client.ApiResponse<MeasurementUploadPostResponse> UploadProjectMeasurementIntoMeasurementWithHttpInfo(string projectUuid, string measurementUuid, FileParameter dataFile, int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasUploadingMeasurementsApi->UploadProjectMeasurementIntoMeasurement");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasUploadingMeasurementsApi->UploadProjectMeasurementIntoMeasurement");

            // verify the required parameter 'dataFile' is set
            if (dataFile == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'dataFile' when calling MeasUploadingMeasurementsApi->UploadProjectMeasurementIntoMeasurement");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            if (channel != null)
            {
                localVarRequestOptions.FormParameters.Add("channel", intdash.Client.ClientUtils.ParameterToString(channel)); // form parameter
            }
            if (measEnd != null)
            {
                localVarRequestOptions.FormParameters.Add("meas_end", intdash.Client.ClientUtils.ParameterToString(measEnd)); // form parameter
            }
            if (labelDataType != null)
            {
                localVarRequestOptions.FormParameters.Add("label_data_type", intdash.Client.ClientUtils.ParameterToString(labelDataType)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("data_file", dataFile);

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MeasurementUploadPostResponse>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/upload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadProjectMeasurementIntoMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store Project Data Points by CSV File CSVファイルをアップロードし、計測にデータを追加します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="channel">作成された計測のチャンネル (optional)</param>
        /// <param name="measEnd">* &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementUploadPostResponse</returns>
        public async System.Threading.Tasks.Task<MeasurementUploadPostResponse> UploadProjectMeasurementIntoMeasurementAsync(string projectUuid, string measurementUuid, FileParameter dataFile, int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementUploadPostResponse> localVarResponse = await UploadProjectMeasurementIntoMeasurementWithHttpInfoAsync(projectUuid, measurementUuid, dataFile, channel, measEnd, labelDataType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Store Project Data Points by CSV File CSVファイルをアップロードし、計測にデータを追加します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="dataFile">アップロードするファイル</param>
        /// <param name="channel">作成された計測のチャンネル (optional)</param>
        /// <param name="measEnd">* &#x60;true&#x60; : 終了した計測 * &#x60;false&#x60; : 終了していない計測 (optional)</param>
        /// <param name="labelDataType">列名とデータタイプの対応。 データタイプは、 &#x60;int&#x60; 、&#x60; string&#x60; 、 &#x60;float&#x60; のいずれかを指定してください。 例: &#x60;&#x60;&#x60; {   \\\&quot;column_1\\\&quot;: \\\&quot;float\\\&quot;,   \\\&quot;column_2\\\&quot;: \\\&quot;string\\\&quot;,   \\\&quot;column_3\\\&quot;: \\\&quot;int\\\&quot; } &#x60;&#x60;&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementUploadPostResponse)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementUploadPostResponse>> UploadProjectMeasurementIntoMeasurementWithHttpInfoAsync(string projectUuid, string measurementUuid, FileParameter dataFile, int? channel = default(int?), bool? measEnd = default(bool?), string labelDataType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasUploadingMeasurementsApi->UploadProjectMeasurementIntoMeasurement");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasUploadingMeasurementsApi->UploadProjectMeasurementIntoMeasurement");

            // verify the required parameter 'dataFile' is set
            if (dataFile == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'dataFile' when calling MeasUploadingMeasurementsApi->UploadProjectMeasurementIntoMeasurement");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            if (channel != null)
            {
                localVarRequestOptions.FormParameters.Add("channel", intdash.Client.ClientUtils.ParameterToString(channel)); // form parameter
            }
            if (measEnd != null)
            {
                localVarRequestOptions.FormParameters.Add("meas_end", intdash.Client.ClientUtils.ParameterToString(measEnd)); // form parameter
            }
            if (labelDataType != null)
            {
                localVarRequestOptions.FormParameters.Add("label_data_type", intdash.Client.ClientUtils.ParameterToString(labelDataType)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("data_file", dataFile);

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MeasurementUploadPostResponse>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadProjectMeasurementIntoMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
