/*
 * intdash API specification
 *
 * ## ベースURL  ベースURLは以下のとおりです。APIエンドポイントはこのベースURLから始まります。  ``` https://<host>/api ``` エンドポイント例: ``` https://example.intdash.jp/api/v1/measurements https://example.intdash.jp/api/media/videos ```  ## レスポンスのステータスコード  サーバーからクライアントに返却されるHTTPレスポンスのステータスコードは以下のとおりです。   | コード                    | 説明                                                                  | |:- -- -- -- -- -- -- -- -- -- -- -- -- -|:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | 101 Switching Protocols   | サーバーはプロトコルを切り替えます。                                  | | 200 OK                    | リクエストは成功しました。                                            | | 201 Created               | 新しいリソースが作成されました。                                      | | 204 No Content            | リクエストは成功しました。返却するコンテンツはありません。            | | 400 Bad Request           | 構文が正しくないなどの理由により、リクエストは処理できませんでした。  | | 401 Unauthorized          | リクエストには認証が必要です。                                        | | 403 Forbidden             | アクセス権がないなどの理由により、リクエストは拒否されました。        | | 404 Not Found             | APIまたはリソースが見つかりません。                                   | | 405 Method Not Allowed    | 指定されたメソッドは許可されていません。                              | | 409 Conflict              | 既存のリソースとのコンフリクトのため、リクエストは失敗しました。      | | 500 Internal Server Error | サーバーで予期しないエラーが発生したため、リクエストは失敗しました。  |   ## 注意 リクエストボディのJSONでは、キーの大文字と小文字は区別されません。 従って、以下の2つのリクエストは同じものと見なされます。  ```  {   \"username\" : \"username\",   \"password\" : \"password\" }  ```   ```  {   \"Username\" : \"username\",   \"Password\" : \"password\" }  ```
 *
 * The version of the OpenAPI document: v2.4.0-next-4a4316946
 * Contact: VM2M-support@aptpod.co.jp
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using intdash.Client;
using intdash.Model;

namespace intdash.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeasMeasurementsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Complete Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/complete&#x60; を使用してください）  計測を回収完了（completed）にします。  completedは、エッジでのデータ取得が終了し（ended）、  かつ、すべてのデータがサーバーに送信されたことを意味します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>Measurement</returns>
        [Obsolete]
        Measurement CompleteMeasurement(string measurementUuid);

        /// <summary>
        /// Complete Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/complete&#x60; を使用してください）  計測を回収完了（completed）にします。  completedは、エッジでのデータ取得が終了し（ended）、  かつ、すべてのデータがサーバーに送信されたことを意味します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Measurement</returns>
        [Obsolete]
        ApiResponse<Measurement> CompleteMeasurementWithHttpInfo(string measurementUuid);
        /// <summary>
        /// Complete Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測を回収完了（completed）にします。 completedは、エッジでのデータ取得が終了し（ended）、 かつ、すべてのデータがサーバーに送信されたことを意味します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>Measurement</returns>
        Measurement CompleteProjectMeasurement(string projectUuid, string measurementUuid);

        /// <summary>
        /// Complete Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測を回収完了（completed）にします。 completedは、エッジでのデータ取得が終了し（ended）、 かつ、すべてのデータがサーバーに送信されたことを意味します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Measurement</returns>
        ApiResponse<Measurement> CompleteProjectMeasurementWithHttpInfo(string projectUuid, string measurementUuid);
        /// <summary>
        /// Create Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測を作成します。   - **Note**    - 計測の保護／非保護を切り替える権限を持たないエッジも、      計測作成時は保護された計測を作成することが可能です。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measCreate"> (optional)</param>
        /// <returns>Measurement</returns>
        [Obsolete]
        Measurement CreateMeasurement(MeasCreate measCreate = default(MeasCreate));

        /// <summary>
        /// Create Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測を作成します。   - **Note**    - 計測の保護／非保護を切り替える権限を持たないエッジも、      計測作成時は保護された計測を作成することが可能です。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measCreate"> (optional)</param>
        /// <returns>ApiResponse of Measurement</returns>
        [Obsolete]
        ApiResponse<Measurement> CreateMeasurementWithHttpInfo(MeasCreate measCreate = default(MeasCreate));
        /// <summary>
        /// Create Measurement Sequence Chunk
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/sequence/chunks&#x60; を使用してください） 計測シーケンスにチャンクを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateMeasurementChunksResult</returns>
        [Obsolete]
        CreateMeasurementChunksResult CreateMeasurementSequenceChunks(FileParameter body = default(FileParameter));

        /// <summary>
        /// Create Measurement Sequence Chunk
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/sequence/chunks&#x60; を使用してください） 計測シーケンスにチャンクを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateMeasurementChunksResult</returns>
        [Obsolete]
        ApiResponse<CreateMeasurementChunksResult> CreateMeasurementSequenceChunksWithHttpInfo(FileParameter body = default(FileParameter));
        /// <summary>
        /// Create Measurement with UUID
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 指定したUUIDの計測を作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <returns>Measurement</returns>
        [Obsolete]
        Measurement CreateMeasurementWithUUID(string measurementUuid, MeasCreate measCreate = default(MeasCreate));

        /// <summary>
        /// Create Measurement with UUID
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 指定したUUIDの計測を作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <returns>ApiResponse of Measurement</returns>
        [Obsolete]
        ApiResponse<Measurement> CreateMeasurementWithUUIDWithHttpInfo(string measurementUuid, MeasCreate measCreate = default(MeasCreate));
        /// <summary>
        /// Create Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測を作成します。  - **Note**   - 計測の保護／非保護を切り替える権限を持たないエッジも、     計測作成時は保護された計測を作成することが可能です。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <returns>Measurement</returns>
        Measurement CreateProjectMeasurement(string projectUuid, MeasCreate measCreate = default(MeasCreate));

        /// <summary>
        /// Create Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測を作成します。  - **Note**   - 計測の保護／非保護を切り替える権限を持たないエッジも、     計測作成時は保護された計測を作成することが可能です。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <returns>ApiResponse of Measurement</returns>
        ApiResponse<Measurement> CreateProjectMeasurementWithHttpInfo(string projectUuid, MeasCreate measCreate = default(MeasCreate));
        /// <summary>
        /// Create Project Measurement Sequence Chunk
        /// </summary>
        /// <remarks>
        /// 計測シーケンスにチャンクを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateMeasurementChunksResult</returns>
        CreateMeasurementChunksResult CreateProjectMeasurementSequenceChunks(string projectUuid, FileParameter body = default(FileParameter));

        /// <summary>
        /// Create Project Measurement Sequence Chunk
        /// </summary>
        /// <remarks>
        /// 計測シーケンスにチャンクを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateMeasurementChunksResult</returns>
        ApiResponse<CreateMeasurementChunksResult> CreateProjectMeasurementSequenceChunksWithHttpInfo(string projectUuid, FileParameter body = default(FileParameter));
        /// <summary>
        /// Create Project Measurement with UUID
        /// </summary>
        /// <remarks>
        /// 指定したUUIDの計測を作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <returns>Measurement</returns>
        Measurement CreateProjectMeasurementWithUUID(string projectUuid, string measurementUuid, MeasCreate measCreate = default(MeasCreate));

        /// <summary>
        /// Create Project Measurement with UUID
        /// </summary>
        /// <remarks>
        /// 指定したUUIDの計測を作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <returns>ApiResponse of Measurement</returns>
        ApiResponse<Measurement> CreateProjectMeasurementWithUUIDWithHttpInfo(string projectUuid, string measurementUuid, MeasCreate measCreate = default(MeasCreate));
        /// <summary>
        /// Trash Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください）  計測を削除します。  - **Note**    - 保護された計測は削除できません。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns></returns>
        [Obsolete]
        void DeleteMeasurement(string measurementUuid);

        /// <summary>
        /// Trash Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください）  計測を削除します。  - **Note**    - 保護された計測は削除できません。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> DeleteMeasurementWithHttpInfo(string measurementUuid);
        /// <summary>
        /// Delete Measurement Base Time
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を削除します。   指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、  その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。   このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <returns></returns>
        [Obsolete]
        void DeleteMeasurementBaseTime(string measurementUuid, string type);

        /// <summary>
        /// Delete Measurement Base Time
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を削除します。   指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、  その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。   このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> DeleteMeasurementBaseTimeWithHttpInfo(string measurementUuid, string type);
        /// <summary>
        /// Trash Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測を削除します。 - **Note**   - 保護された計測は削除できません。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns></returns>
        void DeleteProjectMeasurement(string projectUuid, string measurementUuid);

        /// <summary>
        /// Trash Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測を削除します。 - **Note**   - 保護された計測は削除できません。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectMeasurementWithHttpInfo(string projectUuid, string measurementUuid);
        /// <summary>
        /// Delete Project Measurement Base Time
        /// </summary>
        /// <remarks>
        /// 基準時刻を削除します。 指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、 その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。 このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <returns></returns>
        void DeleteProjectMeasurementBaseTime(string projectUuid, string measurementUuid, string type);

        /// <summary>
        /// Delete Project Measurement Base Time
        /// </summary>
        /// <remarks>
        /// 基準時刻を削除します。 指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、 その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。 このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectMeasurementBaseTimeWithHttpInfo(string projectUuid, string measurementUuid, string type);
        /// <summary>
        /// End Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/end&#x60; を使用してください）  計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。  （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>SequenceSummary</returns>
        [Obsolete]
        SequenceSummary EndMeasurement(string measurementUuid);

        /// <summary>
        /// End Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/end&#x60; を使用してください）  計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。  （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of SequenceSummary</returns>
        [Obsolete]
        ApiResponse<SequenceSummary> EndMeasurementWithHttpInfo(string measurementUuid);
        /// <summary>
        /// End Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。 （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>SequenceSummary</returns>
        SequenceSummary EndProjectMeasurement(string projectUuid, string measurementUuid);

        /// <summary>
        /// End Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。 （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of SequenceSummary</returns>
        ApiResponse<SequenceSummary> EndProjectMeasurementWithHttpInfo(string projectUuid, string measurementUuid);
        /// <summary>
        /// Get Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>Measurement</returns>
        [Obsolete]
        Measurement GetMeasurement(string measurementUuid);

        /// <summary>
        /// Get Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Measurement</returns>
        [Obsolete]
        ApiResponse<Measurement> GetMeasurementWithHttpInfo(string measurementUuid);
        /// <summary>
        /// Get Measurement Base Time
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください） 基準時刻タイプを指定して計測の基準時刻を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <returns>MeasBaseTime</returns>
        [Obsolete]
        MeasBaseTime GetMeasurementBaseTime(string measurementUuid, string type);

        /// <summary>
        /// Get Measurement Base Time
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください） 基準時刻タイプを指定して計測の基準時刻を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <returns>ApiResponse of MeasBaseTime</returns>
        [Obsolete]
        ApiResponse<MeasBaseTime> GetMeasurementBaseTimeWithHttpInfo(string measurementUuid, string type);
        /// <summary>
        /// Get Measurement from Marker
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}/measurement&#x60; を使用してください）
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>Measurement</returns>
        [Obsolete]
        Measurement GetMeasurementFromMeasurementMarker(string measurementMarkerUuid);

        /// <summary>
        /// Get Measurement from Marker
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}/measurement&#x60; を使用してください）
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>ApiResponse of Measurement</returns>
        [Obsolete]
        ApiResponse<Measurement> GetMeasurementFromMeasurementMarkerWithHttpInfo(string measurementMarkerUuid);
        /// <summary>
        /// List Measurement Sections
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sections&#x60; を使用してください）  計測に含まれるセクションのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="filter">計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <returns>MeasurementSectionsGetResponse</returns>
        [Obsolete]
        MeasurementSectionsGetResponse GetMeasurementSections(string measurementUuid, string filter = default(string), int? limit = default(int?));

        /// <summary>
        /// List Measurement Sections
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sections&#x60; を使用してください）  計測に含まれるセクションのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="filter">計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <returns>ApiResponse of MeasurementSectionsGetResponse</returns>
        [Obsolete]
        ApiResponse<MeasurementSectionsGetResponse> GetMeasurementSectionsWithHttpInfo(string measurementUuid, string filter = default(string), int? limit = default(int?));
        /// <summary>
        /// Get Measurement Sequence
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <returns>MeasurementSequenceGroup</returns>
        [Obsolete]
        MeasurementSequenceGroup GetMeasurementSequence(string measurementUuid, string sequencesUuid);

        /// <summary>
        /// Get Measurement Sequence
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <returns>ApiResponse of MeasurementSequenceGroup</returns>
        [Obsolete]
        ApiResponse<MeasurementSequenceGroup> GetMeasurementSequenceWithHttpInfo(string measurementUuid, string sequencesUuid);
        /// <summary>
        /// Get Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>Measurement</returns>
        Measurement GetProjectMeasurement(string projectUuid, string measurementUuid);

        /// <summary>
        /// Get Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Measurement</returns>
        ApiResponse<Measurement> GetProjectMeasurementWithHttpInfo(string projectUuid, string measurementUuid);
        /// <summary>
        /// Get Project Measurement Base Time
        /// </summary>
        /// <remarks>
        /// 基準時刻タイプを指定して計測の基準時刻を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <returns>MeasBaseTime</returns>
        MeasBaseTime GetProjectMeasurementBaseTime(string projectUuid, string measurementUuid, string type);

        /// <summary>
        /// Get Project Measurement Base Time
        /// </summary>
        /// <remarks>
        /// 基準時刻タイプを指定して計測の基準時刻を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <returns>ApiResponse of MeasBaseTime</returns>
        ApiResponse<MeasBaseTime> GetProjectMeasurementBaseTimeWithHttpInfo(string projectUuid, string measurementUuid, string type);
        /// <summary>
        /// List Project Measurement Sections
        /// </summary>
        /// <remarks>
        /// 計測に含まれるセクションのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="filter">計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <returns>MeasurementSectionsGetResponse</returns>
        MeasurementSectionsGetResponse GetProjectMeasurementSections(string projectUuid, string measurementUuid, string filter = default(string), int? limit = default(int?));

        /// <summary>
        /// List Project Measurement Sections
        /// </summary>
        /// <remarks>
        /// 計測に含まれるセクションのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="filter">計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <returns>ApiResponse of MeasurementSectionsGetResponse</returns>
        ApiResponse<MeasurementSectionsGetResponse> GetProjectMeasurementSectionsWithHttpInfo(string projectUuid, string measurementUuid, string filter = default(string), int? limit = default(int?));
        /// <summary>
        /// Get Project Measurement Sequence
        /// </summary>
        /// <remarks>
        /// 計測シーケンスを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <returns>MeasurementSequenceGroup</returns>
        MeasurementSequenceGroup GetProjectMeasurementSequence(string projectUuid, string measurementUuid, string sequencesUuid);

        /// <summary>
        /// Get Project Measurement Sequence
        /// </summary>
        /// <remarks>
        /// 計測シーケンスを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <returns>ApiResponse of MeasurementSequenceGroup</returns>
        ApiResponse<MeasurementSequenceGroup> GetProjectMeasurementSequenceWithHttpInfo(string projectUuid, string measurementUuid, string sequencesUuid);
        /// <summary>
        /// List Measurement Base Times
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes&#x60; を使用してください）  計測の基準時刻のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>MeasBaseTimes</returns>
        [Obsolete]
        MeasBaseTimes ListMeasurementBaseTimes(string measurementUuid);

        /// <summary>
        /// List Measurement Base Times
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes&#x60; を使用してください）  計測の基準時刻のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of MeasBaseTimes</returns>
        [Obsolete]
        ApiResponse<MeasBaseTimes> ListMeasurementBaseTimesWithHttpInfo(string measurementUuid);
        /// <summary>
        /// List Measurement Sequences
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences&#x60; を使用してください） 計測シーケンスのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>MeasurementSequenceGroups</returns>
        [Obsolete]
        MeasurementSequenceGroups ListMeasurementSequences(string measurementUuid);

        /// <summary>
        /// List Measurement Sequences
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences&#x60; を使用してください） 計測シーケンスのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of MeasurementSequenceGroups</returns>
        [Obsolete]
        ApiResponse<MeasurementSequenceGroups> ListMeasurementSequencesWithHttpInfo(string measurementUuid);
        /// <summary>
        /// List Measurements
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">計測のUUID (optional)</param>
        /// <param name="name">名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)</param>
        /// <param name="edgeUuid">計測に関連付けられたエッジのUUID (optional)</param>
        /// <param name="start">取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="end">取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="partialMatch">&#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +- -- -- -- -- -- -- -+                                    | measurement2 |                                    +- -- -- -- -- -- -- -+                        | measurement3 |                        +- -- -- -- -- -- -- -+                                                         time - -- -- -- -- --+- -- -- -- -- -- -- -- -- -- -- -- -- -- -+- -- -- -- -- -- -&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)</param>
        /// <param name="basetimeType">計測の基準時刻のタイプ (optional)</param>
        /// <param name="ended">計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)</param>
        /// <param name="since">指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="durationStart">計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)</param>
        /// <param name="durationEnd">計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)</param>
        /// <param name="status">計測のステータス (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>Measurements</returns>
        [Obsolete]
        Measurements ListMeasurements(List<string> uuid = default(List<string>), int? name = default(int?), string edgeUuid = default(string), string start = default(string), string end = default(string), bool? partialMatch = default(bool?), string basetimeType = default(string), bool? ended = default(bool?), string since = default(string), long? durationStart = default(long?), long? durationEnd = default(long?), List<string> status = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string));

        /// <summary>
        /// List Measurements
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">計測のUUID (optional)</param>
        /// <param name="name">名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)</param>
        /// <param name="edgeUuid">計測に関連付けられたエッジのUUID (optional)</param>
        /// <param name="start">取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="end">取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="partialMatch">&#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +- -- -- -- -- -- -- -+                                    | measurement2 |                                    +- -- -- -- -- -- -- -+                        | measurement3 |                        +- -- -- -- -- -- -- -+                                                         time - -- -- -- -- --+- -- -- -- -- -- -- -- -- -- -- -- -- -- -+- -- -- -- -- -- -&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)</param>
        /// <param name="basetimeType">計測の基準時刻のタイプ (optional)</param>
        /// <param name="ended">計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)</param>
        /// <param name="since">指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="durationStart">計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)</param>
        /// <param name="durationEnd">計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)</param>
        /// <param name="status">計測のステータス (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>ApiResponse of Measurements</returns>
        [Obsolete]
        ApiResponse<Measurements> ListMeasurementsWithHttpInfo(List<string> uuid = default(List<string>), int? name = default(int?), string edgeUuid = default(string), string start = default(string), string end = default(string), bool? partialMatch = default(bool?), string basetimeType = default(string), bool? ended = default(bool?), string since = default(string), long? durationStart = default(long?), long? durationEnd = default(long?), List<string> status = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string));
        /// <summary>
        /// List Project Measurement Base Times
        /// </summary>
        /// <remarks>
        /// 計測の基準時刻のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>MeasBaseTimes</returns>
        MeasBaseTimes ListProjectMeasurementBaseTimes(string projectUuid, string measurementUuid);

        /// <summary>
        /// List Project Measurement Base Times
        /// </summary>
        /// <remarks>
        /// 計測の基準時刻のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of MeasBaseTimes</returns>
        ApiResponse<MeasBaseTimes> ListProjectMeasurementBaseTimesWithHttpInfo(string projectUuid, string measurementUuid);
        /// <summary>
        /// List Project Measurement Sequences
        /// </summary>
        /// <remarks>
        /// 計測シーケンスのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>MeasurementSequenceGroups</returns>
        MeasurementSequenceGroups ListProjectMeasurementSequences(string projectUuid, string measurementUuid);

        /// <summary>
        /// List Project Measurement Sequences
        /// </summary>
        /// <remarks>
        /// 計測シーケンスのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of MeasurementSequenceGroups</returns>
        ApiResponse<MeasurementSequenceGroups> ListProjectMeasurementSequencesWithHttpInfo(string projectUuid, string measurementUuid);
        /// <summary>
        /// List Project Measurements
        /// </summary>
        /// <remarks>
        /// 計測のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">計測のUUID (optional)</param>
        /// <param name="name">名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)</param>
        /// <param name="edgeUuid">計測に関連付けられたエッジのUUID (optional)</param>
        /// <param name="start">取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="end">取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="partialMatch">&#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +- -- -- -- -- -- -- -+                                    | measurement2 |                                    +- -- -- -- -- -- -- -+                        | measurement3 |                        +- -- -- -- -- -- -- -+                                                         time - -- -- -- -- --+- -- -- -- -- -- -- -- -- -- -- -- -- -- -+- -- -- -- -- -- -&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)</param>
        /// <param name="basetimeType">計測の基準時刻のタイプ (optional)</param>
        /// <param name="ended">計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)</param>
        /// <param name="since">指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="durationStart">計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)</param>
        /// <param name="durationEnd">計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)</param>
        /// <param name="status">計測のステータス (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>Measurements</returns>
        Measurements ListProjectMeasurements(string projectUuid, List<string> uuid = default(List<string>), int? name = default(int?), string edgeUuid = default(string), string start = default(string), string end = default(string), bool? partialMatch = default(bool?), string basetimeType = default(string), bool? ended = default(bool?), string since = default(string), long? durationStart = default(long?), long? durationEnd = default(long?), List<string> status = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string));

        /// <summary>
        /// List Project Measurements
        /// </summary>
        /// <remarks>
        /// 計測のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">計測のUUID (optional)</param>
        /// <param name="name">名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)</param>
        /// <param name="edgeUuid">計測に関連付けられたエッジのUUID (optional)</param>
        /// <param name="start">取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="end">取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="partialMatch">&#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +- -- -- -- -- -- -- -+                                    | measurement2 |                                    +- -- -- -- -- -- -- -+                        | measurement3 |                        +- -- -- -- -- -- -- -+                                                         time - -- -- -- -- --+- -- -- -- -- -- -- -- -- -- -- -- -- -- -+- -- -- -- -- -- -&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)</param>
        /// <param name="basetimeType">計測の基準時刻のタイプ (optional)</param>
        /// <param name="ended">計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)</param>
        /// <param name="since">指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="durationStart">計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)</param>
        /// <param name="durationEnd">計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)</param>
        /// <param name="status">計測のステータス (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>ApiResponse of Measurements</returns>
        ApiResponse<Measurements> ListProjectMeasurementsWithHttpInfo(string projectUuid, List<string> uuid = default(List<string>), int? name = default(int?), string edgeUuid = default(string), string start = default(string), string end = default(string), bool? partialMatch = default(bool?), string basetimeType = default(string), bool? ended = default(bool?), string since = default(string), long? durationStart = default(long?), long? durationEnd = default(long?), List<string> status = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string));
        /// <summary>
        /// Protect Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns></returns>
        [Obsolete]
        void ProtectMeasurement(string measurementUuid);

        /// <summary>
        /// Protect Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> ProtectMeasurementWithHttpInfo(string measurementUuid);
        /// <summary>
        /// Protect Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns></returns>
        void ProtectProjectMeasurement(string projectUuid, string measurementUuid);

        /// <summary>
        /// Protect Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProtectProjectMeasurementWithHttpInfo(string projectUuid, string measurementUuid);
        /// <summary>
        /// Replace Measurement Sequence
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを置換します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <returns>MeasurementSequenceGroup</returns>
        [Obsolete]
        MeasurementSequenceGroup ReplaceMeasurementSequence(string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace));

        /// <summary>
        /// Replace Measurement Sequence
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを置換します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <returns>ApiResponse of MeasurementSequenceGroup</returns>
        [Obsolete]
        ApiResponse<MeasurementSequenceGroup> ReplaceMeasurementSequenceWithHttpInfo(string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace));
        /// <summary>
        /// Replace Project Measurement Sequence
        /// </summary>
        /// <remarks>
        /// 計測シーケンスを置換します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <returns>MeasurementSequenceGroup</returns>
        MeasurementSequenceGroup ReplaceProjectMeasurementSequence(string projectUuid, string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace));

        /// <summary>
        /// Replace Project Measurement Sequence
        /// </summary>
        /// <remarks>
        /// 計測シーケンスを置換します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <returns>ApiResponse of MeasurementSequenceGroup</returns>
        ApiResponse<MeasurementSequenceGroup> ReplaceProjectMeasurementSequenceWithHttpInfo(string projectUuid, string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace));
        /// <summary>
        /// Unprotect Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測の保護を解除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns></returns>
        [Obsolete]
        void UnprotectMeasurement(string measurementUuid);

        /// <summary>
        /// Unprotect Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測の保護を解除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> UnprotectMeasurementWithHttpInfo(string measurementUuid);
        /// <summary>
        /// Unprotect Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測の保護を解除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns></returns>
        void UnprotectProjectMeasurement(string projectUuid, string measurementUuid);

        /// <summary>
        /// Unprotect Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測の保護を解除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnprotectProjectMeasurementWithHttpInfo(string projectUuid, string measurementUuid);
        /// <summary>
        /// Update Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測に関する情報を更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measReplace"> (optional)</param>
        /// <returns></returns>
        [Obsolete]
        void UpdateMeasurement(string measurementUuid, MeasReplace measReplace = default(MeasReplace));

        /// <summary>
        /// Update Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測に関する情報を更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measReplace"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> UpdateMeasurementWithHttpInfo(string measurementUuid, MeasReplace measReplace = default(MeasReplace));
        /// <summary>
        /// Replace Measurement Base Time
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を更新します。  この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、  新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="measBaseTimePut"> (optional)</param>
        /// <returns>MeasBaseTime</returns>
        [Obsolete]
        MeasBaseTime UpdateMeasurementBaseTime(string measurementUuid, string type, MeasBaseTimePut measBaseTimePut = default(MeasBaseTimePut));

        /// <summary>
        /// Replace Measurement Base Time
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を更新します。  この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、  新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="measBaseTimePut"> (optional)</param>
        /// <returns>ApiResponse of MeasBaseTime</returns>
        [Obsolete]
        ApiResponse<MeasBaseTime> UpdateMeasurementBaseTimeWithHttpInfo(string measurementUuid, string type, MeasBaseTimePut measBaseTimePut = default(MeasBaseTimePut));
        /// <summary>
        /// Update Measurement Sequence
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <returns>MeasurementSequenceGroup</returns>
        [Obsolete]
        MeasurementSequenceGroup UpdateMeasurementSequence(string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace));

        /// <summary>
        /// Update Measurement Sequence
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <returns>ApiResponse of MeasurementSequenceGroup</returns>
        [Obsolete]
        ApiResponse<MeasurementSequenceGroup> UpdateMeasurementSequenceWithHttpInfo(string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace));
        /// <summary>
        /// Update Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測に関する情報を更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measReplace"> (optional)</param>
        /// <returns></returns>
        void UpdateProjectMeasurement(string projectUuid, string measurementUuid, MeasReplace measReplace = default(MeasReplace));

        /// <summary>
        /// Update Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測に関する情報を更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measReplace"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProjectMeasurementWithHttpInfo(string projectUuid, string measurementUuid, MeasReplace measReplace = default(MeasReplace));
        /// <summary>
        /// Replace Project Measurement Base Time
        /// </summary>
        /// <remarks>
        /// 基準時刻を更新します。 この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、 新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="measBaseTimePut"> (optional)</param>
        /// <returns>MeasBaseTime</returns>
        MeasBaseTime UpdateProjectMeasurementBaseTime(string projectUuid, string measurementUuid, string type, MeasBaseTimePut measBaseTimePut = default(MeasBaseTimePut));

        /// <summary>
        /// Replace Project Measurement Base Time
        /// </summary>
        /// <remarks>
        /// 基準時刻を更新します。 この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、 新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="measBaseTimePut"> (optional)</param>
        /// <returns>ApiResponse of MeasBaseTime</returns>
        ApiResponse<MeasBaseTime> UpdateProjectMeasurementBaseTimeWithHttpInfo(string projectUuid, string measurementUuid, string type, MeasBaseTimePut measBaseTimePut = default(MeasBaseTimePut));
        /// <summary>
        /// Update Project Measurement Sequence
        /// </summary>
        /// <remarks>
        /// 計測シーケンスを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <returns>MeasurementSequenceGroup</returns>
        MeasurementSequenceGroup UpdateProjectMeasurementSequence(string projectUuid, string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace));

        /// <summary>
        /// Update Project Measurement Sequence
        /// </summary>
        /// <remarks>
        /// 計測シーケンスを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <returns>ApiResponse of MeasurementSequenceGroup</returns>
        ApiResponse<MeasurementSequenceGroup> UpdateProjectMeasurementSequenceWithHttpInfo(string projectUuid, string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeasMeasurementsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Complete Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/complete&#x60; を使用してください）  計測を回収完了（completed）にします。  completedは、エッジでのデータ取得が終了し（ended）、  かつ、すべてのデータがサーバーに送信されたことを意味します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurement</returns>
        [Obsolete]
        System.Threading.Tasks.Task<Measurement> CompleteMeasurementAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Complete Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/complete&#x60; を使用してください）  計測を回収完了（completed）にします。  completedは、エッジでのデータ取得が終了し（ended）、  かつ、すべてのデータがサーバーに送信されたことを意味します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurement)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Measurement>> CompleteMeasurementWithHttpInfoAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Complete Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測を回収完了（completed）にします。 completedは、エッジでのデータ取得が終了し（ended）、 かつ、すべてのデータがサーバーに送信されたことを意味します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurement</returns>
        System.Threading.Tasks.Task<Measurement> CompleteProjectMeasurementAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Complete Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測を回収完了（completed）にします。 completedは、エッジでのデータ取得が終了し（ended）、 かつ、すべてのデータがサーバーに送信されたことを意味します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Measurement>> CompleteProjectMeasurementWithHttpInfoAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測を作成します。   - **Note**    - 計測の保護／非保護を切り替える権限を持たないエッジも、      計測作成時は保護された計測を作成することが可能です。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurement</returns>
        [Obsolete]
        System.Threading.Tasks.Task<Measurement> CreateMeasurementAsync(MeasCreate measCreate = default(MeasCreate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測を作成します。   - **Note**    - 計測の保護／非保護を切り替える権限を持たないエッジも、      計測作成時は保護された計測を作成することが可能です。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurement)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Measurement>> CreateMeasurementWithHttpInfoAsync(MeasCreate measCreate = default(MeasCreate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Measurement Sequence Chunk
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/sequence/chunks&#x60; を使用してください） 計測シーケンスにチャンクを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateMeasurementChunksResult</returns>
        [Obsolete]
        System.Threading.Tasks.Task<CreateMeasurementChunksResult> CreateMeasurementSequenceChunksAsync(FileParameter body = default(FileParameter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Measurement Sequence Chunk
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/sequence/chunks&#x60; を使用してください） 計測シーケンスにチャンクを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateMeasurementChunksResult)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<CreateMeasurementChunksResult>> CreateMeasurementSequenceChunksWithHttpInfoAsync(FileParameter body = default(FileParameter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Measurement with UUID
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 指定したUUIDの計測を作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurement</returns>
        [Obsolete]
        System.Threading.Tasks.Task<Measurement> CreateMeasurementWithUUIDAsync(string measurementUuid, MeasCreate measCreate = default(MeasCreate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Measurement with UUID
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 指定したUUIDの計測を作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurement)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Measurement>> CreateMeasurementWithUUIDWithHttpInfoAsync(string measurementUuid, MeasCreate measCreate = default(MeasCreate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測を作成します。  - **Note**   - 計測の保護／非保護を切り替える権限を持たないエッジも、     計測作成時は保護された計測を作成することが可能です。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurement</returns>
        System.Threading.Tasks.Task<Measurement> CreateProjectMeasurementAsync(string projectUuid, MeasCreate measCreate = default(MeasCreate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測を作成します。  - **Note**   - 計測の保護／非保護を切り替える権限を持たないエッジも、     計測作成時は保護された計測を作成することが可能です。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Measurement>> CreateProjectMeasurementWithHttpInfoAsync(string projectUuid, MeasCreate measCreate = default(MeasCreate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Project Measurement Sequence Chunk
        /// </summary>
        /// <remarks>
        /// 計測シーケンスにチャンクを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateMeasurementChunksResult</returns>
        System.Threading.Tasks.Task<CreateMeasurementChunksResult> CreateProjectMeasurementSequenceChunksAsync(string projectUuid, FileParameter body = default(FileParameter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Project Measurement Sequence Chunk
        /// </summary>
        /// <remarks>
        /// 計測シーケンスにチャンクを作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateMeasurementChunksResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateMeasurementChunksResult>> CreateProjectMeasurementSequenceChunksWithHttpInfoAsync(string projectUuid, FileParameter body = default(FileParameter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Project Measurement with UUID
        /// </summary>
        /// <remarks>
        /// 指定したUUIDの計測を作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurement</returns>
        System.Threading.Tasks.Task<Measurement> CreateProjectMeasurementWithUUIDAsync(string projectUuid, string measurementUuid, MeasCreate measCreate = default(MeasCreate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Project Measurement with UUID
        /// </summary>
        /// <remarks>
        /// 指定したUUIDの計測を作成します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Measurement>> CreateProjectMeasurementWithUUIDWithHttpInfoAsync(string projectUuid, string measurementUuid, MeasCreate measCreate = default(MeasCreate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trash Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください）  計測を削除します。  - **Note**    - 保護された計測は削除できません。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task DeleteMeasurementAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trash Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください）  計測を削除します。  - **Note**    - 保護された計測は削除できません。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMeasurementWithHttpInfoAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Measurement Base Time
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を削除します。   指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、  その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。   このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task DeleteMeasurementBaseTimeAsync(string measurementUuid, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Measurement Base Time
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を削除します。   指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、  その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。   このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMeasurementBaseTimeWithHttpInfoAsync(string measurementUuid, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trash Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測を削除します。 - **Note**   - 保護された計測は削除できません。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectMeasurementAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trash Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測を削除します。 - **Note**   - 保護された計測は削除できません。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectMeasurementWithHttpInfoAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Project Measurement Base Time
        /// </summary>
        /// <remarks>
        /// 基準時刻を削除します。 指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、 その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。 このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectMeasurementBaseTimeAsync(string projectUuid, string measurementUuid, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Project Measurement Base Time
        /// </summary>
        /// <remarks>
        /// 基準時刻を削除します。 指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、 その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。 このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectMeasurementBaseTimeWithHttpInfoAsync(string projectUuid, string measurementUuid, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/end&#x60; を使用してください）  計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。  （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SequenceSummary</returns>
        [Obsolete]
        System.Threading.Tasks.Task<SequenceSummary> EndMeasurementAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/end&#x60; を使用してください）  計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。  （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SequenceSummary)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<SequenceSummary>> EndMeasurementWithHttpInfoAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。 （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SequenceSummary</returns>
        System.Threading.Tasks.Task<SequenceSummary> EndProjectMeasurementAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。 （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SequenceSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<SequenceSummary>> EndProjectMeasurementWithHttpInfoAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurement</returns>
        [Obsolete]
        System.Threading.Tasks.Task<Measurement> GetMeasurementAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurement)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Measurement>> GetMeasurementWithHttpInfoAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Measurement Base Time
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください） 基準時刻タイプを指定して計測の基準時刻を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasBaseTime</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MeasBaseTime> GetMeasurementBaseTimeAsync(string measurementUuid, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Measurement Base Time
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください） 基準時刻タイプを指定して計測の基準時刻を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasBaseTime)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MeasBaseTime>> GetMeasurementBaseTimeWithHttpInfoAsync(string measurementUuid, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Measurement from Marker
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}/measurement&#x60; を使用してください）
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurement</returns>
        [Obsolete]
        System.Threading.Tasks.Task<Measurement> GetMeasurementFromMeasurementMarkerAsync(string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Measurement from Marker
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}/measurement&#x60; を使用してください）
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurement)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Measurement>> GetMeasurementFromMeasurementMarkerWithHttpInfoAsync(string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Measurement Sections
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sections&#x60; を使用してください）  計測に含まれるセクションのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="filter">計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementSectionsGetResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MeasurementSectionsGetResponse> GetMeasurementSectionsAsync(string measurementUuid, string filter = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Measurement Sections
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sections&#x60; を使用してください）  計測に含まれるセクションのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="filter">計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementSectionsGetResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MeasurementSectionsGetResponse>> GetMeasurementSectionsWithHttpInfoAsync(string measurementUuid, string filter = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Measurement Sequence
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementSequenceGroup</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MeasurementSequenceGroup> GetMeasurementSequenceAsync(string measurementUuid, string sequencesUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Measurement Sequence
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementSequenceGroup)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MeasurementSequenceGroup>> GetMeasurementSequenceWithHttpInfoAsync(string measurementUuid, string sequencesUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurement</returns>
        System.Threading.Tasks.Task<Measurement> GetProjectMeasurementAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Measurement>> GetProjectMeasurementWithHttpInfoAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Project Measurement Base Time
        /// </summary>
        /// <remarks>
        /// 基準時刻タイプを指定して計測の基準時刻を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasBaseTime</returns>
        System.Threading.Tasks.Task<MeasBaseTime> GetProjectMeasurementBaseTimeAsync(string projectUuid, string measurementUuid, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Project Measurement Base Time
        /// </summary>
        /// <remarks>
        /// 基準時刻タイプを指定して計測の基準時刻を取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasBaseTime)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeasBaseTime>> GetProjectMeasurementBaseTimeWithHttpInfoAsync(string projectUuid, string measurementUuid, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Project Measurement Sections
        /// </summary>
        /// <remarks>
        /// 計測に含まれるセクションのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="filter">計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementSectionsGetResponse</returns>
        System.Threading.Tasks.Task<MeasurementSectionsGetResponse> GetProjectMeasurementSectionsAsync(string projectUuid, string measurementUuid, string filter = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Project Measurement Sections
        /// </summary>
        /// <remarks>
        /// 計測に含まれるセクションのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="filter">計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementSectionsGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeasurementSectionsGetResponse>> GetProjectMeasurementSectionsWithHttpInfoAsync(string projectUuid, string measurementUuid, string filter = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Project Measurement Sequence
        /// </summary>
        /// <remarks>
        /// 計測シーケンスを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementSequenceGroup</returns>
        System.Threading.Tasks.Task<MeasurementSequenceGroup> GetProjectMeasurementSequenceAsync(string projectUuid, string measurementUuid, string sequencesUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Project Measurement Sequence
        /// </summary>
        /// <remarks>
        /// 計測シーケンスを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementSequenceGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeasurementSequenceGroup>> GetProjectMeasurementSequenceWithHttpInfoAsync(string projectUuid, string measurementUuid, string sequencesUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Measurement Base Times
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes&#x60; を使用してください）  計測の基準時刻のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasBaseTimes</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MeasBaseTimes> ListMeasurementBaseTimesAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Measurement Base Times
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes&#x60; を使用してください）  計測の基準時刻のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasBaseTimes)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MeasBaseTimes>> ListMeasurementBaseTimesWithHttpInfoAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Measurement Sequences
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences&#x60; を使用してください） 計測シーケンスのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementSequenceGroups</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MeasurementSequenceGroups> ListMeasurementSequencesAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Measurement Sequences
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences&#x60; を使用してください） 計測シーケンスのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementSequenceGroups)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MeasurementSequenceGroups>> ListMeasurementSequencesWithHttpInfoAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Measurements
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">計測のUUID (optional)</param>
        /// <param name="name">名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)</param>
        /// <param name="edgeUuid">計測に関連付けられたエッジのUUID (optional)</param>
        /// <param name="start">取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="end">取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="partialMatch">&#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +- -- -- -- -- -- -- -+                                    | measurement2 |                                    +- -- -- -- -- -- -- -+                        | measurement3 |                        +- -- -- -- -- -- -- -+                                                         time - -- -- -- -- --+- -- -- -- -- -- -- -- -- -- -- -- -- -- -+- -- -- -- -- -- -&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)</param>
        /// <param name="basetimeType">計測の基準時刻のタイプ (optional)</param>
        /// <param name="ended">計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)</param>
        /// <param name="since">指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="durationStart">計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)</param>
        /// <param name="durationEnd">計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)</param>
        /// <param name="status">計測のステータス (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurements</returns>
        [Obsolete]
        System.Threading.Tasks.Task<Measurements> ListMeasurementsAsync(List<string> uuid = default(List<string>), int? name = default(int?), string edgeUuid = default(string), string start = default(string), string end = default(string), bool? partialMatch = default(bool?), string basetimeType = default(string), bool? ended = default(bool?), string since = default(string), long? durationStart = default(long?), long? durationEnd = default(long?), List<string> status = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Measurements
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">計測のUUID (optional)</param>
        /// <param name="name">名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)</param>
        /// <param name="edgeUuid">計測に関連付けられたエッジのUUID (optional)</param>
        /// <param name="start">取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="end">取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="partialMatch">&#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +- -- -- -- -- -- -- -+                                    | measurement2 |                                    +- -- -- -- -- -- -- -+                        | measurement3 |                        +- -- -- -- -- -- -- -+                                                         time - -- -- -- -- --+- -- -- -- -- -- -- -- -- -- -- -- -- -- -+- -- -- -- -- -- -&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)</param>
        /// <param name="basetimeType">計測の基準時刻のタイプ (optional)</param>
        /// <param name="ended">計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)</param>
        /// <param name="since">指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="durationStart">計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)</param>
        /// <param name="durationEnd">計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)</param>
        /// <param name="status">計測のステータス (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurements)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Measurements>> ListMeasurementsWithHttpInfoAsync(List<string> uuid = default(List<string>), int? name = default(int?), string edgeUuid = default(string), string start = default(string), string end = default(string), bool? partialMatch = default(bool?), string basetimeType = default(string), bool? ended = default(bool?), string since = default(string), long? durationStart = default(long?), long? durationEnd = default(long?), List<string> status = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Project Measurement Base Times
        /// </summary>
        /// <remarks>
        /// 計測の基準時刻のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasBaseTimes</returns>
        System.Threading.Tasks.Task<MeasBaseTimes> ListProjectMeasurementBaseTimesAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Project Measurement Base Times
        /// </summary>
        /// <remarks>
        /// 計測の基準時刻のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasBaseTimes)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeasBaseTimes>> ListProjectMeasurementBaseTimesWithHttpInfoAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Project Measurement Sequences
        /// </summary>
        /// <remarks>
        /// 計測シーケンスのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementSequenceGroups</returns>
        System.Threading.Tasks.Task<MeasurementSequenceGroups> ListProjectMeasurementSequencesAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Project Measurement Sequences
        /// </summary>
        /// <remarks>
        /// 計測シーケンスのリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementSequenceGroups)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeasurementSequenceGroups>> ListProjectMeasurementSequencesWithHttpInfoAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Project Measurements
        /// </summary>
        /// <remarks>
        /// 計測のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">計測のUUID (optional)</param>
        /// <param name="name">名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)</param>
        /// <param name="edgeUuid">計測に関連付けられたエッジのUUID (optional)</param>
        /// <param name="start">取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="end">取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="partialMatch">&#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +- -- -- -- -- -- -- -+                                    | measurement2 |                                    +- -- -- -- -- -- -- -+                        | measurement3 |                        +- -- -- -- -- -- -- -+                                                         time - -- -- -- -- --+- -- -- -- -- -- -- -- -- -- -- -- -- -- -+- -- -- -- -- -- -&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)</param>
        /// <param name="basetimeType">計測の基準時刻のタイプ (optional)</param>
        /// <param name="ended">計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)</param>
        /// <param name="since">指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="durationStart">計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)</param>
        /// <param name="durationEnd">計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)</param>
        /// <param name="status">計測のステータス (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurements</returns>
        System.Threading.Tasks.Task<Measurements> ListProjectMeasurementsAsync(string projectUuid, List<string> uuid = default(List<string>), int? name = default(int?), string edgeUuid = default(string), string start = default(string), string end = default(string), bool? partialMatch = default(bool?), string basetimeType = default(string), bool? ended = default(bool?), string since = default(string), long? durationStart = default(long?), long? durationEnd = default(long?), List<string> status = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Project Measurements
        /// </summary>
        /// <remarks>
        /// 計測のリストを取得します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">計測のUUID (optional)</param>
        /// <param name="name">名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)</param>
        /// <param name="edgeUuid">計測に関連付けられたエッジのUUID (optional)</param>
        /// <param name="start">取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="end">取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="partialMatch">&#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +- -- -- -- -- -- -- -+                                    | measurement2 |                                    +- -- -- -- -- -- -- -+                        | measurement3 |                        +- -- -- -- -- -- -- -+                                                         time - -- -- -- -- --+- -- -- -- -- -- -- -- -- -- -- -- -- -- -+- -- -- -- -- -- -&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)</param>
        /// <param name="basetimeType">計測の基準時刻のタイプ (optional)</param>
        /// <param name="ended">計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)</param>
        /// <param name="since">指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="durationStart">計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)</param>
        /// <param name="durationEnd">計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)</param>
        /// <param name="status">計測のステータス (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurements)</returns>
        System.Threading.Tasks.Task<ApiResponse<Measurements>> ListProjectMeasurementsWithHttpInfoAsync(string projectUuid, List<string> uuid = default(List<string>), int? name = default(int?), string edgeUuid = default(string), string start = default(string), string end = default(string), bool? partialMatch = default(bool?), string basetimeType = default(string), bool? ended = default(bool?), string since = default(string), long? durationStart = default(long?), long? durationEnd = default(long?), List<string> status = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Protect Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task ProtectMeasurementAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Protect Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> ProtectMeasurementWithHttpInfoAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Protect Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProtectProjectMeasurementAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Protect Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProtectProjectMeasurementWithHttpInfoAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace Measurement Sequence
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを置換します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementSequenceGroup</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MeasurementSequenceGroup> ReplaceMeasurementSequenceAsync(string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace Measurement Sequence
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを置換します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementSequenceGroup)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MeasurementSequenceGroup>> ReplaceMeasurementSequenceWithHttpInfoAsync(string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace Project Measurement Sequence
        /// </summary>
        /// <remarks>
        /// 計測シーケンスを置換します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementSequenceGroup</returns>
        System.Threading.Tasks.Task<MeasurementSequenceGroup> ReplaceProjectMeasurementSequenceAsync(string projectUuid, string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace Project Measurement Sequence
        /// </summary>
        /// <remarks>
        /// 計測シーケンスを置換します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementSequenceGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeasurementSequenceGroup>> ReplaceProjectMeasurementSequenceWithHttpInfoAsync(string projectUuid, string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unprotect Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測の保護を解除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task UnprotectMeasurementAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unprotect Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測の保護を解除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> UnprotectMeasurementWithHttpInfoAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unprotect Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測の保護を解除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnprotectProjectMeasurementAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unprotect Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測の保護を解除します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnprotectProjectMeasurementWithHttpInfoAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測に関する情報を更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task UpdateMeasurementAsync(string measurementUuid, MeasReplace measReplace = default(MeasReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Measurement
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測に関する情報を更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMeasurementWithHttpInfoAsync(string measurementUuid, MeasReplace measReplace = default(MeasReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace Measurement Base Time
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を更新します。  この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、  新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="measBaseTimePut"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasBaseTime</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MeasBaseTime> UpdateMeasurementBaseTimeAsync(string measurementUuid, string type, MeasBaseTimePut measBaseTimePut = default(MeasBaseTimePut), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace Measurement Base Time
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を更新します。  この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、  新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="measBaseTimePut"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasBaseTime)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MeasBaseTime>> UpdateMeasurementBaseTimeWithHttpInfoAsync(string measurementUuid, string type, MeasBaseTimePut measBaseTimePut = default(MeasBaseTimePut), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Measurement Sequence
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementSequenceGroup</returns>
        [Obsolete]
        System.Threading.Tasks.Task<MeasurementSequenceGroup> UpdateMeasurementSequenceAsync(string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Measurement Sequence
        /// </summary>
        /// <remarks>
        /// （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementSequenceGroup)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<MeasurementSequenceGroup>> UpdateMeasurementSequenceWithHttpInfoAsync(string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測に関する情報を更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProjectMeasurementAsync(string projectUuid, string measurementUuid, MeasReplace measReplace = default(MeasReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Project Measurement
        /// </summary>
        /// <remarks>
        /// 計測に関する情報を更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProjectMeasurementWithHttpInfoAsync(string projectUuid, string measurementUuid, MeasReplace measReplace = default(MeasReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace Project Measurement Base Time
        /// </summary>
        /// <remarks>
        /// 基準時刻を更新します。 この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、 新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="measBaseTimePut"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasBaseTime</returns>
        System.Threading.Tasks.Task<MeasBaseTime> UpdateProjectMeasurementBaseTimeAsync(string projectUuid, string measurementUuid, string type, MeasBaseTimePut measBaseTimePut = default(MeasBaseTimePut), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace Project Measurement Base Time
        /// </summary>
        /// <remarks>
        /// 基準時刻を更新します。 この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、 新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="measBaseTimePut"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasBaseTime)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeasBaseTime>> UpdateProjectMeasurementBaseTimeWithHttpInfoAsync(string projectUuid, string measurementUuid, string type, MeasBaseTimePut measBaseTimePut = default(MeasBaseTimePut), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Project Measurement Sequence
        /// </summary>
        /// <remarks>
        /// 計測シーケンスを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementSequenceGroup</returns>
        System.Threading.Tasks.Task<MeasurementSequenceGroup> UpdateProjectMeasurementSequenceAsync(string projectUuid, string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Project Measurement Sequence
        /// </summary>
        /// <remarks>
        /// 計測シーケンスを更新します。
        /// </remarks>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementSequenceGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeasurementSequenceGroup>> UpdateProjectMeasurementSequenceWithHttpInfoAsync(string projectUuid, string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeasMeasurementsApi : IMeasMeasurementsApiSync, IMeasMeasurementsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MeasMeasurementsApi : IDisposable, IMeasMeasurementsApi
    {
        private intdash.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasMeasurementsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public MeasMeasurementsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasMeasurementsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public MeasMeasurementsApi(string basePath)
        {
            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                new intdash.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new intdash.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasMeasurementsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public MeasMeasurementsApi(intdash.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new intdash.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasMeasurementsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MeasMeasurementsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasMeasurementsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MeasMeasurementsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                new intdash.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new intdash.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasMeasurementsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MeasMeasurementsApi(HttpClient client, intdash.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = intdash.Client.Configuration.MergeConfigurations(
                intdash.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new intdash.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeasMeasurementsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public MeasMeasurementsApi(intdash.Client.ISynchronousClient client, intdash.Client.IAsynchronousClient asyncClient, intdash.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = intdash.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public intdash.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public intdash.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public intdash.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public intdash.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public intdash.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Complete Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/complete&#x60; を使用してください）  計測を回収完了（completed）にします。  completedは、エッジでのデータ取得が終了し（ended）、  かつ、すべてのデータがサーバーに送信されたことを意味します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>Measurement</returns>
        [Obsolete]
        public Measurement CompleteMeasurement(string measurementUuid)
        {
            intdash.Client.ApiResponse<Measurement> localVarResponse = CompleteMeasurementWithHttpInfo(measurementUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Complete Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/complete&#x60; を使用してください）  計測を回収完了（completed）にします。  completedは、エッジでのデータ取得が終了し（ended）、  かつ、すべてのデータがサーバーに送信されたことを意味します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Measurement</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Measurement> CompleteMeasurementWithHttpInfo(string measurementUuid)
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->CompleteMeasurement");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Measurement>("/v1/measurements/{measurement_uuid}/complete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompleteMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Complete Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/complete&#x60; を使用してください）  計測を回収完了（completed）にします。  completedは、エッジでのデータ取得が終了し（ended）、  かつ、すべてのデータがサーバーに送信されたことを意味します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurement</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Measurement> CompleteMeasurementAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Measurement> localVarResponse = await CompleteMeasurementWithHttpInfoAsync(measurementUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Complete Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/complete&#x60; を使用してください）  計測を回収完了（completed）にします。  completedは、エッジでのデータ取得が終了し（ended）、  かつ、すべてのデータがサーバーに送信されたことを意味します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurement)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Measurement>> CompleteMeasurementWithHttpInfoAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->CompleteMeasurement");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Measurement>("/v1/measurements/{measurement_uuid}/complete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompleteMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Complete Project Measurement 計測を回収完了（completed）にします。 completedは、エッジでのデータ取得が終了し（ended）、 かつ、すべてのデータがサーバーに送信されたことを意味します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>Measurement</returns>
        public Measurement CompleteProjectMeasurement(string projectUuid, string measurementUuid)
        {
            intdash.Client.ApiResponse<Measurement> localVarResponse = CompleteProjectMeasurementWithHttpInfo(projectUuid, measurementUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Complete Project Measurement 計測を回収完了（completed）にします。 completedは、エッジでのデータ取得が終了し（ended）、 かつ、すべてのデータがサーバーに送信されたことを意味します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Measurement</returns>
        public intdash.Client.ApiResponse<Measurement> CompleteProjectMeasurementWithHttpInfo(string projectUuid, string measurementUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->CompleteProjectMeasurement");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->CompleteProjectMeasurement");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Measurement>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/complete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompleteProjectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Complete Project Measurement 計測を回収完了（completed）にします。 completedは、エッジでのデータ取得が終了し（ended）、 かつ、すべてのデータがサーバーに送信されたことを意味します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurement</returns>
        public async System.Threading.Tasks.Task<Measurement> CompleteProjectMeasurementAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Measurement> localVarResponse = await CompleteProjectMeasurementWithHttpInfoAsync(projectUuid, measurementUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Complete Project Measurement 計測を回収完了（completed）にします。 completedは、エッジでのデータ取得が終了し（ended）、 かつ、すべてのデータがサーバーに送信されたことを意味します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurement)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Measurement>> CompleteProjectMeasurementWithHttpInfoAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->CompleteProjectMeasurement");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->CompleteProjectMeasurement");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Measurement>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/complete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompleteProjectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測を作成します。   - **Note**    - 計測の保護／非保護を切り替える権限を持たないエッジも、      計測作成時は保護された計測を作成することが可能です。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measCreate"> (optional)</param>
        /// <returns>Measurement</returns>
        [Obsolete]
        public Measurement CreateMeasurement(MeasCreate measCreate = default(MeasCreate))
        {
            intdash.Client.ApiResponse<Measurement> localVarResponse = CreateMeasurementWithHttpInfo(measCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測を作成します。   - **Note**    - 計測の保護／非保護を切り替える権限を持たないエッジも、      計測作成時は保護された計測を作成することが可能です。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measCreate"> (optional)</param>
        /// <returns>ApiResponse of Measurement</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Measurement> CreateMeasurementWithHttpInfo(MeasCreate measCreate = default(MeasCreate))
        {
            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = measCreate;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Measurement>("/v1/measurements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測を作成します。   - **Note**    - 計測の保護／非保護を切り替える権限を持たないエッジも、      計測作成時は保護された計測を作成することが可能です。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurement</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Measurement> CreateMeasurementAsync(MeasCreate measCreate = default(MeasCreate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Measurement> localVarResponse = await CreateMeasurementWithHttpInfoAsync(measCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測を作成します。   - **Note**    - 計測の保護／非保護を切り替える権限を持たないエッジも、      計測作成時は保護された計測を作成することが可能です。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurement)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Measurement>> CreateMeasurementWithHttpInfoAsync(MeasCreate measCreate = default(MeasCreate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = measCreate;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Measurement>("/v1/measurements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Measurement Sequence Chunk （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/sequence/chunks&#x60; を使用してください） 計測シーケンスにチャンクを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateMeasurementChunksResult</returns>
        [Obsolete]
        public CreateMeasurementChunksResult CreateMeasurementSequenceChunks(FileParameter body = default(FileParameter))
        {
            intdash.Client.ApiResponse<CreateMeasurementChunksResult> localVarResponse = CreateMeasurementSequenceChunksWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Measurement Sequence Chunk （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/sequence/chunks&#x60; を使用してください） 計測シーケンスにチャンクを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateMeasurementChunksResult</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<CreateMeasurementChunksResult> CreateMeasurementSequenceChunksWithHttpInfo(FileParameter body = default(FileParameter))
        {
            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.iscp.v2.protobuf",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateMeasurementChunksResult>("/v1/measurements/sequences/chunks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMeasurementSequenceChunks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Measurement Sequence Chunk （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/sequence/chunks&#x60; を使用してください） 計測シーケンスにチャンクを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateMeasurementChunksResult</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<CreateMeasurementChunksResult> CreateMeasurementSequenceChunksAsync(FileParameter body = default(FileParameter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<CreateMeasurementChunksResult> localVarResponse = await CreateMeasurementSequenceChunksWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Measurement Sequence Chunk （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/sequence/chunks&#x60; を使用してください） 計測シーケンスにチャンクを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateMeasurementChunksResult)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<CreateMeasurementChunksResult>> CreateMeasurementSequenceChunksWithHttpInfoAsync(FileParameter body = default(FileParameter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.iscp.v2.protobuf", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateMeasurementChunksResult>("/v1/measurements/sequences/chunks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMeasurementSequenceChunks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Measurement with UUID （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 指定したUUIDの計測を作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <returns>Measurement</returns>
        [Obsolete]
        public Measurement CreateMeasurementWithUUID(string measurementUuid, MeasCreate measCreate = default(MeasCreate))
        {
            intdash.Client.ApiResponse<Measurement> localVarResponse = CreateMeasurementWithUUIDWithHttpInfo(measurementUuid, measCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Measurement with UUID （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 指定したUUIDの計測を作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <returns>ApiResponse of Measurement</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Measurement> CreateMeasurementWithUUIDWithHttpInfo(string measurementUuid, MeasCreate measCreate = default(MeasCreate))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->CreateMeasurementWithUUID");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.Data = measCreate;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Measurement>("/v1/measurements/{measurement_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMeasurementWithUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Measurement with UUID （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 指定したUUIDの計測を作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurement</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Measurement> CreateMeasurementWithUUIDAsync(string measurementUuid, MeasCreate measCreate = default(MeasCreate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Measurement> localVarResponse = await CreateMeasurementWithUUIDWithHttpInfoAsync(measurementUuid, measCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Measurement with UUID （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 指定したUUIDの計測を作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurement)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Measurement>> CreateMeasurementWithUUIDWithHttpInfoAsync(string measurementUuid, MeasCreate measCreate = default(MeasCreate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->CreateMeasurementWithUUID");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.Data = measCreate;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Measurement>("/v1/measurements/{measurement_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMeasurementWithUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Project Measurement 計測を作成します。  - **Note**   - 計測の保護／非保護を切り替える権限を持たないエッジも、     計測作成時は保護された計測を作成することが可能です。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <returns>Measurement</returns>
        public Measurement CreateProjectMeasurement(string projectUuid, MeasCreate measCreate = default(MeasCreate))
        {
            intdash.Client.ApiResponse<Measurement> localVarResponse = CreateProjectMeasurementWithHttpInfo(projectUuid, measCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Project Measurement 計測を作成します。  - **Note**   - 計測の保護／非保護を切り替える権限を持たないエッジも、     計測作成時は保護された計測を作成することが可能です。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <returns>ApiResponse of Measurement</returns>
        public intdash.Client.ApiResponse<Measurement> CreateProjectMeasurementWithHttpInfo(string projectUuid, MeasCreate measCreate = default(MeasCreate))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->CreateProjectMeasurement");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.Data = measCreate;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Measurement>("/v1/projects/{project_uuid}/measurements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProjectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Project Measurement 計測を作成します。  - **Note**   - 計測の保護／非保護を切り替える権限を持たないエッジも、     計測作成時は保護された計測を作成することが可能です。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurement</returns>
        public async System.Threading.Tasks.Task<Measurement> CreateProjectMeasurementAsync(string projectUuid, MeasCreate measCreate = default(MeasCreate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Measurement> localVarResponse = await CreateProjectMeasurementWithHttpInfoAsync(projectUuid, measCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Project Measurement 計測を作成します。  - **Note**   - 計測の保護／非保護を切り替える権限を持たないエッジも、     計測作成時は保護された計測を作成することが可能です。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurement)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Measurement>> CreateProjectMeasurementWithHttpInfoAsync(string projectUuid, MeasCreate measCreate = default(MeasCreate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->CreateProjectMeasurement");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.Data = measCreate;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Measurement>("/v1/projects/{project_uuid}/measurements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProjectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Project Measurement Sequence Chunk 計測シーケンスにチャンクを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateMeasurementChunksResult</returns>
        public CreateMeasurementChunksResult CreateProjectMeasurementSequenceChunks(string projectUuid, FileParameter body = default(FileParameter))
        {
            intdash.Client.ApiResponse<CreateMeasurementChunksResult> localVarResponse = CreateProjectMeasurementSequenceChunksWithHttpInfo(projectUuid, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Project Measurement Sequence Chunk 計測シーケンスにチャンクを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateMeasurementChunksResult</returns>
        public intdash.Client.ApiResponse<CreateMeasurementChunksResult> CreateProjectMeasurementSequenceChunksWithHttpInfo(string projectUuid, FileParameter body = default(FileParameter))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->CreateProjectMeasurementSequenceChunks");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.iscp.v2.protobuf",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateMeasurementChunksResult>("/v1/projects/{project_uuid}/measurements/sequences/chunks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProjectMeasurementSequenceChunks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Project Measurement Sequence Chunk 計測シーケンスにチャンクを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateMeasurementChunksResult</returns>
        public async System.Threading.Tasks.Task<CreateMeasurementChunksResult> CreateProjectMeasurementSequenceChunksAsync(string projectUuid, FileParameter body = default(FileParameter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<CreateMeasurementChunksResult> localVarResponse = await CreateProjectMeasurementSequenceChunksWithHttpInfoAsync(projectUuid, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Project Measurement Sequence Chunk 計測シーケンスにチャンクを作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateMeasurementChunksResult)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<CreateMeasurementChunksResult>> CreateProjectMeasurementSequenceChunksWithHttpInfoAsync(string projectUuid, FileParameter body = default(FileParameter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->CreateProjectMeasurementSequenceChunks");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.iscp.v2.protobuf", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateMeasurementChunksResult>("/v1/projects/{project_uuid}/measurements/sequences/chunks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProjectMeasurementSequenceChunks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Project Measurement with UUID 指定したUUIDの計測を作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <returns>Measurement</returns>
        public Measurement CreateProjectMeasurementWithUUID(string projectUuid, string measurementUuid, MeasCreate measCreate = default(MeasCreate))
        {
            intdash.Client.ApiResponse<Measurement> localVarResponse = CreateProjectMeasurementWithUUIDWithHttpInfo(projectUuid, measurementUuid, measCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Project Measurement with UUID 指定したUUIDの計測を作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <returns>ApiResponse of Measurement</returns>
        public intdash.Client.ApiResponse<Measurement> CreateProjectMeasurementWithUUIDWithHttpInfo(string projectUuid, string measurementUuid, MeasCreate measCreate = default(MeasCreate))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->CreateProjectMeasurementWithUUID");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->CreateProjectMeasurementWithUUID");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.Data = measCreate;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Measurement>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProjectMeasurementWithUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Project Measurement with UUID 指定したUUIDの計測を作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurement</returns>
        public async System.Threading.Tasks.Task<Measurement> CreateProjectMeasurementWithUUIDAsync(string projectUuid, string measurementUuid, MeasCreate measCreate = default(MeasCreate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Measurement> localVarResponse = await CreateProjectMeasurementWithUUIDWithHttpInfoAsync(projectUuid, measurementUuid, measCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Project Measurement with UUID 指定したUUIDの計測を作成します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurement)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Measurement>> CreateProjectMeasurementWithUUIDWithHttpInfoAsync(string projectUuid, string measurementUuid, MeasCreate measCreate = default(MeasCreate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->CreateProjectMeasurementWithUUID");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->CreateProjectMeasurementWithUUID");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.Data = measCreate;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Measurement>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProjectMeasurementWithUUID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trash Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください）  計測を削除します。  - **Note**    - 保護された計測は削除できません。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns></returns>
        [Obsolete]
        public void DeleteMeasurement(string measurementUuid)
        {
            DeleteMeasurementWithHttpInfo(measurementUuid);
        }

        /// <summary>
        /// Trash Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください）  計測を削除します。  - **Note**    - 保護された計測は削除できません。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Object> DeleteMeasurementWithHttpInfo(string measurementUuid)
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->DeleteMeasurement");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/measurements/{measurement_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trash Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください）  計測を削除します。  - **Note**    - 保護された計測は削除できません。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task DeleteMeasurementAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteMeasurementWithHttpInfoAsync(measurementUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Trash Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください）  計測を削除します。  - **Note**    - 保護された計測は削除できません。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> DeleteMeasurementWithHttpInfoAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->DeleteMeasurement");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/measurements/{measurement_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Measurement Base Time （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を削除します。   指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、  その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。   このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <returns></returns>
        [Obsolete]
        public void DeleteMeasurementBaseTime(string measurementUuid, string type)
        {
            DeleteMeasurementBaseTimeWithHttpInfo(measurementUuid, type);
        }

        /// <summary>
        /// Delete Measurement Base Time （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を削除します。   指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、  その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。   このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Object> DeleteMeasurementBaseTimeWithHttpInfo(string measurementUuid, string type)
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->DeleteMeasurementBaseTime");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'type' when calling MeasMeasurementsApi->DeleteMeasurementBaseTime");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", intdash.Client.ClientUtils.ParameterToString(type)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/measurements/{measurement_uuid}/basetimes/{type}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMeasurementBaseTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Measurement Base Time （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を削除します。   指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、  その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。   このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task DeleteMeasurementBaseTimeAsync(string measurementUuid, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteMeasurementBaseTimeWithHttpInfoAsync(measurementUuid, type, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Measurement Base Time （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を削除します。   指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、  その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。   このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> DeleteMeasurementBaseTimeWithHttpInfoAsync(string measurementUuid, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->DeleteMeasurementBaseTime");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'type' when calling MeasMeasurementsApi->DeleteMeasurementBaseTime");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", intdash.Client.ClientUtils.ParameterToString(type)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/measurements/{measurement_uuid}/basetimes/{type}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMeasurementBaseTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trash Project Measurement 計測を削除します。 - **Note**   - 保護された計測は削除できません。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns></returns>
        public void DeleteProjectMeasurement(string projectUuid, string measurementUuid)
        {
            DeleteProjectMeasurementWithHttpInfo(projectUuid, measurementUuid);
        }

        /// <summary>
        /// Trash Project Measurement 計測を削除します。 - **Note**   - 保護された計測は削除できません。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> DeleteProjectMeasurementWithHttpInfo(string projectUuid, string measurementUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->DeleteProjectMeasurement");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->DeleteProjectMeasurement");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trash Project Measurement 計測を削除します。 - **Note**   - 保護された計測は削除できません。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectMeasurementAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProjectMeasurementWithHttpInfoAsync(projectUuid, measurementUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Trash Project Measurement 計測を削除します。 - **Note**   - 保護された計測は削除できません。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> DeleteProjectMeasurementWithHttpInfoAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->DeleteProjectMeasurement");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->DeleteProjectMeasurement");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Project Measurement Base Time 基準時刻を削除します。 指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、 その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。 このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <returns></returns>
        public void DeleteProjectMeasurementBaseTime(string projectUuid, string measurementUuid, string type)
        {
            DeleteProjectMeasurementBaseTimeWithHttpInfo(projectUuid, measurementUuid, type);
        }

        /// <summary>
        /// Delete Project Measurement Base Time 基準時刻を削除します。 指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、 その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。 このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> DeleteProjectMeasurementBaseTimeWithHttpInfo(string projectUuid, string measurementUuid, string type)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->DeleteProjectMeasurementBaseTime");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->DeleteProjectMeasurementBaseTime");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'type' when calling MeasMeasurementsApi->DeleteProjectMeasurementBaseTime");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", intdash.Client.ClientUtils.ParameterToString(type)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes/{type}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectMeasurementBaseTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Project Measurement Base Time 基準時刻を削除します。 指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、 その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。 このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectMeasurementBaseTimeAsync(string projectUuid, string measurementUuid, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProjectMeasurementBaseTimeWithHttpInfoAsync(projectUuid, measurementUuid, type, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Project Measurement Base Time 基準時刻を削除します。 指定された基準時刻が使用中の場合（その計測の &#x60;basetime_type&#x60; として設定されている場合）は、 その基準時刻は削除できません（ステータスコード &#x60;409&#x60; が返却されます）。 このような場合は、他の基準時刻をその計測の &#x60;basetime_type&#x60; にしてから、削除したい基準時刻を削除してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> DeleteProjectMeasurementBaseTimeWithHttpInfoAsync(string projectUuid, string measurementUuid, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->DeleteProjectMeasurementBaseTime");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->DeleteProjectMeasurementBaseTime");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'type' when calling MeasMeasurementsApi->DeleteProjectMeasurementBaseTime");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", intdash.Client.ClientUtils.ParameterToString(type)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes/{type}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectMeasurementBaseTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// End Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/end&#x60; を使用してください）  計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。  （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>SequenceSummary</returns>
        [Obsolete]
        public SequenceSummary EndMeasurement(string measurementUuid)
        {
            intdash.Client.ApiResponse<SequenceSummary> localVarResponse = EndMeasurementWithHttpInfo(measurementUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/end&#x60; を使用してください）  計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。  （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of SequenceSummary</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<SequenceSummary> EndMeasurementWithHttpInfo(string measurementUuid)
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->EndMeasurement");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SequenceSummary>("/v1/measurements/{measurement_uuid}/end", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EndMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// End Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/end&#x60; を使用してください）  計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。  （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SequenceSummary</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<SequenceSummary> EndMeasurementAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<SequenceSummary> localVarResponse = await EndMeasurementWithHttpInfoAsync(measurementUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/end&#x60; を使用してください）  計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。  （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SequenceSummary)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<SequenceSummary>> EndMeasurementWithHttpInfoAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->EndMeasurement");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SequenceSummary>("/v1/measurements/{measurement_uuid}/end", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EndMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// End Project Measurement 計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。 （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>SequenceSummary</returns>
        public SequenceSummary EndProjectMeasurement(string projectUuid, string measurementUuid)
        {
            intdash.Client.ApiResponse<SequenceSummary> localVarResponse = EndProjectMeasurementWithHttpInfo(projectUuid, measurementUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End Project Measurement 計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。 （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of SequenceSummary</returns>
        public intdash.Client.ApiResponse<SequenceSummary> EndProjectMeasurementWithHttpInfo(string projectUuid, string measurementUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->EndProjectMeasurement");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->EndProjectMeasurement");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SequenceSummary>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/end", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EndProjectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// End Project Measurement 計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。 （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SequenceSummary</returns>
        public async System.Threading.Tasks.Task<SequenceSummary> EndProjectMeasurementAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<SequenceSummary> localVarResponse = await EndProjectMeasurementWithHttpInfoAsync(projectUuid, measurementUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End Project Measurement 計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。 （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SequenceSummary)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<SequenceSummary>> EndProjectMeasurementWithHttpInfoAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->EndProjectMeasurement");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->EndProjectMeasurement");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SequenceSummary>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/end", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EndProjectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>Measurement</returns>
        [Obsolete]
        public Measurement GetMeasurement(string measurementUuid)
        {
            intdash.Client.ApiResponse<Measurement> localVarResponse = GetMeasurementWithHttpInfo(measurementUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Measurement</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Measurement> GetMeasurementWithHttpInfo(string measurementUuid)
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->GetMeasurement");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Measurement>("/v1/measurements/{measurement_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurement</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Measurement> GetMeasurementAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Measurement> localVarResponse = await GetMeasurementWithHttpInfoAsync(measurementUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurement)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Measurement>> GetMeasurementWithHttpInfoAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->GetMeasurement");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Measurement>("/v1/measurements/{measurement_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Measurement Base Time （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください） 基準時刻タイプを指定して計測の基準時刻を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <returns>MeasBaseTime</returns>
        [Obsolete]
        public MeasBaseTime GetMeasurementBaseTime(string measurementUuid, string type)
        {
            intdash.Client.ApiResponse<MeasBaseTime> localVarResponse = GetMeasurementBaseTimeWithHttpInfo(measurementUuid, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Measurement Base Time （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください） 基準時刻タイプを指定して計測の基準時刻を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <returns>ApiResponse of MeasBaseTime</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MeasBaseTime> GetMeasurementBaseTimeWithHttpInfo(string measurementUuid, string type)
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->GetMeasurementBaseTime");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'type' when calling MeasMeasurementsApi->GetMeasurementBaseTime");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", intdash.Client.ClientUtils.ParameterToString(type)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeasBaseTime>("/v1/measurements/{measurement_uuid}/basetimes/{type}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeasurementBaseTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Measurement Base Time （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください） 基準時刻タイプを指定して計測の基準時刻を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasBaseTime</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MeasBaseTime> GetMeasurementBaseTimeAsync(string measurementUuid, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasBaseTime> localVarResponse = await GetMeasurementBaseTimeWithHttpInfoAsync(measurementUuid, type, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Measurement Base Time （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください） 基準時刻タイプを指定して計測の基準時刻を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasBaseTime)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasBaseTime>> GetMeasurementBaseTimeWithHttpInfoAsync(string measurementUuid, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->GetMeasurementBaseTime");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'type' when calling MeasMeasurementsApi->GetMeasurementBaseTime");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", intdash.Client.ClientUtils.ParameterToString(type)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeasBaseTime>("/v1/measurements/{measurement_uuid}/basetimes/{type}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeasurementBaseTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Measurement from Marker （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}/measurement&#x60; を使用してください）
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>Measurement</returns>
        [Obsolete]
        public Measurement GetMeasurementFromMeasurementMarker(string measurementMarkerUuid)
        {
            intdash.Client.ApiResponse<Measurement> localVarResponse = GetMeasurementFromMeasurementMarkerWithHttpInfo(measurementMarkerUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Measurement from Marker （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}/measurement&#x60; を使用してください）
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <returns>ApiResponse of Measurement</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Measurement> GetMeasurementFromMeasurementMarkerWithHttpInfo(string measurementMarkerUuid)
        {
            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementsApi->GetMeasurementFromMeasurementMarker");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Measurement>("/v1/measurements/markers/{measurement_marker_uuid}/measurement", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeasurementFromMeasurementMarker", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Measurement from Marker （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}/measurement&#x60; を使用してください）
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurement</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Measurement> GetMeasurementFromMeasurementMarkerAsync(string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Measurement> localVarResponse = await GetMeasurementFromMeasurementMarkerWithHttpInfoAsync(measurementMarkerUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Measurement from Marker （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/markers/{measurement_marker_uuid}/measurement&#x60; を使用してください）
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementMarkerUuid">計測マーカーのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurement)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Measurement>> GetMeasurementFromMeasurementMarkerWithHttpInfoAsync(string measurementMarkerUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementMarkerUuid' is set
            if (measurementMarkerUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementMarkerUuid' when calling MeasMeasurementsApi->GetMeasurementFromMeasurementMarker");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_marker_uuid", intdash.Client.ClientUtils.ParameterToString(measurementMarkerUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Measurement>("/v1/measurements/markers/{measurement_marker_uuid}/measurement", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeasurementFromMeasurementMarker", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Measurement Sections （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sections&#x60; を使用してください）  計測に含まれるセクションのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="filter">計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <returns>MeasurementSectionsGetResponse</returns>
        [Obsolete]
        public MeasurementSectionsGetResponse GetMeasurementSections(string measurementUuid, string filter = default(string), int? limit = default(int?))
        {
            intdash.Client.ApiResponse<MeasurementSectionsGetResponse> localVarResponse = GetMeasurementSectionsWithHttpInfo(measurementUuid, filter, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Measurement Sections （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sections&#x60; を使用してください）  計測に含まれるセクションのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="filter">計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <returns>ApiResponse of MeasurementSectionsGetResponse</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MeasurementSectionsGetResponse> GetMeasurementSectionsWithHttpInfo(string measurementUuid, string filter = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->GetMeasurementSections");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeasurementSectionsGetResponse>("/v1/measurements/{measurement_uuid}/sections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeasurementSections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Measurement Sections （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sections&#x60; を使用してください）  計測に含まれるセクションのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="filter">計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementSectionsGetResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MeasurementSectionsGetResponse> GetMeasurementSectionsAsync(string measurementUuid, string filter = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementSectionsGetResponse> localVarResponse = await GetMeasurementSectionsWithHttpInfoAsync(measurementUuid, filter, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Measurement Sections （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sections&#x60; を使用してください）  計測に含まれるセクションのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="filter">計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementSectionsGetResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementSectionsGetResponse>> GetMeasurementSectionsWithHttpInfoAsync(string measurementUuid, string filter = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->GetMeasurementSections");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeasurementSectionsGetResponse>("/v1/measurements/{measurement_uuid}/sections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeasurementSections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Measurement Sequence （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <returns>MeasurementSequenceGroup</returns>
        [Obsolete]
        public MeasurementSequenceGroup GetMeasurementSequence(string measurementUuid, string sequencesUuid)
        {
            intdash.Client.ApiResponse<MeasurementSequenceGroup> localVarResponse = GetMeasurementSequenceWithHttpInfo(measurementUuid, sequencesUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Measurement Sequence （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <returns>ApiResponse of MeasurementSequenceGroup</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MeasurementSequenceGroup> GetMeasurementSequenceWithHttpInfo(string measurementUuid, string sequencesUuid)
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->GetMeasurementSequence");

            // verify the required parameter 'sequencesUuid' is set
            if (sequencesUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'sequencesUuid' when calling MeasMeasurementsApi->GetMeasurementSequence");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("sequences_uuid", intdash.Client.ClientUtils.ParameterToString(sequencesUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeasurementSequenceGroup>("/v1/measurements/{measurement_uuid}/sequences/{sequences_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeasurementSequence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Measurement Sequence （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementSequenceGroup</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MeasurementSequenceGroup> GetMeasurementSequenceAsync(string measurementUuid, string sequencesUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementSequenceGroup> localVarResponse = await GetMeasurementSequenceWithHttpInfoAsync(measurementUuid, sequencesUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Measurement Sequence （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementSequenceGroup)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementSequenceGroup>> GetMeasurementSequenceWithHttpInfoAsync(string measurementUuid, string sequencesUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->GetMeasurementSequence");

            // verify the required parameter 'sequencesUuid' is set
            if (sequencesUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'sequencesUuid' when calling MeasMeasurementsApi->GetMeasurementSequence");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("sequences_uuid", intdash.Client.ClientUtils.ParameterToString(sequencesUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeasurementSequenceGroup>("/v1/measurements/{measurement_uuid}/sequences/{sequences_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeasurementSequence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project Measurement 計測を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>Measurement</returns>
        public Measurement GetProjectMeasurement(string projectUuid, string measurementUuid)
        {
            intdash.Client.ApiResponse<Measurement> localVarResponse = GetProjectMeasurementWithHttpInfo(projectUuid, measurementUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project Measurement 計測を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Measurement</returns>
        public intdash.Client.ApiResponse<Measurement> GetProjectMeasurementWithHttpInfo(string projectUuid, string measurementUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->GetProjectMeasurement");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->GetProjectMeasurement");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Measurement>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project Measurement 計測を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurement</returns>
        public async System.Threading.Tasks.Task<Measurement> GetProjectMeasurementAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Measurement> localVarResponse = await GetProjectMeasurementWithHttpInfoAsync(projectUuid, measurementUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project Measurement 計測を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurement)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Measurement>> GetProjectMeasurementWithHttpInfoAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->GetProjectMeasurement");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->GetProjectMeasurement");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Measurement>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project Measurement Base Time 基準時刻タイプを指定して計測の基準時刻を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <returns>MeasBaseTime</returns>
        public MeasBaseTime GetProjectMeasurementBaseTime(string projectUuid, string measurementUuid, string type)
        {
            intdash.Client.ApiResponse<MeasBaseTime> localVarResponse = GetProjectMeasurementBaseTimeWithHttpInfo(projectUuid, measurementUuid, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project Measurement Base Time 基準時刻タイプを指定して計測の基準時刻を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <returns>ApiResponse of MeasBaseTime</returns>
        public intdash.Client.ApiResponse<MeasBaseTime> GetProjectMeasurementBaseTimeWithHttpInfo(string projectUuid, string measurementUuid, string type)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->GetProjectMeasurementBaseTime");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->GetProjectMeasurementBaseTime");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'type' when calling MeasMeasurementsApi->GetProjectMeasurementBaseTime");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", intdash.Client.ClientUtils.ParameterToString(type)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeasBaseTime>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes/{type}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectMeasurementBaseTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project Measurement Base Time 基準時刻タイプを指定して計測の基準時刻を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasBaseTime</returns>
        public async System.Threading.Tasks.Task<MeasBaseTime> GetProjectMeasurementBaseTimeAsync(string projectUuid, string measurementUuid, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasBaseTime> localVarResponse = await GetProjectMeasurementBaseTimeWithHttpInfoAsync(projectUuid, measurementUuid, type, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project Measurement Base Time 基準時刻タイプを指定して計測の基準時刻を取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasBaseTime)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasBaseTime>> GetProjectMeasurementBaseTimeWithHttpInfoAsync(string projectUuid, string measurementUuid, string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->GetProjectMeasurementBaseTime");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->GetProjectMeasurementBaseTime");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'type' when calling MeasMeasurementsApi->GetProjectMeasurementBaseTime");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", intdash.Client.ClientUtils.ParameterToString(type)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeasBaseTime>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes/{type}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectMeasurementBaseTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Project Measurement Sections 計測に含まれるセクションのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="filter">計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <returns>MeasurementSectionsGetResponse</returns>
        public MeasurementSectionsGetResponse GetProjectMeasurementSections(string projectUuid, string measurementUuid, string filter = default(string), int? limit = default(int?))
        {
            intdash.Client.ApiResponse<MeasurementSectionsGetResponse> localVarResponse = GetProjectMeasurementSectionsWithHttpInfo(projectUuid, measurementUuid, filter, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Project Measurement Sections 計測に含まれるセクションのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="filter">計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <returns>ApiResponse of MeasurementSectionsGetResponse</returns>
        public intdash.Client.ApiResponse<MeasurementSectionsGetResponse> GetProjectMeasurementSectionsWithHttpInfo(string projectUuid, string measurementUuid, string filter = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->GetProjectMeasurementSections");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->GetProjectMeasurementSections");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeasurementSectionsGetResponse>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/sections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectMeasurementSections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Project Measurement Sections 計測に含まれるセクションのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="filter">計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementSectionsGetResponse</returns>
        public async System.Threading.Tasks.Task<MeasurementSectionsGetResponse> GetProjectMeasurementSectionsAsync(string projectUuid, string measurementUuid, string filter = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementSectionsGetResponse> localVarResponse = await GetProjectMeasurementSectionsWithHttpInfoAsync(projectUuid, measurementUuid, filter, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Project Measurement Sections 計測に含まれるセクションのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="filter">計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to both)</param>
        /// <param name="limit">1回のリクエストで取得する件数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementSectionsGetResponse)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementSectionsGetResponse>> GetProjectMeasurementSectionsWithHttpInfoAsync(string projectUuid, string measurementUuid, string filter = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->GetProjectMeasurementSections");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->GetProjectMeasurementSections");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeasurementSectionsGetResponse>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/sections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectMeasurementSections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project Measurement Sequence 計測シーケンスを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <returns>MeasurementSequenceGroup</returns>
        public MeasurementSequenceGroup GetProjectMeasurementSequence(string projectUuid, string measurementUuid, string sequencesUuid)
        {
            intdash.Client.ApiResponse<MeasurementSequenceGroup> localVarResponse = GetProjectMeasurementSequenceWithHttpInfo(projectUuid, measurementUuid, sequencesUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project Measurement Sequence 計測シーケンスを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <returns>ApiResponse of MeasurementSequenceGroup</returns>
        public intdash.Client.ApiResponse<MeasurementSequenceGroup> GetProjectMeasurementSequenceWithHttpInfo(string projectUuid, string measurementUuid, string sequencesUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->GetProjectMeasurementSequence");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->GetProjectMeasurementSequence");

            // verify the required parameter 'sequencesUuid' is set
            if (sequencesUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'sequencesUuid' when calling MeasMeasurementsApi->GetProjectMeasurementSequence");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("sequences_uuid", intdash.Client.ClientUtils.ParameterToString(sequencesUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeasurementSequenceGroup>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences/{sequences_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectMeasurementSequence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project Measurement Sequence 計測シーケンスを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementSequenceGroup</returns>
        public async System.Threading.Tasks.Task<MeasurementSequenceGroup> GetProjectMeasurementSequenceAsync(string projectUuid, string measurementUuid, string sequencesUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementSequenceGroup> localVarResponse = await GetProjectMeasurementSequenceWithHttpInfoAsync(projectUuid, measurementUuid, sequencesUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project Measurement Sequence 計測シーケンスを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementSequenceGroup)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementSequenceGroup>> GetProjectMeasurementSequenceWithHttpInfoAsync(string projectUuid, string measurementUuid, string sequencesUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->GetProjectMeasurementSequence");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->GetProjectMeasurementSequence");

            // verify the required parameter 'sequencesUuid' is set
            if (sequencesUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'sequencesUuid' when calling MeasMeasurementsApi->GetProjectMeasurementSequence");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("sequences_uuid", intdash.Client.ClientUtils.ParameterToString(sequencesUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeasurementSequenceGroup>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences/{sequences_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectMeasurementSequence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Measurement Base Times （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes&#x60; を使用してください）  計測の基準時刻のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>MeasBaseTimes</returns>
        [Obsolete]
        public MeasBaseTimes ListMeasurementBaseTimes(string measurementUuid)
        {
            intdash.Client.ApiResponse<MeasBaseTimes> localVarResponse = ListMeasurementBaseTimesWithHttpInfo(measurementUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Measurement Base Times （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes&#x60; を使用してください）  計測の基準時刻のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of MeasBaseTimes</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MeasBaseTimes> ListMeasurementBaseTimesWithHttpInfo(string measurementUuid)
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->ListMeasurementBaseTimes");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeasBaseTimes>("/v1/measurements/{measurement_uuid}/basetimes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMeasurementBaseTimes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Measurement Base Times （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes&#x60; を使用してください）  計測の基準時刻のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasBaseTimes</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MeasBaseTimes> ListMeasurementBaseTimesAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasBaseTimes> localVarResponse = await ListMeasurementBaseTimesWithHttpInfoAsync(measurementUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Measurement Base Times （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes&#x60; を使用してください）  計測の基準時刻のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasBaseTimes)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasBaseTimes>> ListMeasurementBaseTimesWithHttpInfoAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->ListMeasurementBaseTimes");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeasBaseTimes>("/v1/measurements/{measurement_uuid}/basetimes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMeasurementBaseTimes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Measurement Sequences （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences&#x60; を使用してください） 計測シーケンスのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>MeasurementSequenceGroups</returns>
        [Obsolete]
        public MeasurementSequenceGroups ListMeasurementSequences(string measurementUuid)
        {
            intdash.Client.ApiResponse<MeasurementSequenceGroups> localVarResponse = ListMeasurementSequencesWithHttpInfo(measurementUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Measurement Sequences （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences&#x60; を使用してください） 計測シーケンスのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of MeasurementSequenceGroups</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MeasurementSequenceGroups> ListMeasurementSequencesWithHttpInfo(string measurementUuid)
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->ListMeasurementSequences");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeasurementSequenceGroups>("/v1/measurements/{measurement_uuid}/sequences", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMeasurementSequences", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Measurement Sequences （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences&#x60; を使用してください） 計測シーケンスのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementSequenceGroups</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MeasurementSequenceGroups> ListMeasurementSequencesAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementSequenceGroups> localVarResponse = await ListMeasurementSequencesWithHttpInfoAsync(measurementUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Measurement Sequences （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences&#x60; を使用してください） 計測シーケンスのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementSequenceGroups)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementSequenceGroups>> ListMeasurementSequencesWithHttpInfoAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->ListMeasurementSequences");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeasurementSequenceGroups>("/v1/measurements/{measurement_uuid}/sequences", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMeasurementSequences", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Measurements （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">計測のUUID (optional)</param>
        /// <param name="name">名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)</param>
        /// <param name="edgeUuid">計測に関連付けられたエッジのUUID (optional)</param>
        /// <param name="start">取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="end">取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="partialMatch">&#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +- -- -- -- -- -- -- -+                                    | measurement2 |                                    +- -- -- -- -- -- -- -+                        | measurement3 |                        +- -- -- -- -- -- -- -+                                                         time - -- -- -- -- --+- -- -- -- -- -- -- -- -- -- -- -- -- -- -+- -- -- -- -- -- -&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)</param>
        /// <param name="basetimeType">計測の基準時刻のタイプ (optional)</param>
        /// <param name="ended">計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)</param>
        /// <param name="since">指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="durationStart">計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)</param>
        /// <param name="durationEnd">計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)</param>
        /// <param name="status">計測のステータス (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>Measurements</returns>
        [Obsolete]
        public Measurements ListMeasurements(List<string> uuid = default(List<string>), int? name = default(int?), string edgeUuid = default(string), string start = default(string), string end = default(string), bool? partialMatch = default(bool?), string basetimeType = default(string), bool? ended = default(bool?), string since = default(string), long? durationStart = default(long?), long? durationEnd = default(long?), List<string> status = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string))
        {
            intdash.Client.ApiResponse<Measurements> localVarResponse = ListMeasurementsWithHttpInfo(uuid, name, edgeUuid, start, end, partialMatch, basetimeType, ended, since, durationStart, durationEnd, status, limit, sort, page, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Measurements （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">計測のUUID (optional)</param>
        /// <param name="name">名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)</param>
        /// <param name="edgeUuid">計測に関連付けられたエッジのUUID (optional)</param>
        /// <param name="start">取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="end">取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="partialMatch">&#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +- -- -- -- -- -- -- -+                                    | measurement2 |                                    +- -- -- -- -- -- -- -+                        | measurement3 |                        +- -- -- -- -- -- -- -+                                                         time - -- -- -- -- --+- -- -- -- -- -- -- -- -- -- -- -- -- -- -+- -- -- -- -- -- -&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)</param>
        /// <param name="basetimeType">計測の基準時刻のタイプ (optional)</param>
        /// <param name="ended">計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)</param>
        /// <param name="since">指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="durationStart">計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)</param>
        /// <param name="durationEnd">計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)</param>
        /// <param name="status">計測のステータス (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>ApiResponse of Measurements</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Measurements> ListMeasurementsWithHttpInfo(List<string> uuid = default(List<string>), int? name = default(int?), string edgeUuid = default(string), string start = default(string), string end = default(string), bool? partialMatch = default(bool?), string basetimeType = default(string), bool? ended = default(bool?), string since = default(string), long? durationStart = default(long?), long? durationEnd = default(long?), List<string> status = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string))
        {
            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "uuid", uuid));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (edgeUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "edge_uuid", edgeUuid));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (partialMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "partial_match", partialMatch));
            }
            if (basetimeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "basetime_type", basetimeType));
            }
            if (ended != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "ended", ended));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (durationStart != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "duration_start", durationStart));
            }
            if (durationEnd != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "duration_end", durationEnd));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "status", status));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Measurements>("/v1/measurements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMeasurements", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Measurements （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">計測のUUID (optional)</param>
        /// <param name="name">名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)</param>
        /// <param name="edgeUuid">計測に関連付けられたエッジのUUID (optional)</param>
        /// <param name="start">取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="end">取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="partialMatch">&#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +- -- -- -- -- -- -- -+                                    | measurement2 |                                    +- -- -- -- -- -- -- -+                        | measurement3 |                        +- -- -- -- -- -- -- -+                                                         time - -- -- -- -- --+- -- -- -- -- -- -- -- -- -- -- -- -- -- -+- -- -- -- -- -- -&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)</param>
        /// <param name="basetimeType">計測の基準時刻のタイプ (optional)</param>
        /// <param name="ended">計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)</param>
        /// <param name="since">指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="durationStart">計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)</param>
        /// <param name="durationEnd">計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)</param>
        /// <param name="status">計測のステータス (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurements</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Measurements> ListMeasurementsAsync(List<string> uuid = default(List<string>), int? name = default(int?), string edgeUuid = default(string), string start = default(string), string end = default(string), bool? partialMatch = default(bool?), string basetimeType = default(string), bool? ended = default(bool?), string since = default(string), long? durationStart = default(long?), long? durationEnd = default(long?), List<string> status = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Measurements> localVarResponse = await ListMeasurementsWithHttpInfoAsync(uuid, name, edgeUuid, start, end, partialMatch, basetimeType, ended, since, durationStart, durationEnd, status, limit, sort, page, order, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Measurements （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements&#x60; を使用してください）  計測のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">計測のUUID (optional)</param>
        /// <param name="name">名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)</param>
        /// <param name="edgeUuid">計測に関連付けられたエッジのUUID (optional)</param>
        /// <param name="start">取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="end">取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="partialMatch">&#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +- -- -- -- -- -- -- -+                                    | measurement2 |                                    +- -- -- -- -- -- -- -+                        | measurement3 |                        +- -- -- -- -- -- -- -+                                                         time - -- -- -- -- --+- -- -- -- -- -- -- -- -- -- -- -- -- -- -+- -- -- -- -- -- -&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)</param>
        /// <param name="basetimeType">計測の基準時刻のタイプ (optional)</param>
        /// <param name="ended">計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)</param>
        /// <param name="since">指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="durationStart">計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)</param>
        /// <param name="durationEnd">計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)</param>
        /// <param name="status">計測のステータス (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurements)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Measurements>> ListMeasurementsWithHttpInfoAsync(List<string> uuid = default(List<string>), int? name = default(int?), string edgeUuid = default(string), string start = default(string), string end = default(string), bool? partialMatch = default(bool?), string basetimeType = default(string), bool? ended = default(bool?), string since = default(string), long? durationStart = default(long?), long? durationEnd = default(long?), List<string> status = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "uuid", uuid));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (edgeUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "edge_uuid", edgeUuid));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (partialMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "partial_match", partialMatch));
            }
            if (basetimeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "basetime_type", basetimeType));
            }
            if (ended != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "ended", ended));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (durationStart != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "duration_start", durationStart));
            }
            if (durationEnd != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "duration_end", durationEnd));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "status", status));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Measurements>("/v1/measurements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMeasurements", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Project Measurement Base Times 計測の基準時刻のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>MeasBaseTimes</returns>
        public MeasBaseTimes ListProjectMeasurementBaseTimes(string projectUuid, string measurementUuid)
        {
            intdash.Client.ApiResponse<MeasBaseTimes> localVarResponse = ListProjectMeasurementBaseTimesWithHttpInfo(projectUuid, measurementUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Project Measurement Base Times 計測の基準時刻のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of MeasBaseTimes</returns>
        public intdash.Client.ApiResponse<MeasBaseTimes> ListProjectMeasurementBaseTimesWithHttpInfo(string projectUuid, string measurementUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->ListProjectMeasurementBaseTimes");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->ListProjectMeasurementBaseTimes");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeasBaseTimes>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProjectMeasurementBaseTimes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Project Measurement Base Times 計測の基準時刻のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasBaseTimes</returns>
        public async System.Threading.Tasks.Task<MeasBaseTimes> ListProjectMeasurementBaseTimesAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasBaseTimes> localVarResponse = await ListProjectMeasurementBaseTimesWithHttpInfoAsync(projectUuid, measurementUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Project Measurement Base Times 計測の基準時刻のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasBaseTimes)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasBaseTimes>> ListProjectMeasurementBaseTimesWithHttpInfoAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->ListProjectMeasurementBaseTimes");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->ListProjectMeasurementBaseTimes");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeasBaseTimes>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProjectMeasurementBaseTimes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Project Measurement Sequences 計測シーケンスのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>MeasurementSequenceGroups</returns>
        public MeasurementSequenceGroups ListProjectMeasurementSequences(string projectUuid, string measurementUuid)
        {
            intdash.Client.ApiResponse<MeasurementSequenceGroups> localVarResponse = ListProjectMeasurementSequencesWithHttpInfo(projectUuid, measurementUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Project Measurement Sequences 計測シーケンスのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of MeasurementSequenceGroups</returns>
        public intdash.Client.ApiResponse<MeasurementSequenceGroups> ListProjectMeasurementSequencesWithHttpInfo(string projectUuid, string measurementUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->ListProjectMeasurementSequences");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->ListProjectMeasurementSequences");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeasurementSequenceGroups>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProjectMeasurementSequences", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Project Measurement Sequences 計測シーケンスのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementSequenceGroups</returns>
        public async System.Threading.Tasks.Task<MeasurementSequenceGroups> ListProjectMeasurementSequencesAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementSequenceGroups> localVarResponse = await ListProjectMeasurementSequencesWithHttpInfoAsync(projectUuid, measurementUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Project Measurement Sequences 計測シーケンスのリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementSequenceGroups)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementSequenceGroups>> ListProjectMeasurementSequencesWithHttpInfoAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->ListProjectMeasurementSequences");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->ListProjectMeasurementSequences");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MeasurementSequenceGroups>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProjectMeasurementSequences", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Project Measurements 計測のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">計測のUUID (optional)</param>
        /// <param name="name">名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)</param>
        /// <param name="edgeUuid">計測に関連付けられたエッジのUUID (optional)</param>
        /// <param name="start">取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="end">取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="partialMatch">&#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +- -- -- -- -- -- -- -+                                    | measurement2 |                                    +- -- -- -- -- -- -- -+                        | measurement3 |                        +- -- -- -- -- -- -- -+                                                         time - -- -- -- -- --+- -- -- -- -- -- -- -- -- -- -- -- -- -- -+- -- -- -- -- -- -&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)</param>
        /// <param name="basetimeType">計測の基準時刻のタイプ (optional)</param>
        /// <param name="ended">計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)</param>
        /// <param name="since">指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="durationStart">計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)</param>
        /// <param name="durationEnd">計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)</param>
        /// <param name="status">計測のステータス (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>Measurements</returns>
        public Measurements ListProjectMeasurements(string projectUuid, List<string> uuid = default(List<string>), int? name = default(int?), string edgeUuid = default(string), string start = default(string), string end = default(string), bool? partialMatch = default(bool?), string basetimeType = default(string), bool? ended = default(bool?), string since = default(string), long? durationStart = default(long?), long? durationEnd = default(long?), List<string> status = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string))
        {
            intdash.Client.ApiResponse<Measurements> localVarResponse = ListProjectMeasurementsWithHttpInfo(projectUuid, uuid, name, edgeUuid, start, end, partialMatch, basetimeType, ended, since, durationStart, durationEnd, status, limit, sort, page, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Project Measurements 計測のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">計測のUUID (optional)</param>
        /// <param name="name">名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)</param>
        /// <param name="edgeUuid">計測に関連付けられたエッジのUUID (optional)</param>
        /// <param name="start">取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="end">取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="partialMatch">&#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +- -- -- -- -- -- -- -+                                    | measurement2 |                                    +- -- -- -- -- -- -- -+                        | measurement3 |                        +- -- -- -- -- -- -- -+                                                         time - -- -- -- -- --+- -- -- -- -- -- -- -- -- -- -- -- -- -- -+- -- -- -- -- -- -&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)</param>
        /// <param name="basetimeType">計測の基準時刻のタイプ (optional)</param>
        /// <param name="ended">計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)</param>
        /// <param name="since">指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="durationStart">計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)</param>
        /// <param name="durationEnd">計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)</param>
        /// <param name="status">計測のステータス (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <returns>ApiResponse of Measurements</returns>
        public intdash.Client.ApiResponse<Measurements> ListProjectMeasurementsWithHttpInfo(string projectUuid, List<string> uuid = default(List<string>), int? name = default(int?), string edgeUuid = default(string), string start = default(string), string end = default(string), bool? partialMatch = default(bool?), string basetimeType = default(string), bool? ended = default(bool?), string since = default(string), long? durationStart = default(long?), long? durationEnd = default(long?), List<string> status = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->ListProjectMeasurements");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "uuid", uuid));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (edgeUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "edge_uuid", edgeUuid));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (partialMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "partial_match", partialMatch));
            }
            if (basetimeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "basetime_type", basetimeType));
            }
            if (ended != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "ended", ended));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (durationStart != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "duration_start", durationStart));
            }
            if (durationEnd != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "duration_end", durationEnd));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "status", status));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Measurements>("/v1/projects/{project_uuid}/measurements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProjectMeasurements", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Project Measurements 計測のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">計測のUUID (optional)</param>
        /// <param name="name">名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)</param>
        /// <param name="edgeUuid">計測に関連付けられたエッジのUUID (optional)</param>
        /// <param name="start">取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="end">取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="partialMatch">&#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +- -- -- -- -- -- -- -+                                    | measurement2 |                                    +- -- -- -- -- -- -- -+                        | measurement3 |                        +- -- -- -- -- -- -- -+                                                         time - -- -- -- -- --+- -- -- -- -- -- -- -- -- -- -- -- -- -- -+- -- -- -- -- -- -&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)</param>
        /// <param name="basetimeType">計測の基準時刻のタイプ (optional)</param>
        /// <param name="ended">計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)</param>
        /// <param name="since">指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="durationStart">計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)</param>
        /// <param name="durationEnd">計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)</param>
        /// <param name="status">計測のステータス (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Measurements</returns>
        public async System.Threading.Tasks.Task<Measurements> ListProjectMeasurementsAsync(string projectUuid, List<string> uuid = default(List<string>), int? name = default(int?), string edgeUuid = default(string), string start = default(string), string end = default(string), bool? partialMatch = default(bool?), string basetimeType = default(string), bool? ended = default(bool?), string since = default(string), long? durationStart = default(long?), long? durationEnd = default(long?), List<string> status = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<Measurements> localVarResponse = await ListProjectMeasurementsWithHttpInfoAsync(projectUuid, uuid, name, edgeUuid, start, end, partialMatch, basetimeType, ended, since, durationStart, durationEnd, status, limit, sort, page, order, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Project Measurements 計測のリストを取得します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="uuid">計測のUUID (optional)</param>
        /// <param name="name">名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)</param>
        /// <param name="edgeUuid">計測に関連付けられたエッジのUUID (optional)</param>
        /// <param name="start">取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="end">取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="partialMatch">&#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +- -- -- -- -- -- -- -+                                    | measurement2 |                                    +- -- -- -- -- -- -- -+                        | measurement3 |                        +- -- -- -- -- -- -- -+                                                         time - -- -- -- -- --+- -- -- -- -- -- -- -- -- -- -- -- -- -- -+- -- -- -- -- -- -&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)</param>
        /// <param name="basetimeType">計測の基準時刻のタイプ (optional)</param>
        /// <param name="ended">計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)</param>
        /// <param name="since">指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)</param>
        /// <param name="durationStart">計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)</param>
        /// <param name="durationEnd">計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)</param>
        /// <param name="status">計測のステータス (optional)</param>
        /// <param name="limit">1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)</param>
        /// <param name="sort">並べ替えに使用するキー (optional, default to base_time)</param>
        /// <param name="page">取得するページの番号 (optional)</param>
        /// <param name="order">並べ替えの順序 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Measurements)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Measurements>> ListProjectMeasurementsWithHttpInfoAsync(string projectUuid, List<string> uuid = default(List<string>), int? name = default(int?), string edgeUuid = default(string), string start = default(string), string end = default(string), bool? partialMatch = default(bool?), string basetimeType = default(string), bool? ended = default(bool?), string since = default(string), long? durationStart = default(long?), long? durationEnd = default(long?), List<string> status = default(List<string>), int? limit = default(int?), string sort = default(string), int? page = default(int?), string order = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->ListProjectMeasurements");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            if (uuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "uuid", uuid));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (edgeUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "edge_uuid", edgeUuid));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (partialMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "partial_match", partialMatch));
            }
            if (basetimeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "basetime_type", basetimeType));
            }
            if (ended != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "ended", ended));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (durationStart != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "duration_start", durationStart));
            }
            if (durationEnd != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "duration_end", durationEnd));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("multi", "status", status));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(intdash.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Measurements>("/v1/projects/{project_uuid}/measurements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProjectMeasurements", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Protect Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns></returns>
        [Obsolete]
        public void ProtectMeasurement(string measurementUuid)
        {
            ProtectMeasurementWithHttpInfo(measurementUuid);
        }

        /// <summary>
        /// Protect Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Object> ProtectMeasurementWithHttpInfo(string measurementUuid)
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->ProtectMeasurement");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/measurements/{measurement_uuid}/protected", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProtectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Protect Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task ProtectMeasurementAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProtectMeasurementWithHttpInfoAsync(measurementUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Protect Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> ProtectMeasurementWithHttpInfoAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->ProtectMeasurement");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/measurements/{measurement_uuid}/protected", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProtectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Protect Project Measurement 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns></returns>
        public void ProtectProjectMeasurement(string projectUuid, string measurementUuid)
        {
            ProtectProjectMeasurementWithHttpInfo(projectUuid, measurementUuid);
        }

        /// <summary>
        /// Protect Project Measurement 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> ProtectProjectMeasurementWithHttpInfo(string projectUuid, string measurementUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->ProtectProjectMeasurement");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->ProtectProjectMeasurement");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/protected", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProtectProjectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Protect Project Measurement 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProtectProjectMeasurementAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ProtectProjectMeasurementWithHttpInfoAsync(projectUuid, measurementUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Protect Project Measurement 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> ProtectProjectMeasurementWithHttpInfoAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->ProtectProjectMeasurement");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->ProtectProjectMeasurement");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/protected", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProtectProjectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Measurement Sequence （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを置換します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <returns>MeasurementSequenceGroup</returns>
        [Obsolete]
        public MeasurementSequenceGroup ReplaceMeasurementSequence(string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace))
        {
            intdash.Client.ApiResponse<MeasurementSequenceGroup> localVarResponse = ReplaceMeasurementSequenceWithHttpInfo(measurementUuid, sequencesUuid, measurementSequenceGroupReplace);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Measurement Sequence （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを置換します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <returns>ApiResponse of MeasurementSequenceGroup</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MeasurementSequenceGroup> ReplaceMeasurementSequenceWithHttpInfo(string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->ReplaceMeasurementSequence");

            // verify the required parameter 'sequencesUuid' is set
            if (sequencesUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'sequencesUuid' when calling MeasMeasurementsApi->ReplaceMeasurementSequence");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("sequences_uuid", intdash.Client.ClientUtils.ParameterToString(sequencesUuid)); // path parameter
            localVarRequestOptions.Data = measurementSequenceGroupReplace;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<MeasurementSequenceGroup>("/v1/measurements/{measurement_uuid}/sequences/{sequences_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceMeasurementSequence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Measurement Sequence （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを置換します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementSequenceGroup</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MeasurementSequenceGroup> ReplaceMeasurementSequenceAsync(string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementSequenceGroup> localVarResponse = await ReplaceMeasurementSequenceWithHttpInfoAsync(measurementUuid, sequencesUuid, measurementSequenceGroupReplace, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Measurement Sequence （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを置換します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementSequenceGroup)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementSequenceGroup>> ReplaceMeasurementSequenceWithHttpInfoAsync(string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->ReplaceMeasurementSequence");

            // verify the required parameter 'sequencesUuid' is set
            if (sequencesUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'sequencesUuid' when calling MeasMeasurementsApi->ReplaceMeasurementSequence");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("sequences_uuid", intdash.Client.ClientUtils.ParameterToString(sequencesUuid)); // path parameter
            localVarRequestOptions.Data = measurementSequenceGroupReplace;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<MeasurementSequenceGroup>("/v1/measurements/{measurement_uuid}/sequences/{sequences_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceMeasurementSequence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Project Measurement Sequence 計測シーケンスを置換します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <returns>MeasurementSequenceGroup</returns>
        public MeasurementSequenceGroup ReplaceProjectMeasurementSequence(string projectUuid, string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace))
        {
            intdash.Client.ApiResponse<MeasurementSequenceGroup> localVarResponse = ReplaceProjectMeasurementSequenceWithHttpInfo(projectUuid, measurementUuid, sequencesUuid, measurementSequenceGroupReplace);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Project Measurement Sequence 計測シーケンスを置換します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <returns>ApiResponse of MeasurementSequenceGroup</returns>
        public intdash.Client.ApiResponse<MeasurementSequenceGroup> ReplaceProjectMeasurementSequenceWithHttpInfo(string projectUuid, string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->ReplaceProjectMeasurementSequence");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->ReplaceProjectMeasurementSequence");

            // verify the required parameter 'sequencesUuid' is set
            if (sequencesUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'sequencesUuid' when calling MeasMeasurementsApi->ReplaceProjectMeasurementSequence");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("sequences_uuid", intdash.Client.ClientUtils.ParameterToString(sequencesUuid)); // path parameter
            localVarRequestOptions.Data = measurementSequenceGroupReplace;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<MeasurementSequenceGroup>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences/{sequences_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceProjectMeasurementSequence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Project Measurement Sequence 計測シーケンスを置換します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementSequenceGroup</returns>
        public async System.Threading.Tasks.Task<MeasurementSequenceGroup> ReplaceProjectMeasurementSequenceAsync(string projectUuid, string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementSequenceGroup> localVarResponse = await ReplaceProjectMeasurementSequenceWithHttpInfoAsync(projectUuid, measurementUuid, sequencesUuid, measurementSequenceGroupReplace, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Project Measurement Sequence 計測シーケンスを置換します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementSequenceGroup)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementSequenceGroup>> ReplaceProjectMeasurementSequenceWithHttpInfoAsync(string projectUuid, string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->ReplaceProjectMeasurementSequence");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->ReplaceProjectMeasurementSequence");

            // verify the required parameter 'sequencesUuid' is set
            if (sequencesUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'sequencesUuid' when calling MeasMeasurementsApi->ReplaceProjectMeasurementSequence");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("sequences_uuid", intdash.Client.ClientUtils.ParameterToString(sequencesUuid)); // path parameter
            localVarRequestOptions.Data = measurementSequenceGroupReplace;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<MeasurementSequenceGroup>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences/{sequences_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceProjectMeasurementSequence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unprotect Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測の保護を解除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns></returns>
        [Obsolete]
        public void UnprotectMeasurement(string measurementUuid)
        {
            UnprotectMeasurementWithHttpInfo(measurementUuid);
        }

        /// <summary>
        /// Unprotect Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測の保護を解除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Object> UnprotectMeasurementWithHttpInfo(string measurementUuid)
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->UnprotectMeasurement");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/measurements/{measurement_uuid}/protected", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnprotectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unprotect Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測の保護を解除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task UnprotectMeasurementAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UnprotectMeasurementWithHttpInfoAsync(measurementUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Unprotect Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/protected&#x60; を使用してください） 計測の保護を解除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> UnprotectMeasurementWithHttpInfoAsync(string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->UnprotectMeasurement");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/measurements/{measurement_uuid}/protected", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnprotectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unprotect Project Measurement 計測の保護を解除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns></returns>
        public void UnprotectProjectMeasurement(string projectUuid, string measurementUuid)
        {
            UnprotectProjectMeasurementWithHttpInfo(projectUuid, measurementUuid);
        }

        /// <summary>
        /// Unprotect Project Measurement 計測の保護を解除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> UnprotectProjectMeasurementWithHttpInfo(string projectUuid, string measurementUuid)
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->UnprotectProjectMeasurement");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->UnprotectProjectMeasurement");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/protected", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnprotectProjectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unprotect Project Measurement 計測の保護を解除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnprotectProjectMeasurementAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UnprotectProjectMeasurementWithHttpInfoAsync(projectUuid, measurementUuid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Unprotect Project Measurement 計測の保護を解除します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> UnprotectProjectMeasurementWithHttpInfoAsync(string projectUuid, string measurementUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->UnprotectProjectMeasurement");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->UnprotectProjectMeasurement");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/protected", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnprotectProjectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測に関する情報を更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measReplace"> (optional)</param>
        /// <returns></returns>
        [Obsolete]
        public void UpdateMeasurement(string measurementUuid, MeasReplace measReplace = default(MeasReplace))
        {
            UpdateMeasurementWithHttpInfo(measurementUuid, measReplace);
        }

        /// <summary>
        /// Update Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測に関する情報を更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measReplace"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<Object> UpdateMeasurementWithHttpInfo(string measurementUuid, MeasReplace measReplace = default(MeasReplace))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->UpdateMeasurement");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.Data = measReplace;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/measurements/{measurement_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測に関する情報を更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task UpdateMeasurementAsync(string measurementUuid, MeasReplace measReplace = default(MeasReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateMeasurementWithHttpInfoAsync(measurementUuid, measReplace, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Measurement （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}&#x60; を使用してください） 計測に関する情報を更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> UpdateMeasurementWithHttpInfoAsync(string measurementUuid, MeasReplace measReplace = default(MeasReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->UpdateMeasurement");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.Data = measReplace;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/measurements/{measurement_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Measurement Base Time （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を更新します。  この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、  新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="measBaseTimePut"> (optional)</param>
        /// <returns>MeasBaseTime</returns>
        [Obsolete]
        public MeasBaseTime UpdateMeasurementBaseTime(string measurementUuid, string type, MeasBaseTimePut measBaseTimePut = default(MeasBaseTimePut))
        {
            intdash.Client.ApiResponse<MeasBaseTime> localVarResponse = UpdateMeasurementBaseTimeWithHttpInfo(measurementUuid, type, measBaseTimePut);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Measurement Base Time （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を更新します。  この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、  新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="measBaseTimePut"> (optional)</param>
        /// <returns>ApiResponse of MeasBaseTime</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MeasBaseTime> UpdateMeasurementBaseTimeWithHttpInfo(string measurementUuid, string type, MeasBaseTimePut measBaseTimePut = default(MeasBaseTimePut))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->UpdateMeasurementBaseTime");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'type' when calling MeasMeasurementsApi->UpdateMeasurementBaseTime");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", intdash.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.Data = measBaseTimePut;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<MeasBaseTime>("/v1/measurements/{measurement_uuid}/basetimes/{type}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeasurementBaseTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Measurement Base Time （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を更新します。  この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、  新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="measBaseTimePut"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasBaseTime</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MeasBaseTime> UpdateMeasurementBaseTimeAsync(string measurementUuid, string type, MeasBaseTimePut measBaseTimePut = default(MeasBaseTimePut), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasBaseTime> localVarResponse = await UpdateMeasurementBaseTimeWithHttpInfoAsync(measurementUuid, type, measBaseTimePut, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Measurement Base Time （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/basetimes/{type}&#x60; を使用してください）  基準時刻を更新します。  この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、  新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="measBaseTimePut"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasBaseTime)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasBaseTime>> UpdateMeasurementBaseTimeWithHttpInfoAsync(string measurementUuid, string type, MeasBaseTimePut measBaseTimePut = default(MeasBaseTimePut), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->UpdateMeasurementBaseTime");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'type' when calling MeasMeasurementsApi->UpdateMeasurementBaseTime");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", intdash.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.Data = measBaseTimePut;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<MeasBaseTime>("/v1/measurements/{measurement_uuid}/basetimes/{type}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeasurementBaseTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Measurement Sequence （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <returns>MeasurementSequenceGroup</returns>
        [Obsolete]
        public MeasurementSequenceGroup UpdateMeasurementSequence(string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace))
        {
            intdash.Client.ApiResponse<MeasurementSequenceGroup> localVarResponse = UpdateMeasurementSequenceWithHttpInfo(measurementUuid, sequencesUuid, measurementSequenceGroupReplace);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Measurement Sequence （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <returns>ApiResponse of MeasurementSequenceGroup</returns>
        [Obsolete]
        public intdash.Client.ApiResponse<MeasurementSequenceGroup> UpdateMeasurementSequenceWithHttpInfo(string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->UpdateMeasurementSequence");

            // verify the required parameter 'sequencesUuid' is set
            if (sequencesUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'sequencesUuid' when calling MeasMeasurementsApi->UpdateMeasurementSequence");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("sequences_uuid", intdash.Client.ClientUtils.ParameterToString(sequencesUuid)); // path parameter
            localVarRequestOptions.Data = measurementSequenceGroupReplace;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<MeasurementSequenceGroup>("/v1/measurements/{measurement_uuid}/sequences/{sequences_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeasurementSequence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Measurement Sequence （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementSequenceGroup</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<MeasurementSequenceGroup> UpdateMeasurementSequenceAsync(string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementSequenceGroup> localVarResponse = await UpdateMeasurementSequenceWithHttpInfoAsync(measurementUuid, sequencesUuid, measurementSequenceGroupReplace, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Measurement Sequence （Deprecated。このエンドポイントでなく &#x60;/projects/00000000-0000-0000-0000-000000000000/measurements/{measurement_uuid}/sequences/{sequence_uuid}&#x60; を使用してください） 計測シーケンスを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementSequenceGroup)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementSequenceGroup>> UpdateMeasurementSequenceWithHttpInfoAsync(string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->UpdateMeasurementSequence");

            // verify the required parameter 'sequencesUuid' is set
            if (sequencesUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'sequencesUuid' when calling MeasMeasurementsApi->UpdateMeasurementSequence");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("sequences_uuid", intdash.Client.ClientUtils.ParameterToString(sequencesUuid)); // path parameter
            localVarRequestOptions.Data = measurementSequenceGroupReplace;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<MeasurementSequenceGroup>("/v1/measurements/{measurement_uuid}/sequences/{sequences_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeasurementSequence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Project Measurement 計測に関する情報を更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measReplace"> (optional)</param>
        /// <returns></returns>
        public void UpdateProjectMeasurement(string projectUuid, string measurementUuid, MeasReplace measReplace = default(MeasReplace))
        {
            UpdateProjectMeasurementWithHttpInfo(projectUuid, measurementUuid, measReplace);
        }

        /// <summary>
        /// Update Project Measurement 計測に関する情報を更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measReplace"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public intdash.Client.ApiResponse<Object> UpdateProjectMeasurementWithHttpInfo(string projectUuid, string measurementUuid, MeasReplace measReplace = default(MeasReplace))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->UpdateProjectMeasurement");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->UpdateProjectMeasurement");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.Data = measReplace;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProjectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Project Measurement 計測に関する情報を更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProjectMeasurementAsync(string projectUuid, string measurementUuid, MeasReplace measReplace = default(MeasReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateProjectMeasurementWithHttpInfoAsync(projectUuid, measurementUuid, measReplace, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Project Measurement 計測に関する情報を更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="measReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<Object>> UpdateProjectMeasurementWithHttpInfoAsync(string projectUuid, string measurementUuid, MeasReplace measReplace = default(MeasReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->UpdateProjectMeasurement");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->UpdateProjectMeasurement");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.Data = measReplace;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProjectMeasurement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Project Measurement Base Time 基準時刻を更新します。 この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、 新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="measBaseTimePut"> (optional)</param>
        /// <returns>MeasBaseTime</returns>
        public MeasBaseTime UpdateProjectMeasurementBaseTime(string projectUuid, string measurementUuid, string type, MeasBaseTimePut measBaseTimePut = default(MeasBaseTimePut))
        {
            intdash.Client.ApiResponse<MeasBaseTime> localVarResponse = UpdateProjectMeasurementBaseTimeWithHttpInfo(projectUuid, measurementUuid, type, measBaseTimePut);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Project Measurement Base Time 基準時刻を更新します。 この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、 新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="measBaseTimePut"> (optional)</param>
        /// <returns>ApiResponse of MeasBaseTime</returns>
        public intdash.Client.ApiResponse<MeasBaseTime> UpdateProjectMeasurementBaseTimeWithHttpInfo(string projectUuid, string measurementUuid, string type, MeasBaseTimePut measBaseTimePut = default(MeasBaseTimePut))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->UpdateProjectMeasurementBaseTime");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->UpdateProjectMeasurementBaseTime");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'type' when calling MeasMeasurementsApi->UpdateProjectMeasurementBaseTime");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", intdash.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.Data = measBaseTimePut;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<MeasBaseTime>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes/{type}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProjectMeasurementBaseTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Project Measurement Base Time 基準時刻を更新します。 この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、 新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="measBaseTimePut"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasBaseTime</returns>
        public async System.Threading.Tasks.Task<MeasBaseTime> UpdateProjectMeasurementBaseTimeAsync(string projectUuid, string measurementUuid, string type, MeasBaseTimePut measBaseTimePut = default(MeasBaseTimePut), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasBaseTime> localVarResponse = await UpdateProjectMeasurementBaseTimeWithHttpInfoAsync(projectUuid, measurementUuid, type, measBaseTimePut, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Project Measurement Base Time 基準時刻を更新します。 この計測において、使用する基準時刻が設定されていない（ &#x60;basetime_type&#x60; が &#x60;undefined&#x60; ）の場合は、 新しい基準時刻を &#x60;basetime_type&#x60; に設定します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="type">基準時刻のタイプ</param>
        /// <param name="measBaseTimePut"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasBaseTime)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasBaseTime>> UpdateProjectMeasurementBaseTimeWithHttpInfoAsync(string projectUuid, string measurementUuid, string type, MeasBaseTimePut measBaseTimePut = default(MeasBaseTimePut), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->UpdateProjectMeasurementBaseTime");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->UpdateProjectMeasurementBaseTime");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'type' when calling MeasMeasurementsApi->UpdateProjectMeasurementBaseTime");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", intdash.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.Data = measBaseTimePut;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<MeasBaseTime>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes/{type}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProjectMeasurementBaseTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Project Measurement Sequence 計測シーケンスを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <returns>MeasurementSequenceGroup</returns>
        public MeasurementSequenceGroup UpdateProjectMeasurementSequence(string projectUuid, string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace))
        {
            intdash.Client.ApiResponse<MeasurementSequenceGroup> localVarResponse = UpdateProjectMeasurementSequenceWithHttpInfo(projectUuid, measurementUuid, sequencesUuid, measurementSequenceGroupReplace);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Project Measurement Sequence 計測シーケンスを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <returns>ApiResponse of MeasurementSequenceGroup</returns>
        public intdash.Client.ApiResponse<MeasurementSequenceGroup> UpdateProjectMeasurementSequenceWithHttpInfo(string projectUuid, string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->UpdateProjectMeasurementSequence");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->UpdateProjectMeasurementSequence");

            // verify the required parameter 'sequencesUuid' is set
            if (sequencesUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'sequencesUuid' when calling MeasMeasurementsApi->UpdateProjectMeasurementSequence");

            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("sequences_uuid", intdash.Client.ClientUtils.ParameterToString(sequencesUuid)); // path parameter
            localVarRequestOptions.Data = measurementSequenceGroupReplace;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<MeasurementSequenceGroup>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences/{sequences_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProjectMeasurementSequence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Project Measurement Sequence 計測シーケンスを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeasurementSequenceGroup</returns>
        public async System.Threading.Tasks.Task<MeasurementSequenceGroup> UpdateProjectMeasurementSequenceAsync(string projectUuid, string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            intdash.Client.ApiResponse<MeasurementSequenceGroup> localVarResponse = await UpdateProjectMeasurementSequenceWithHttpInfoAsync(projectUuid, measurementUuid, sequencesUuid, measurementSequenceGroupReplace, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Project Measurement Sequence 計測シーケンスを更新します。
        /// </summary>
        /// <exception cref="intdash.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid">プロジェクトのUUID</param>
        /// <param name="measurementUuid">計測のUUID</param>
        /// <param name="sequencesUuid">計測シーケンスのUUID</param>
        /// <param name="measurementSequenceGroupReplace"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeasurementSequenceGroup)</returns>
        public async System.Threading.Tasks.Task<intdash.Client.ApiResponse<MeasurementSequenceGroup>> UpdateProjectMeasurementSequenceWithHttpInfoAsync(string projectUuid, string measurementUuid, string sequencesUuid, MeasurementSequenceGroupReplace measurementSequenceGroupReplace = default(MeasurementSequenceGroupReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectUuid' is set
            if (projectUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'projectUuid' when calling MeasMeasurementsApi->UpdateProjectMeasurementSequence");

            // verify the required parameter 'measurementUuid' is set
            if (measurementUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'measurementUuid' when calling MeasMeasurementsApi->UpdateProjectMeasurementSequence");

            // verify the required parameter 'sequencesUuid' is set
            if (sequencesUuid == null)
                throw new intdash.Client.ApiException(400, "Missing required parameter 'sequencesUuid' when calling MeasMeasurementsApi->UpdateProjectMeasurementSequence");


            intdash.Client.RequestOptions localVarRequestOptions = new intdash.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = intdash.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = intdash.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_uuid", intdash.Client.ClientUtils.ParameterToString(projectUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("measurement_uuid", intdash.Client.ClientUtils.ParameterToString(measurementUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("sequences_uuid", intdash.Client.ClientUtils.ParameterToString(sequencesUuid)); // path parameter
            localVarRequestOptions.Data = measurementSequenceGroupReplace;

            // authentication (IntdashToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Intdash-Token", this.Configuration.GetApiKeyWithPrefix("X-Intdash-Token"));
            }
            // authentication (OAuth2TokenInCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("_bearer_token")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("_bearer_token", this.Configuration.GetApiKeyWithPrefix("_bearer_token")));
            }
            // authentication (OAuth2TokenInHeader) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<MeasurementSequenceGroup>("/v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences/{sequences_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProjectMeasurementSequence", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
